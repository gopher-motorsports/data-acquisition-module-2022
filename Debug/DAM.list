
DAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800a688  0800a688  0001a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7a0  0800a7a0  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7a0  0800a7a0  0001a7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7a8  0800a7a8  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7a8  0800a7a8  0001a7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7ac  0800a7ac  0001a7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800a7b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000071f8  20000100  0800a8b0  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200072f8  0800a8b0  000272f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000236ef  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004205  00000000  00000000  0004381f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017d0  00000000  00000000  00047a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015e0  00000000  00000000  000491f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026e8c  00000000  00000000  0004a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001437a  00000000  00000000  00071664  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea719  00000000  00000000  000859de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001700f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006504  00000000  00000000  00170174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a670 	.word	0x0800a670

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0800a670 	.word	0x0800a670

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000594:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <__NVIC_SystemReset+0x20>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005a0:	4903      	ldr	r1, [pc, #12]	; (80005b0 <__NVIC_SystemReset+0x20>)
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <__NVIC_SystemReset+0x24>)
 80005a4:	4313      	orrs	r3, r2
 80005a6:	60cb      	str	r3, [r1, #12]
 80005a8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <__NVIC_SystemReset+0x1c>
 80005b0:	e000ed00 	.word	0xe000ed00
 80005b4:	05fa0004 	.word	0x05fa0004

080005b8 <handle_DAM_error>:
static boolean hasInitialized = FALSE;


// TODO: Error state behavior
// TODO: pitch Error scheme to HOC
void handle_DAM_error (DAM_ERROR_STATE error_state) {
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
    latched_error_state = error_state;
 80005c2:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <handle_DAM_error+0x40>)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	7013      	strb	r3, [r2, #0]
    switch (error_state) {
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d002      	beq.n	80005d4 <handle_DAM_error+0x1c>
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	d002      	beq.n	80005d8 <handle_DAM_error+0x20>
 80005d2:	e003      	b.n	80005dc <handle_DAM_error+0x24>
        // log the error?
        case INITIALIZATION_ERROR:
        {
            NVIC_SystemReset();
 80005d4:	f7ff ffdc 	bl	8000590 <__NVIC_SystemReset>
            break;
        }
        case CRITICAL_ERROR:
        {
            NVIC_SystemReset();
 80005d8:	f7ff ffda 	bl	8000590 <__NVIC_SystemReset>
            break;
        }

        default:
        {
            error_count++;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <handle_DAM_error+0x44>)
 80005de:	e9d3 1200 	ldrd	r1, r2, [r3]
 80005e2:	1c4b      	adds	r3, r1, #1
 80005e4:	f142 0400 	adc.w	r4, r2, #0
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <handle_DAM_error+0x44>)
 80005ea:	e9c2 3400 	strd	r3, r4, [r2]
            break;
 80005ee:	bf00      	nop
        }
    }
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd90      	pop	{r4, r7, pc}
 80005f8:	20000129 	.word	0x20000129
 80005fc:	20000120 	.word	0x20000120

08000600 <DAM_init>:

void DAM_init(void) {
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b08d      	sub	sp, #52	; 0x34
 8000604:	af04      	add	r7, sp, #16
    if (!hasInitialized) {
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <DAM_init+0x160>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d130      	bne.n	8000670 <DAM_init+0x70>
        // Run once initialization code
        init_sensor_hal();
 800060e:	f002 f9fd 	bl	8002a0c <init_sensor_hal>
        if (init_can(&GOPHERCAN_HANDLE, THIS_DAM_ID, BXTYPE_MASTER)) {
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	4853      	ldr	r0, [pc, #332]	; (8000764 <DAM_init+0x164>)
 8000618:	f002 fd32 	bl	8003080 <init_can>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <DAM_init+0x28>
            handle_DAM_error(TBD_ERROR);
 8000622:	2005      	movs	r0, #5
 8000624:	f7ff ffc8 	bl	80005b8 <handle_DAM_error>
        }

        add_custom_can_func(SEND_BUCKET_PARAMS, &send_bucket_params, TRUE, NULL);
 8000628:	2300      	movs	r3, #0
 800062a:	2201      	movs	r2, #1
 800062c:	494e      	ldr	r1, [pc, #312]	; (8000768 <DAM_init+0x168>)
 800062e:	2003      	movs	r0, #3
 8000630:	f002 ffc8 	bl	80035c4 <add_custom_can_func>
        add_custom_can_func(BUCKET_OK, &bucket_ok, TRUE, NULL);
 8000634:	2300      	movs	r3, #0
 8000636:	2201      	movs	r2, #1
 8000638:	494c      	ldr	r1, [pc, #304]	; (800076c <DAM_init+0x16c>)
 800063a:	2007      	movs	r0, #7
 800063c:	f002 ffc2 	bl	80035c4 <add_custom_can_func>
        add_custom_can_func(REQUEST_BUCKET, &bucket_requested, TRUE, NULL);
 8000640:	2300      	movs	r3, #0
 8000642:	2201      	movs	r2, #1
 8000644:	494a      	ldr	r1, [pc, #296]	; (8000770 <DAM_init+0x170>)
 8000646:	2008      	movs	r0, #8
 8000648:	f002 ffbc 	bl	80035c4 <add_custom_can_func>


        configLibADC(&hadc1, &hadc2, &hadc3);
 800064c:	4a49      	ldr	r2, [pc, #292]	; (8000774 <DAM_init+0x174>)
 800064e:	494a      	ldr	r1, [pc, #296]	; (8000778 <DAM_init+0x178>)
 8000650:	484a      	ldr	r0, [pc, #296]	; (800077c <DAM_init+0x17c>)
 8000652:	f002 f9ed 	bl	8002a30 <configLibADC>
        configLibTIM(&htim10, ADC1_SCHEDULING_FREQUENCY_HZ,
 8000656:	2310      	movs	r3, #16
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	4b48      	ldr	r3, [pc, #288]	; (8000780 <DAM_init+0x180>)
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	4a47      	ldr	r2, [pc, #284]	; (8000784 <DAM_init+0x184>)
 8000666:	2164      	movs	r1, #100	; 0x64
 8000668:	4847      	ldr	r0, [pc, #284]	; (8000788 <DAM_init+0x188>)
 800066a:	f002 fa77 	bl	8002b5c <configLibTIM>
 800066e:	e06f      	b.n	8000750 <DAM_init+0x150>
                     &htim11, ADC2_SCHEDULING_FREQUENCY_HZ,
                     &htim13, ADC3_SCHEDULING_FREQUENCY_HZ, TIMER_PSC);
    }
    else {
        // All code needed for DLM-DAM reset goes here
        stopTimers();
 8000670:	f002 fb0e 	bl	8002c90 <stopTimers>
        // Reset all of the buffers
        for (U8 i = 0; i < NUM_ADC1_PARAMS; i++) {
 8000674:	2300      	movs	r3, #0
 8000676:	77fb      	strb	r3, [r7, #31]
 8000678:	e00e      	b.n	8000698 <DAM_init+0x98>
            reset_buffer(&adc1_sensor_params[i].buffer);
 800067a:	7ffa      	ldrb	r2, [r7, #31]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	33b0      	adds	r3, #176	; 0xb0
 8000686:	4a41      	ldr	r2, [pc, #260]	; (800078c <DAM_init+0x18c>)
 8000688:	4413      	add	r3, r2
 800068a:	3304      	adds	r3, #4
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fc7f 	bl	8002f90 <reset_buffer>
        for (U8 i = 0; i < NUM_ADC1_PARAMS; i++) {
 8000692:	7ffb      	ldrb	r3, [r7, #31]
 8000694:	3301      	adds	r3, #1
 8000696:	77fb      	strb	r3, [r7, #31]
 8000698:	7ffb      	ldrb	r3, [r7, #31]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d9ed      	bls.n	800067a <DAM_init+0x7a>
        }
        for (U8 i = 0; i < NUM_ADC2_PARAMS; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	767b      	strb	r3, [r7, #25]
 80006a2:	bf00      	nop
            reset_buffer(&adc2_sensor_params[i].buffer);
        }
        for (U8 i = 0; i < NUM_ADC3_PARAMS; i++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	77bb      	strb	r3, [r7, #30]
 80006a8:	e00e      	b.n	80006c8 <DAM_init+0xc8>
            reset_buffer(&adc3_sensor_params[i].buffer);
 80006aa:	7fba      	ldrb	r2, [r7, #30]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	019b      	lsls	r3, r3, #6
 80006b4:	33b0      	adds	r3, #176	; 0xb0
 80006b6:	4a36      	ldr	r2, [pc, #216]	; (8000790 <DAM_init+0x190>)
 80006b8:	4413      	add	r3, r2
 80006ba:	3304      	adds	r3, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fc67 	bl	8002f90 <reset_buffer>
        for (U8 i = 0; i < NUM_ADC3_PARAMS; i++) {
 80006c2:	7fbb      	ldrb	r3, [r7, #30]
 80006c4:	3301      	adds	r3, #1
 80006c6:	77bb      	strb	r3, [r7, #30]
 80006c8:	7fbb      	ldrb	r3, [r7, #30]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0ed      	beq.n	80006aa <DAM_init+0xaa>
        }
        for (U8 i = 0; i < NUM_CAN_SENSOR_PARAMS; i++) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	777b      	strb	r3, [r7, #29]
 80006d2:	e00c      	b.n	80006ee <DAM_init+0xee>
            reset_buffer(&can_sensor_params[i].buffer);
 80006d4:	7f7b      	ldrb	r3, [r7, #29]
 80006d6:	2268      	movs	r2, #104	; 0x68
 80006d8:	fb02 f303 	mul.w	r3, r2, r3
 80006dc:	3360      	adds	r3, #96	; 0x60
 80006de:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <DAM_init+0x194>)
 80006e0:	4413      	add	r3, r2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fc54 	bl	8002f90 <reset_buffer>
        for (U8 i = 0; i < NUM_CAN_SENSOR_PARAMS; i++) {
 80006e8:	7f7b      	ldrb	r3, [r7, #29]
 80006ea:	3301      	adds	r3, #1
 80006ec:	777b      	strb	r3, [r7, #29]
 80006ee:	7f7b      	ldrb	r3, [r7, #29]
 80006f0:	2b03      	cmp	r3, #3
 80006f2:	d9ef      	bls.n	80006d4 <DAM_init+0xd4>
        }


        // enable all bucket params, set status to clean
        for (U8 i = 0; i < NUM_BUCKETS; i++) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	773b      	strb	r3, [r7, #28]
 80006f8:	e027      	b.n	800074a <DAM_init+0x14a>
            BUCKET bucket = buckets[i];
 80006fa:	7f3b      	ldrb	r3, [r7, #28]
 80006fc:	4a26      	ldr	r2, [pc, #152]	; (8000798 <DAM_init+0x198>)
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	4413      	add	r3, r2
 8000702:	1d3c      	adds	r4, r7, #4
 8000704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000706:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            bucket.state = BUCKET_INIT;
 800070a:	2300      	movs	r3, #0
 800070c:	723b      	strb	r3, [r7, #8]
            for (U16 n = 0; n < bucket.bucket.len; n++) {
 800070e:	2300      	movs	r3, #0
 8000710:	837b      	strh	r3, [r7, #26]
 8000712:	e013      	b.n	800073c <DAM_init+0x13c>
                GENERAL_PARAMETER* param = &bucket.bucket.list[n];
 8000714:	68f9      	ldr	r1, [r7, #12]
 8000716:	8b7a      	ldrh	r2, [r7, #26]
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	440b      	add	r3, r1
 8000722:	617b      	str	r3, [r7, #20]
                param->status = CLEAN;
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	2200      	movs	r2, #0
 8000728:	741a      	strb	r2, [r3, #16]
                param->param.float_struct.update_enabled = TRUE;
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	2201      	movs	r2, #1
 800072e:	711a      	strb	r2, [r3, #4]
                param->param.float_struct.data = INITIAL_DATA; // Set some initial value
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	4a1a      	ldr	r2, [pc, #104]	; (800079c <DAM_init+0x19c>)
 8000734:	609a      	str	r2, [r3, #8]
            for (U16 n = 0; n < bucket.bucket.len; n++) {
 8000736:	8b7b      	ldrh	r3, [r7, #26]
 8000738:	3301      	adds	r3, #1
 800073a:	837b      	strh	r3, [r7, #26]
 800073c:	8a3b      	ldrh	r3, [r7, #16]
 800073e:	8b7a      	ldrh	r2, [r7, #26]
 8000740:	429a      	cmp	r2, r3
 8000742:	d3e7      	bcc.n	8000714 <DAM_init+0x114>
        for (U8 i = 0; i < NUM_BUCKETS; i++) {
 8000744:	7f3b      	ldrb	r3, [r7, #28]
 8000746:	3301      	adds	r3, #1
 8000748:	773b      	strb	r3, [r7, #28]
 800074a:	7f3b      	ldrb	r3, [r7, #28]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d9d4      	bls.n	80006fa <DAM_init+0xfa>
            }
        }
    }

    hasInitialized = TRUE;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <DAM_init+0x160>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]

}
 8000756:	bf00      	nop
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd90      	pop	{r4, r7, pc}
 800075e:	bf00      	nop
 8000760:	2000012a 	.word	0x2000012a
 8000764:	20004d3c 	.word	0x20004d3c
 8000768:	08000dd1 	.word	0x08000dd1
 800076c:	08000e09 	.word	0x08000e09
 8000770:	08000e59 	.word	0x08000e59
 8000774:	20004bac 	.word	0x20004bac
 8000778:	20004a50 	.word	0x20004a50
 800077c:	20004b3c 	.word	0x20004b3c
 8000780:	20004bf4 	.word	0x20004bf4
 8000784:	20004c34 	.word	0x20004c34
 8000788:	20004a98 	.word	0x20004a98
 800078c:	20004f40 	.word	0x20004f40
 8000790:	20004dd8 	.word	0x20004dd8
 8000794:	20005900 	.word	0x20005900
 8000798:	20004da8 	.word	0x20004da8
 800079c:	432a0000 	.word	0x432a0000

080007a0 <complete_DLM_handshake>:


void complete_DLM_handshake (void) {
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af04      	add	r7, sp, #16

    boolean all_buckets_ok = FALSE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    while (!all_buckets_ok) {
 80007ac:	e060      	b.n	8000870 <complete_DLM_handshake+0xd0>
        boolean check_buckets_ok = TRUE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

        for (U8 i = 0; i < NUM_BUCKETS; i++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80007ba:	e051      	b.n	8000860 <complete_DLM_handshake+0xc0>
            BUCKET bucket = buckets[i];
 80007bc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80007c0:	4a46      	ldr	r2, [pc, #280]	; (80008dc <complete_DLM_handshake+0x13c>)
 80007c2:	011b      	lsls	r3, r3, #4
 80007c4:	4413      	add	r3, r2
 80007c6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80007ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (bucket.state == BUCKET_DLM_OK) {
 80007d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d03d      	beq.n	8000854 <complete_DLM_handshake+0xb4>
                continue; // if bucket ok dont do anything
            }
            check_buckets_ok = FALSE;
 80007d8:	2300      	movs	r3, #0
 80007da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            send_can_command(PRIO_HIGH, DLM_ID, SET_BUCKET_SIZE, bucket.bucket_id, (U8)bucket.bucket.len, 0, 0);
 80007de:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80007e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2200      	movs	r2, #0
 80007e8:	9202      	str	r2, [sp, #8]
 80007ea:	2200      	movs	r2, #0
 80007ec:	9201      	str	r2, [sp, #4]
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	460b      	mov	r3, r1
 80007f2:	2204      	movs	r2, #4
 80007f4:	2101      	movs	r1, #1
 80007f6:	2000      	movs	r0, #0
 80007f8:	f002 fd90 	bl	800331c <send_can_command>

            for (U16 n = 0; n < bucket.bucket.len; n++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	877b      	strh	r3, [r7, #58]	; 0x3a
 8000800:	e020      	b.n	8000844 <complete_DLM_handshake+0xa4>
                GENERAL_PARAMETER param = bucket.bucket.list[n];
 8000802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000804:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000806:	4613      	mov	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	440b      	add	r3, r1
 8000810:	f107 0410 	add.w	r4, r7, #16
 8000814:	461d      	mov	r5, r3
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800081e:	e884 0003 	stmia.w	r4, {r0, r1}
                send_can_command(PRIO_HIGH, DLM_ID, ADD_PARAM_TO_BUCKET, bucket.bucket_id,
 8000822:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
                                 GET_U16_MSB(param.param.float_struct.param_id), GET_U16_LSB(param.param.float_struct.param_id), 0);
 8000826:	7dbb      	ldrb	r3, [r7, #22]
                send_can_command(PRIO_HIGH, DLM_ID, ADD_PARAM_TO_BUCKET, bucket.bucket_id,
 8000828:	2200      	movs	r2, #0
 800082a:	9202      	str	r2, [sp, #8]
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2300      	movs	r3, #0
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	460b      	mov	r3, r1
 8000834:	2205      	movs	r2, #5
 8000836:	2101      	movs	r1, #1
 8000838:	2000      	movs	r0, #0
 800083a:	f002 fd6f 	bl	800331c <send_can_command>
            for (U16 n = 0; n < bucket.bucket.len; n++) {
 800083e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000840:	3301      	adds	r3, #1
 8000842:	877b      	strh	r3, [r7, #58]	; 0x3a
 8000844:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000846:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000848:	429a      	cmp	r2, r3
 800084a:	d3da      	bcc.n	8000802 <complete_DLM_handshake+0x62>
            }
            osDelay(1); // Delay to avoid flooding the TX_queue
 800084c:	2001      	movs	r0, #1
 800084e:	f006 fe33 	bl	80074b8 <osDelay>
 8000852:	e000      	b.n	8000856 <complete_DLM_handshake+0xb6>
                continue; // if bucket ok dont do anything
 8000854:	bf00      	nop
        for (U8 i = 0; i < NUM_BUCKETS; i++) {
 8000856:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800085a:	3301      	adds	r3, #1
 800085c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000860:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000864:	2b02      	cmp	r3, #2
 8000866:	d9a9      	bls.n	80007bc <complete_DLM_handshake+0x1c>
        }
        all_buckets_ok = check_buckets_ok;
 8000868:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800086c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    while (!all_buckets_ok) {
 8000870:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000874:	2b00      	cmp	r3, #0
 8000876:	d09a      	beq.n	80007ae <complete_DLM_handshake+0xe>
    }

    // Assign the buckets to the correct frequencies after all buckets OK
    for (U8 i = 0; i < NUM_BUCKETS; i++) {
 8000878:	2300      	movs	r3, #0
 800087a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800087e:	e020      	b.n	80008c2 <complete_DLM_handshake+0x122>
        BUCKET bucket = buckets[i];
 8000880:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000884:	4a15      	ldr	r2, [pc, #84]	; (80008dc <complete_DLM_handshake+0x13c>)
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	4413      	add	r3, r2
 800088a:	463c      	mov	r4, r7
 800088c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800088e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        send_can_command(PRIO_HIGH, DLM_ID, ASSIGN_BUCKET_TO_FRQ,
 8000892:	7838      	ldrb	r0, [r7, #0]
                         bucket.bucket_id, GET_U16_MSB(bucket.frequency), GET_U16_LSB(bucket.frequency), 0);
 8000894:	887b      	ldrh	r3, [r7, #2]
 8000896:	0a1b      	lsrs	r3, r3, #8
 8000898:	b29b      	uxth	r3, r3
        send_can_command(PRIO_HIGH, DLM_ID, ASSIGN_BUCKET_TO_FRQ,
 800089a:	b2db      	uxtb	r3, r3
                         bucket.bucket_id, GET_U16_MSB(bucket.frequency), GET_U16_LSB(bucket.frequency), 0);
 800089c:	887a      	ldrh	r2, [r7, #2]
        send_can_command(PRIO_HIGH, DLM_ID, ASSIGN_BUCKET_TO_FRQ,
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	2100      	movs	r1, #0
 80008a2:	9102      	str	r1, [sp, #8]
 80008a4:	9201      	str	r2, [sp, #4]
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	4603      	mov	r3, r0
 80008aa:	2206      	movs	r2, #6
 80008ac:	2101      	movs	r1, #1
 80008ae:	2000      	movs	r0, #0
 80008b0:	f002 fd34 	bl	800331c <send_can_command>
        bucket.state = BUCKET_GETTING_DATA;
 80008b4:	2302      	movs	r3, #2
 80008b6:	713b      	strb	r3, [r7, #4]
    for (U8 i = 0; i < NUM_BUCKETS; i++) {
 80008b8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80008bc:	3301      	adds	r3, #1
 80008be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80008c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d9da      	bls.n	8000880 <complete_DLM_handshake+0xe0>
    }

    startTimers(); // Start the data acquisition process
 80008ca:	f002 f9c7 	bl	8002c5c <startTimers>
    dam_state = NORMAL;
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <complete_DLM_handshake+0x140>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	701a      	strb	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	3740      	adds	r7, #64	; 0x40
 80008d8:	46bd      	mov	sp, r7
 80008da:	bdb0      	pop	{r4, r5, r7, pc}
 80008dc:	20004da8 	.word	0x20004da8
 80008e0:	20000128 	.word	0x20000128

080008e4 <get_bucket_by_id>:



BUCKET* get_bucket_by_id (U8 bucket_id) {
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
    for (U8 i = 0; i < NUM_BUCKETS; i++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	73fb      	strb	r3, [r7, #15]
 80008f2:	e00f      	b.n	8000914 <get_bucket_by_id+0x30>
        if (buckets[i].bucket_id == bucket_id) {
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	4a0c      	ldr	r2, [pc, #48]	; (8000928 <get_bucket_by_id+0x44>)
 80008f8:	011b      	lsls	r3, r3, #4
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	79fa      	ldrb	r2, [r7, #7]
 8000900:	429a      	cmp	r2, r3
 8000902:	d104      	bne.n	800090e <get_bucket_by_id+0x2a>
            return &buckets[i];
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <get_bucket_by_id+0x44>)
 800090a:	4413      	add	r3, r2
 800090c:	e006      	b.n	800091c <get_bucket_by_id+0x38>
    for (U8 i = 0; i < NUM_BUCKETS; i++) {
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	3301      	adds	r3, #1
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d9ec      	bls.n	80008f4 <get_bucket_by_id+0x10>
        }
    }
    return NULL;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	20004da8 	.word	0x20004da8

0800092c <ADC_sensor_service>:



void ADC_sensor_service (void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b0ba      	sub	sp, #232	; 0xe8
 8000930:	af00      	add	r7, sp, #0
    for (U8 i = 0; i < NUM_ADC1_PARAMS; i++) {
 8000932:	2300      	movs	r3, #0
 8000934:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8000938:	e044      	b.n	80009c4 <ADC_sensor_service+0x98>
        ANALOG_SENSOR_PARAM param = adc1_sensor_params[i];
 800093a:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800093e:	494e      	ldr	r1, [pc, #312]	; (8000a78 <ADC_sensor_service+0x14c>)
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	019b      	lsls	r3, r3, #6
 8000948:	18ca      	adds	r2, r1, r3
 800094a:	463b      	mov	r3, r7
 800094c:	4611      	mov	r1, r2
 800094e:	22c0      	movs	r2, #192	; 0xc0
 8000950:	4618      	mov	r0, r3
 8000952:	f009 fa7d 	bl	8009e50 <memcpy>
        if (buffer_full(&param.buffer)) {
 8000956:	463b      	mov	r3, r7
 8000958:	33b4      	adds	r3, #180	; 0xb4
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fad6 	bl	8002f0c <buffer_full>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d029      	beq.n	80009ba <ADC_sensor_service+0x8e>
            U16 avg;
            if (average_buffer(&param.buffer, &avg) != BUFFER_SUCCESS) {
 8000966:	f107 02da 	add.w	r2, r7, #218	; 0xda
 800096a:	463b      	mov	r3, r7
 800096c:	33b4      	adds	r3, #180	; 0xb4
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f002 fb21 	bl	8002fb8 <average_buffer>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d11e      	bne.n	80009ba <ADC_sensor_service+0x8e>
                continue;
            }
            float data_in = avg;
 800097c:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8000980:	ee07 3a90 	vmov	s15, r3
 8000984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000988:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
            float converted;
            if (apply_analog_sensor_conversion(&param.analog_sensor, data_in, &converted)
 800098c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8000990:	463b      	mov	r3, r7
 8000992:	3318      	adds	r3, #24
 8000994:	4611      	mov	r1, r2
 8000996:	ed97 0a37 	vldr	s0, [r7, #220]	; 0xdc
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fb53 	bl	8003046 <apply_analog_sensor_conversion>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d002      	beq.n	80009ac <ADC_sensor_service+0x80>
                 != BUFFER_SUCCESS) {
                converted = DATA_CONV_FAILURE_REPLACEMENT;
 80009a6:	4b35      	ldr	r3, [pc, #212]	; (8000a7c <ADC_sensor_service+0x150>)
 80009a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            }
            // No data cast as we assume params are set up correctly
            param.analog_param.param.float_struct.data = converted;
 80009ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80009b0:	60bb      	str	r3, [r7, #8]
            fill_analog_subparams(&param);
 80009b2:	463b      	mov	r3, r7
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f911 	bl	8000bdc <fill_analog_subparams>
    for (U8 i = 0; i < NUM_ADC1_PARAMS; i++) {
 80009ba:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80009be:	3301      	adds	r3, #1
 80009c0:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80009c4:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d9b6      	bls.n	800093a <ADC_sensor_service+0xe>
        }
    }

    for (U8 i = 0; i < NUM_ADC2_PARAMS; i++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 80009d2:	bf00      	nop
            param.analog_param.param.float_struct.data = converted;
            fill_analog_subparams(&param);
        }
    }

    for (U8 i = 0; i < NUM_ADC3_PARAMS; i++) {
 80009d4:	2300      	movs	r3, #0
 80009d6:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 80009da:	e044      	b.n	8000a66 <ADC_sensor_service+0x13a>
        ANALOG_SENSOR_PARAM param = adc3_sensor_params[i];
 80009dc:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 80009e0:	4927      	ldr	r1, [pc, #156]	; (8000a80 <ADC_sensor_service+0x154>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	019b      	lsls	r3, r3, #6
 80009ea:	18ca      	adds	r2, r1, r3
 80009ec:	463b      	mov	r3, r7
 80009ee:	4611      	mov	r1, r2
 80009f0:	22c0      	movs	r2, #192	; 0xc0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f009 fa2c 	bl	8009e50 <memcpy>
        if (buffer_full(&param.buffer)) {
 80009f8:	463b      	mov	r3, r7
 80009fa:	33b4      	adds	r3, #180	; 0xb4
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fa85 	bl	8002f0c <buffer_full>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d029      	beq.n	8000a5c <ADC_sensor_service+0x130>
            U16 avg;
            if (average_buffer(&param.buffer, &avg) != BUFFER_SUCCESS) {
 8000a08:	f107 02ca 	add.w	r2, r7, #202	; 0xca
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	33b4      	adds	r3, #180	; 0xb4
 8000a10:	4611      	mov	r1, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 fad0 	bl	8002fb8 <average_buffer>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d11e      	bne.n	8000a5c <ADC_sensor_service+0x130>
                continue;
            }
            float data_in = avg;
 8000a1e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8000a22:	ee07 3a90 	vmov	s15, r3
 8000a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a2a:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
            float converted;
            if (apply_analog_sensor_conversion(&param.analog_sensor, data_in, &converted)
 8000a2e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000a32:	463b      	mov	r3, r7
 8000a34:	3318      	adds	r3, #24
 8000a36:	4611      	mov	r1, r2
 8000a38:	ed97 0a38 	vldr	s0, [r7, #224]	; 0xe0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 fb02 	bl	8003046 <apply_analog_sensor_conversion>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d002      	beq.n	8000a4e <ADC_sensor_service+0x122>
                 != BUFFER_SUCCESS) {
                converted = DATA_CONV_FAILURE_REPLACEMENT;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <ADC_sensor_service+0x150>)
 8000a4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            }
            // No data cast as we assume params are set up correctly
            param.analog_param.param.float_struct.data = converted;
 8000a4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000a52:	60bb      	str	r3, [r7, #8]
            fill_analog_subparams(&param);
 8000a54:	463b      	mov	r3, r7
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f8c0 	bl	8000bdc <fill_analog_subparams>
    for (U8 i = 0; i < NUM_ADC3_PARAMS; i++) {
 8000a5c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8000a60:	3301      	adds	r3, #1
 8000a62:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8000a66:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0b6      	beq.n	80009dc <ADC_sensor_service+0xb0>
        }
    }
}
 8000a6e:	bf00      	nop
 8000a70:	37e8      	adds	r7, #232	; 0xe8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20004f40 	.word	0x20004f40
 8000a7c:	bf800000 	.word	0xbf800000
 8000a80:	20004dd8 	.word	0x20004dd8

08000a84 <sensorCAN_service>:


void sensorCAN_service (void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09e      	sub	sp, #120	; 0x78
 8000a88:	af00      	add	r7, sp, #0
    for (U8 i = 0; i < NUM_CAN_SENSOR_PARAMS; i++) {
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000a90:	e042      	b.n	8000b18 <sensorCAN_service+0x94>
        CAN_SENSOR_PARAM param = can_sensor_params[i];
 8000a92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a96:	4a24      	ldr	r2, [pc, #144]	; (8000b28 <sensorCAN_service+0xa4>)
 8000a98:	2168      	movs	r1, #104	; 0x68
 8000a9a:	fb01 f303 	mul.w	r3, r1, r3
 8000a9e:	441a      	add	r2, r3
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	2268      	movs	r2, #104	; 0x68
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f009 f9d2 	bl	8009e50 <memcpy>
        if (buffer_full(&param.buffer)) {
 8000aac:	463b      	mov	r3, r7
 8000aae:	3360      	adds	r3, #96	; 0x60
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fa2b 	bl	8002f0c <buffer_full>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d028      	beq.n	8000b0e <sensorCAN_service+0x8a>
            U16 avg;
            if (average_buffer(&param.buffer, &avg) != BUFFER_SUCCESS) {
 8000abc:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	3360      	adds	r3, #96	; 0x60
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 fa76 	bl	8002fb8 <average_buffer>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d11d      	bne.n	8000b0e <sensorCAN_service+0x8a>
                continue;
            }
            float data_in = avg;
 8000ad2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ade:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            float converted;
            if (apply_can_sensor_conversion(&param.can_sensor, param.message_idx, data_in, &converted)
 8000ae2:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8000ae6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000aea:	463b      	mov	r3, r7
 8000aec:	3318      	adds	r3, #24
 8000aee:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 fa94 	bl	8003020 <apply_can_sensor_conversion>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d001      	beq.n	8000b02 <sensorCAN_service+0x7e>
                 != BUFFER_SUCCESS) {
                converted = DATA_CONV_FAILURE_REPLACEMENT;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <sensorCAN_service+0xa8>)
 8000b00:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            // No data cast as we assume params are set up correctly
            param.can_param.param.float_struct.data = converted; // fill the data
 8000b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b04:	60bb      	str	r3, [r7, #8]
            fill_can_subparams(&param);
 8000b06:	463b      	mov	r3, r7
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f811 	bl	8000b30 <fill_can_subparams>
    for (U8 i = 0; i < NUM_CAN_SENSOR_PARAMS; i++) {
 8000b0e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000b12:	3301      	adds	r3, #1
 8000b14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000b18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d9b8      	bls.n	8000a92 <sensorCAN_service+0xe>
        }
    }
}
 8000b20:	bf00      	nop
 8000b22:	3778      	adds	r7, #120	; 0x78
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20005900 	.word	0x20005900
 8000b2c:	bf800000 	.word	0xbf800000

08000b30 <fill_can_subparams>:

void fill_can_subparams (CAN_SENSOR_PARAM* param) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    for (U8 i = 0; i < param->num_filtered_params; i++) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	77fb      	strb	r3, [r7, #31]
 8000b3c:	e042      	b.n	8000bc4 <fill_can_subparams+0x94>
        U16_BUFFER temp = param->buffer;
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	3260      	adds	r2, #96	; 0x60
 8000b46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4a:	e883 0003 	stmia.w	r3, {r0, r1}
        apply_filter(&temp, &param->filtered_subparams[i]);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b52:	7ffb      	ldrb	r3, [r7, #31]
 8000b54:	015b      	lsls	r3, r3, #5
 8000b56:	441a      	add	r2, r3
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fa82 	bl	8003068 <apply_filter>
        U16 avg;
        if (average_buffer(&param->buffer, &avg) != BUFFER_SUCCESS) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3360      	adds	r3, #96	; 0x60
 8000b68:	f107 020e 	add.w	r2, r7, #14
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 fa22 	bl	8002fb8 <average_buffer>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d120      	bne.n	8000bbc <fill_can_subparams+0x8c>
            continue;
        }
        float data_in = avg;
 8000b7a:	89fb      	ldrh	r3, [r7, #14]
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b84:	edc7 7a06 	vstr	s15, [r7, #24]
        float converted;
        if (apply_can_sensor_conversion(&param->can_sensor, param->message_idx, data_in, &converted)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f103 0018 	add.w	r0, r3, #24
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000b94:	f107 0208 	add.w	r2, r7, #8
 8000b98:	ed97 0a06 	vldr	s0, [r7, #24]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f002 fa3f 	bl	8003020 <apply_can_sensor_conversion>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d001      	beq.n	8000bac <fill_can_subparams+0x7c>
             != BUFFER_SUCCESS) {
            converted = DATA_CONV_FAILURE_REPLACEMENT;
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <fill_can_subparams+0xa8>)
 8000baa:	60bb      	str	r3, [r7, #8]
        }
        // No data cast as we assume params are set up correctly
        param->filtered_subparams[i].filtered_param.param.float_struct.data = converted; //fill the data
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bb0:	7ffb      	ldrb	r3, [r7, #31]
 8000bb2:	015b      	lsls	r3, r3, #5
 8000bb4:	4413      	add	r3, r2
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	e000      	b.n	8000bbe <fill_can_subparams+0x8e>
            continue;
 8000bbc:	bf00      	nop
    for (U8 i = 0; i < param->num_filtered_params; i++) {
 8000bbe:	7ffb      	ldrb	r3, [r7, #31]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	77fb      	strb	r3, [r7, #31]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000bca:	7ffa      	ldrb	r2, [r7, #31]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d3b6      	bcc.n	8000b3e <fill_can_subparams+0xe>
    }
}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	bf800000 	.word	0xbf800000

08000bdc <fill_analog_subparams>:

void fill_analog_subparams (ANALOG_SENSOR_PARAM* param) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
    for (U8 i = 0; i < param->num_filtered_subparams; i++) {
 8000be4:	2300      	movs	r3, #0
 8000be6:	77fb      	strb	r3, [r7, #31]
 8000be8:	e041      	b.n	8000c6e <fill_analog_subparams+0x92>
            U16_BUFFER temp = param->buffer;
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	32b4      	adds	r2, #180	; 0xb4
 8000bf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bf6:	e883 0003 	stmia.w	r3, {r0, r1}
            apply_filter(&temp, &param->filtered_subparams[i]);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8000c00:	7ffb      	ldrb	r3, [r7, #31]
 8000c02:	015b      	lsls	r3, r3, #5
 8000c04:	441a      	add	r2, r3
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 fa2b 	bl	8003068 <apply_filter>
            U16 avg;
            if (average_buffer(&param->buffer, &avg) != BUFFER_SUCCESS) {
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	33b4      	adds	r3, #180	; 0xb4
 8000c16:	f107 020e 	add.w	r2, r7, #14
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 f9cb 	bl	8002fb8 <average_buffer>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d11e      	bne.n	8000c66 <fill_analog_subparams+0x8a>
                continue;
            }
            float data_in = avg;
 8000c28:	89fb      	ldrh	r3, [r7, #14]
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c32:	edc7 7a06 	vstr	s15, [r7, #24]
            float converted;
            if (apply_analog_sensor_conversion(&param->analog_sensor, data_in, &converted) != BUFFER_SUCCESS) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3318      	adds	r3, #24
 8000c3a:	f107 0208 	add.w	r2, r7, #8
 8000c3e:	4611      	mov	r1, r2
 8000c40:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 f9fe 	bl	8003046 <apply_analog_sensor_conversion>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d001      	beq.n	8000c54 <fill_analog_subparams+0x78>
                converted = DATA_CONV_FAILURE_REPLACEMENT;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <fill_analog_subparams+0xa8>)
 8000c52:	60bb      	str	r3, [r7, #8]
            }
            // No data cast as we assume params are set up correctly
            param->filtered_subparams[i].filtered_param.param.float_struct.data = converted; //fill the data
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8000c5a:	7ffb      	ldrb	r3, [r7, #31]
 8000c5c:	015b      	lsls	r3, r3, #5
 8000c5e:	4413      	add	r3, r2
 8000c60:	68ba      	ldr	r2, [r7, #8]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	e000      	b.n	8000c68 <fill_analog_subparams+0x8c>
                continue;
 8000c66:	bf00      	nop
    for (U8 i = 0; i < param->num_filtered_subparams; i++) {
 8000c68:	7ffb      	ldrb	r3, [r7, #31]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	77fb      	strb	r3, [r7, #31]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8000c74:	7ffa      	ldrb	r2, [r7, #31]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d3b7      	bcc.n	8000bea <fill_analog_subparams+0xe>
    }
}
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	bf800000 	.word	0xbf800000

08000c88 <send_bucket_task>:

/* send_bucket_task
 * Task created when BucketRequest gopherCAN command is recieved
 * sends all parameters in the provided bucket, deletes upon completion
 */
void send_bucket_task (void* pvParameters) {
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b08c      	sub	sp, #48	; 0x30
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    BUCKET* bucket = (BUCKET*) pvParameters;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24

    boolean all_params_dirty = FALSE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while (!all_params_dirty) {
 8000c9a:	e035      	b.n	8000d08 <send_bucket_task+0x80>
        boolean check_all_params_dirty = TRUE;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        for (U8 i = 0; i < bucket->bucket.len; i++) {
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000ca8:	e01c      	b.n	8000ce4 <send_bucket_task+0x5c>
            GENERAL_PARAMETER param = bucket->bucket.list[i];
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	6899      	ldr	r1, [r3, #8]
 8000cae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	440b      	add	r3, r1
 8000cbc:	f107 0408 	add.w	r4, r7, #8
 8000cc0:	461d      	mov	r5, r3
 8000cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cca:	e884 0003 	stmia.w	r4, {r0, r1}
            if (param.status < DIRTY) {
 8000cce:	7e3b      	ldrb	r3, [r7, #24]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <send_bucket_task+0x52>
                check_all_params_dirty = FALSE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        for (U8 i = 0; i < bucket->bucket.len; i++) {
 8000cda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000cde:	3301      	adds	r3, #1
 8000ce0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000ce4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	899b      	ldrh	r3, [r3, #12]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d3db      	bcc.n	8000caa <send_bucket_task+0x22>
            }
        }

        all_params_dirty = check_all_params_dirty;
 8000cf2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (!all_params_dirty) osDelay(1); // Wait for data
 8000cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <send_bucket_task+0x80>
 8000d02:	2001      	movs	r0, #1
 8000d04:	f006 fbd8 	bl	80074b8 <osDelay>
    while (!all_params_dirty) {
 8000d08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0c5      	beq.n	8000c9c <send_bucket_task+0x14>
    }

    // send the bucket parameters
    for (U8 i = 0; i < bucket->bucket.len; i++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000d16:	e02b      	b.n	8000d70 <send_bucket_task+0xe8>
        GENERAL_PARAMETER* param = &bucket->bucket.list[i];
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	6899      	ldr	r1, [r3, #8]
 8000d1c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	623b      	str	r3, [r7, #32]
        U16 err_count = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	857b      	strh	r3, [r7, #42]	; 0x2a
        while (send_parameter(PRIO_HIGH, DLM_ID, param->param.float_struct.param_id) != CAN_SUCCESS) {
 8000d30:	e00c      	b.n	8000d4c <send_bucket_task+0xc4>
            if (++err_count > BUCKET_SEND_MAX_ATTEMPTS) {
 8000d32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d34:	3301      	adds	r3, #1
 8000d36:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000d38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d3a:	2b05      	cmp	r3, #5
 8000d3c:	d903      	bls.n	8000d46 <send_bucket_task+0xbe>
                //Todo set error state behavior
                handle_DAM_error(TBD_ERROR);
 8000d3e:	2005      	movs	r0, #5
 8000d40:	f7ff fc3a 	bl	80005b8 <handle_DAM_error>
                break;
 8000d44:	e00c      	b.n	8000d60 <send_bucket_task+0xd8>
            }
            osDelay(1); // Delay due to error
 8000d46:	2001      	movs	r0, #1
 8000d48:	f006 fbb6 	bl	80074b8 <osDelay>
        while (send_parameter(PRIO_HIGH, DLM_ID, param->param.float_struct.param_id) != CAN_SUCCESS) {
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	799b      	ldrb	r3, [r3, #6]
 8000d50:	461a      	mov	r2, r3
 8000d52:	2101      	movs	r1, #1
 8000d54:	2000      	movs	r0, #0
 8000d56:	f002 fb2d 	bl	80033b4 <send_parameter>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1e8      	bne.n	8000d32 <send_bucket_task+0xaa>
        }
        param->status = CLEAN;
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	2200      	movs	r2, #0
 8000d64:	741a      	strb	r2, [r3, #16]
    for (U8 i = 0; i < bucket->bucket.len; i++) {
 8000d66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000d70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	899b      	ldrh	r3, [r3, #12]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d3cc      	bcc.n	8000d18 <send_bucket_task+0x90>
    }

    bucket->state = BUCKET_GETTING_DATA;
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	2202      	movs	r2, #2
 8000d82:	711a      	strb	r2, [r3, #4]
    // Note need Idle task to run
    vTaskDelete(NULL);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f007 fb1f 	bl	80083c8 <vTaskDelete>
}
 8000d8a:	bf00      	nop
 8000d8c:	3730      	adds	r7, #48	; 0x30
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d94 <DAM_main_task>:


/* DAM_main_task
 * Main task state machine
 */
void DAM_main_task (void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    // Must have started buffer service task and tx task
    while (1) {
        switch (dam_state) {
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <DAM_main_task+0x38>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d007      	beq.n	8000db0 <DAM_main_task+0x1c>
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d00a      	beq.n	8000dba <DAM_main_task+0x26>
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10d      	bne.n	8000dc4 <DAM_main_task+0x30>
            case WAITING:
            {
                osDelay(1); // wait
 8000da8:	2001      	movs	r0, #1
 8000daa:	f006 fb85 	bl	80074b8 <osDelay>
                break;
 8000dae:	e00c      	b.n	8000dca <DAM_main_task+0x36>
            }
            case CONFIG:
            {
                DAM_init(); // reset the DAM process if the DLM sends this request
 8000db0:	f7ff fc26 	bl	8000600 <DAM_init>
                complete_DLM_handshake();
 8000db4:	f7ff fcf4 	bl	80007a0 <complete_DLM_handshake>
                break;
 8000db8:	e007      	b.n	8000dca <DAM_main_task+0x36>
            }
            case NORMAL:
            {
                ADC_sensor_service();
 8000dba:	f7ff fdb7 	bl	800092c <ADC_sensor_service>
                sensorCAN_service();
 8000dbe:	f7ff fe61 	bl	8000a84 <sensorCAN_service>
                break;
 8000dc2:	e002      	b.n	8000dca <DAM_main_task+0x36>
            }
            default:
            {
                handle_DAM_error(TBD_ERROR);
 8000dc4:	2005      	movs	r0, #5
 8000dc6:	f7ff fbf7 	bl	80005b8 <handle_DAM_error>
        switch (dam_state) {
 8000dca:	e7e5      	b.n	8000d98 <DAM_main_task+0x4>
 8000dcc:	20000128 	.word	0x20000128

08000dd0 <send_bucket_params>:
//*************** GopherCAN callbacks *****************
/* send_bucket_params
 * Handler for the SEND_BUCKET_PARAMS gopherCAN command
 * sets the DAM into configuration state
 */
void send_bucket_params (U8 sender, void* param, U8 U1, U8 U2, U8 U3, U8 U4) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6039      	str	r1, [r7, #0]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	460b      	mov	r3, r1
 8000de2:	71bb      	strb	r3, [r7, #6]
 8000de4:	4613      	mov	r3, r2
 8000de6:	717b      	strb	r3, [r7, #5]
    if (sender != DLM_ID) return;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d103      	bne.n	8000df6 <send_bucket_params+0x26>

    dam_state = CONFIG;
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <send_bucket_params+0x34>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e000      	b.n	8000df8 <send_bucket_params+0x28>
    if (sender != DLM_ID) return;
 8000df6:	bf00      	nop
}
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000128 	.word	0x20000128

08000e08 <bucket_ok>:
/* bucket_ok
 * Handler for the BUCKET_OK gopherCAN command
 * sets the passed bucket state to OK
 */
void bucket_ok(MODULE_ID sender, void* parameter,
               U8 bucket_id, U8 UNUSED1, U8 UNUSED2, U8 UNUSED3) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6039      	str	r1, [r7, #0]
 8000e10:	4611      	mov	r1, r2
 8000e12:	461a      	mov	r2, r3
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	71bb      	strb	r3, [r7, #6]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	717b      	strb	r3, [r7, #5]

    if (sender != DLM_ID) return;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d113      	bne.n	8000e4e <bucket_ok+0x46>

    BUCKET* bucket = get_bucket_by_id(bucket_id);
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fd5b 	bl	80008e4 <get_bucket_by_id>
 8000e2e:	60f8      	str	r0, [r7, #12]
    if (bucket != NULL && bucket->state <= BUCKET_DLM_OK ) { // dont reset the state of bucket getting data/sending
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <bucket_ok+0x3e>
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	791b      	ldrb	r3, [r3, #4]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d803      	bhi.n	8000e46 <bucket_ok+0x3e>
        bucket->state = BUCKET_DLM_OK;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2201      	movs	r2, #1
 8000e42:	711a      	strb	r2, [r3, #4]
 8000e44:	e004      	b.n	8000e50 <bucket_ok+0x48>
    }
    else {
        // todo set error states
        handle_DAM_error(TBD_ERROR);
 8000e46:	2005      	movs	r0, #5
 8000e48:	f7ff fbb6 	bl	80005b8 <handle_DAM_error>
 8000e4c:	e000      	b.n	8000e50 <bucket_ok+0x48>
    if (sender != DLM_ID) return;
 8000e4e:	bf00      	nop
    }
}
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <bucket_requested>:
/* bucket_requested
 * Handler for the RequestBucket gopherCAN command
 * Creates rtos task to handle sending the bucket
 */
void bucket_requested (MODULE_ID sender, void* parameter,
                       U8 bucket_id, U8 UNUSED1, U8 UNUSED2, U8 UNUSED3) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	; 0x38
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	6039      	str	r1, [r7, #0]
 8000e60:	4611      	mov	r1, r2
 8000e62:	461a      	mov	r2, r3
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	71bb      	strb	r3, [r7, #6]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	717b      	strb	r3, [r7, #5]

    BUCKET* bucket = get_bucket_by_id(bucket_id);
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fd36 	bl	80008e4 <get_bucket_by_id>
 8000e78:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (bucket == NULL || bucket->state < BUCKET_GETTING_DATA) {
 8000e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <bucket_requested+0x30>
 8000e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e82:	791b      	ldrb	r3, [r3, #4]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d803      	bhi.n	8000e90 <bucket_requested+0x38>
        // todo set error states
        handle_DAM_error(TBD_ERROR);
 8000e88:	2005      	movs	r0, #5
 8000e8a:	f7ff fb95 	bl	80005b8 <handle_DAM_error>
        return;
 8000e8e:	e01f      	b.n	8000ed0 <bucket_requested+0x78>
    }

    if (bucket->state == BUCKET_GETTING_DATA) {
 8000e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d11b      	bne.n	8000ed0 <bucket_requested+0x78>
        char name_buf[30];
        sprintf(name_buf, "%s%d", BUCKET_TASK_NAME_BASE, bucket_id);
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	f107 000c 	add.w	r0, r7, #12
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <bucket_requested+0x80>)
 8000ea0:	490e      	ldr	r1, [pc, #56]	; (8000edc <bucket_requested+0x84>)
 8000ea2:	f008 ffe9 	bl	8009e78 <siprintf>
        if (xTaskCreate(send_bucket_task, name_buf, BUCKET_SEND_TASK_STACK_SIZE,
 8000ea6:	f107 010c 	add.w	r1, r7, #12
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	2318      	movs	r3, #24
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <bucket_requested+0x88>)
 8000eb8:	f007 f942 	bl	8008140 <xTaskCreate>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d003      	beq.n	8000eca <bucket_requested+0x72>
                        (void*) bucket, osPriorityNormal, NULL) != pdPASS) {
            // set error state
            handle_DAM_error(TBD_ERROR);
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f7ff fb78 	bl	80005b8 <handle_DAM_error>
 8000ec8:	e002      	b.n	8000ed0 <bucket_requested+0x78>
        }
        else {
            // Task created successfully
            bucket->state = BUCKET_REQUESTED;
 8000eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ecc:	2203      	movs	r2, #3
 8000ece:	711a      	strb	r2, [r3, #4]
        }
    }
}
 8000ed0:	3730      	adds	r7, #48	; 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	0800a688 	.word	0x0800a688
 8000edc:	0800a69c 	.word	0x0800a69c
 8000ee0:	08000c89 	.word	0x08000c89

08000ee4 <custom_service_can_rx_hardware>:

/* custom_service_can_rx_hardware
 * Definition for the ISR called on CAN message reception
*/
void custom_service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
   if (hcan == &GOPHERCAN_HANDLE) {
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <custom_service_can_rx_hardware+0x3c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d104      	bne.n	8000f00 <custom_service_can_rx_hardware+0x1c>
       service_can_rx_hardware(hcan, rx_mailbox);
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f002 fbe5 	bl	80036c8 <service_can_rx_hardware>
   {
       sensor_can_message_handle(hcan, rx_mailbox);
   }

   else handle_DAM_error(TBD_ERROR); // This case shouldnt happen
}
 8000efe:	e00b      	b.n	8000f18 <custom_service_can_rx_hardware+0x34>
   else if (hcan == &SENSORCAN_HANDLE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <custom_service_can_rx_hardware+0x40>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d104      	bne.n	8000f12 <custom_service_can_rx_hardware+0x2e>
       sensor_can_message_handle(hcan, rx_mailbox);
 8000f08:	6839      	ldr	r1, [r7, #0]
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f001 ff30 	bl	8002d70 <sensor_can_message_handle>
}
 8000f10:	e002      	b.n	8000f18 <custom_service_can_rx_hardware+0x34>
   else handle_DAM_error(TBD_ERROR); // This case shouldnt happen
 8000f12:	2005      	movs	r0, #5
 8000f14:	f7ff fb50 	bl	80005b8 <handle_DAM_error>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20004d3c 	.word	0x20004d3c
 8000f24:	20004b84 	.word	0x20004b84

08000f28 <gopherCAN_tx_service_task>:


//*************** GopherCAN tasks *****************
// Service the GopherCAN tx buffer
void gopherCAN_tx_service_task (void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    while(!hasInitialized) osDelay(1); // wait for initialization
 8000f2c:	e002      	b.n	8000f34 <gopherCAN_tx_service_task+0xc>
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f006 fac2 	bl	80074b8 <osDelay>
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <gopherCAN_tx_service_task+0x1c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f8      	beq.n	8000f2e <gopherCAN_tx_service_task+0x6>

    while (1) {
        service_can_tx_hardware(&GOPHERCAN_HANDLE);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <gopherCAN_tx_service_task+0x20>)
 8000f3e:	f002 fb71 	bl	8003624 <service_can_tx_hardware>
 8000f42:	e7fb      	b.n	8000f3c <gopherCAN_tx_service_task+0x14>
 8000f44:	2000012a 	.word	0x2000012a
 8000f48:	20004d3c 	.word	0x20004d3c

08000f4c <gopherCAN_rx_buffer_service_task>:
    }
}

// Service the GopherCAN rx buffer
void gopherCAN_rx_buffer_service_task (void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
    while(!hasInitialized) osDelay(1); // wait for initialization
 8000f50:	e002      	b.n	8000f58 <gopherCAN_rx_buffer_service_task+0xc>
 8000f52:	2001      	movs	r0, #1
 8000f54:	f006 fab0 	bl	80074b8 <osDelay>
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <gopherCAN_rx_buffer_service_task+0x28>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f8      	beq.n	8000f52 <gopherCAN_rx_buffer_service_task+0x6>

    while (1) {
        if (service_can_rx_buffer()) {
 8000f60:	f002 fc00 	bl	8003764 <service_can_rx_buffer>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0fa      	beq.n	8000f60 <gopherCAN_rx_buffer_service_task+0x14>
            handle_DAM_error(TBD_ERROR);
 8000f6a:	2005      	movs	r0, #5
 8000f6c:	f7ff fb24 	bl	80005b8 <handle_DAM_error>
        if (service_can_rx_buffer()) {
 8000f70:	e7f6      	b.n	8000f60 <gopherCAN_rx_buffer_service_task+0x14>
 8000f72:	bf00      	nop
 8000f74:	2000012a 	.word	0x2000012a

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f002 ffc6 	bl	8003f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f846 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f000 fa9c 	bl	80014c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f88:	f000 fa6a 	bl	8001460 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f8c:	f000 f8a0 	bl	80010d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f90:	f000 f8f0 	bl	8001174 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000f94:	f000 f940 	bl	8001218 <MX_ADC3_Init>
  MX_CAN1_Init();
 8000f98:	f000 f990 	bl	80012bc <MX_CAN1_Init>
  MX_CAN2_Init();
 8000f9c:	f000 f9c4 	bl	8001328 <MX_CAN2_Init>
  MX_TIM10_Init();
 8000fa0:	f000 f9f8 	bl	8001394 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000fa4:	f000 fa18 	bl	80013d8 <MX_TIM11_Init>
  MX_TIM13_Init();
 8000fa8:	f000 fa38 	bl	800141c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  // Library Init
  DAM_init();
 8000fac:	f7ff fb28 	bl	8000600 <DAM_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb0:	f006 f972 	bl	8007298 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <main+0x74>)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <main+0x78>)
 8000fba:	f006 f9d7 	bl	800736c <osThreadNew>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <main+0x7c>)
 8000fc2:	601a      	str	r2, [r3, #0]

  /* creation of gcanTxTask */
  gcanTxTaskHandle = osThreadNew(gopherCAN_tx_task, NULL, &gcanTxTask_attributes);
 8000fc4:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <main+0x80>)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <main+0x84>)
 8000fca:	f006 f9cf 	bl	800736c <osThreadNew>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <main+0x88>)
 8000fd2:	601a      	str	r2, [r3, #0]

  /* creation of gcan_rx_buf */
  gcan_rx_bufHandle = osThreadNew(gcan_rx_buffer_service_task, NULL, &gcan_rx_buf_attributes);
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <main+0x8c>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <main+0x90>)
 8000fda:	f006 f9c7 	bl	800736c <osThreadNew>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <main+0x94>)
 8000fe2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fe4:	f006 f98c 	bl	8007300 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x70>
 8000fea:	bf00      	nop
 8000fec:	0800a6e0 	.word	0x0800a6e0
 8000ff0:	08001565 	.word	0x08001565
 8000ff4:	20004b38 	.word	0x20004b38
 8000ff8:	0800a704 	.word	0x0800a704
 8000ffc:	08001577 	.word	0x08001577
 8001000:	20004cd8 	.word	0x20004cd8
 8001004:	0800a728 	.word	0x0800a728
 8001008:	08001589 	.word	0x08001589
 800100c:	20004c74 	.word	0x20004c74

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	; 0x50
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	2230      	movs	r2, #48	; 0x30
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f008 ff21 	bl	8009e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <SystemClock_Config+0xb8>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <SystemClock_Config+0xb8>)
 800103e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001042:	6413      	str	r3, [r2, #64]	; 0x40
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <SystemClock_Config+0xb8>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <SystemClock_Config+0xbc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800105c:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <SystemClock_Config+0xbc>)
 800105e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <SystemClock_Config+0xbc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	2310      	movs	r3, #16
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	4618      	mov	r0, r3
 8001086:	f005 fa47 	bl	8006518 <HAL_RCC_OscConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001090:	f000 fa9a 	bl	80015c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001094:	230f      	movs	r3, #15
 8001096:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f005 fca2 	bl	80069f8 <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010ba:	f000 fa85 	bl	80015c8 <Error_Handler>
  }
}
 80010be:	bf00      	nop
 80010c0:	3750      	adds	r7, #80	; 0x50
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40007000 	.word	0x40007000

080010d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_ADC1_Init+0x98>)
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <MX_ADC1_Init+0x9c>)
 80010e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_ADC1_Init+0x98>)
 80010ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_ADC1_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_ADC1_Init+0x98>)
 80010fe:	2201      	movs	r2, #1
 8001100:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_ADC1_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_ADC1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_ADC1_Init+0x98>)
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <MX_ADC1_Init+0xa0>)
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_ADC1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_ADC1_Init+0x98>)
 800111e:	2201      	movs	r2, #1
 8001120:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_ADC1_Init+0x98>)
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_ADC1_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_ADC1_Init+0x98>)
 8001132:	f002 ff55 	bl	8003fe0 <HAL_ADC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800113c:	f000 fa44 	bl	80015c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001144:	2301      	movs	r3, #1
 8001146:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_ADC1_Init+0x98>)
 8001152:	f003 fa23 	bl	800459c <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800115c:	f000 fa34 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20004b3c 	.word	0x20004b3c
 800116c:	40012000 	.word	0x40012000
 8001170:	0f000001 	.word	0x0f000001

08001174 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_ADC2_Init+0x98>)
 8001188:	4a21      	ldr	r2, [pc, #132]	; (8001210 <MX_ADC2_Init+0x9c>)
 800118a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_ADC2_Init+0x98>)
 800118e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001192:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_ADC2_Init+0x98>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MX_ADC2_Init+0x98>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_ADC2_Init+0x98>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_ADC2_Init+0x98>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_ADC2_Init+0x98>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_ADC2_Init+0x98>)
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <MX_ADC2_Init+0xa0>)
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_ADC2_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_ADC2_Init+0x98>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_ADC2_Init+0x98>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_ADC2_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <MX_ADC2_Init+0x98>)
 80011d6:	f002 ff03 	bl	8003fe0 <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80011e0:	f000 f9f2 	bl	80015c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_ADC2_Init+0x98>)
 80011f6:	f003 f9d1 	bl	800459c <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001200:	f000 f9e2 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20004a50 	.word	0x20004a50
 8001210:	40012100 	.word	0x40012100
 8001214:	0f000001 	.word	0x0f000001

08001218 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121e:	463b      	mov	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <MX_ADC3_Init+0x98>)
 800122c:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <MX_ADC3_Init+0x9c>)
 800122e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <MX_ADC3_Init+0x98>)
 8001232:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001236:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <MX_ADC3_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_ADC3_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_ADC3_Init+0x98>)
 8001246:	2201      	movs	r2, #1
 8001248:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <MX_ADC3_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_ADC3_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_ADC3_Init+0x98>)
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <MX_ADC3_Init+0xa0>)
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_ADC3_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_ADC3_Init+0x98>)
 8001266:	2201      	movs	r2, #1
 8001268:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_ADC3_Init+0x98>)
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_ADC3_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_ADC3_Init+0x98>)
 800127a:	f002 feb1 	bl	8003fe0 <HAL_ADC_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001284:	f000 f9a0 	bl	80015c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001288:	2304      	movs	r3, #4
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_ADC3_Init+0x98>)
 800129a:	f003 f97f 	bl	800459c <HAL_ADC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80012a4:	f000 f990 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20004bac 	.word	0x20004bac
 80012b4:	40012200 	.word	0x40012200
 80012b8:	0f000001 	.word	0x0f000001

080012bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_CAN1_Init+0x64>)
 80012c2:	4a18      	ldr	r2, [pc, #96]	; (8001324 <MX_CAN1_Init+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <MX_CAN1_Init+0x64>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_CAN1_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_CAN1_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_CAN1_Init+0x64>)
 80012da:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80012de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_CAN1_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_CAN1_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_CAN1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_CAN1_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_CAN1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_CAN1_Init+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_CAN1_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_CAN1_Init+0x64>)
 800130c:	f003 fc00 	bl	8004b10 <HAL_CAN_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001316:	f000 f957 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20004d3c 	.word	0x20004d3c
 8001324:	40006400 	.word	0x40006400

08001328 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_CAN2_Init+0x64>)
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <MX_CAN2_Init+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 1;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_CAN2_Init+0x64>)
 8001334:	2201      	movs	r2, #1
 8001336:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_CAN2_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_CAN2_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_CAN2_Init+0x64>)
 8001346:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800134a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_CAN2_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_CAN2_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_CAN2_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_CAN2_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_CAN2_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_CAN2_Init+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_CAN2_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_CAN2_Init+0x64>)
 8001378:	f003 fbca 	bl	8004b10 <HAL_CAN_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001382:	f000 f921 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20004b84 	.word	0x20004b84
 8001390:	40006800 	.word	0x40006800

08001394 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <MX_TIM10_Init+0x3c>)
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <MX_TIM10_Init+0x40>)
 800139c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_TIM10_Init+0x3c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_TIM10_Init+0x3c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_TIM10_Init+0x3c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_TIM10_Init+0x3c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_TIM10_Init+0x3c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_TIM10_Init+0x3c>)
 80013be:	f005 fd05 	bl	8006dcc <HAL_TIM_Base_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80013c8:	f000 f8fe 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20004a98 	.word	0x20004a98
 80013d4:	40014400 	.word	0x40014400

080013d8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <MX_TIM11_Init+0x3c>)
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <MX_TIM11_Init+0x40>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_TIM11_Init+0x3c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MX_TIM11_Init+0x3c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_TIM11_Init+0x3c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MX_TIM11_Init+0x3c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_TIM11_Init+0x3c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_TIM11_Init+0x3c>)
 8001402:	f005 fce3 	bl	8006dcc <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 800140c:	f000 f8dc 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20004c34 	.word	0x20004c34
 8001418:	40014800 	.word	0x40014800

0800141c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <MX_TIM13_Init+0x3c>)
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <MX_TIM13_Init+0x40>)
 8001424:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_TIM13_Init+0x3c>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <MX_TIM13_Init+0x3c>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_TIM13_Init+0x3c>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <MX_TIM13_Init+0x3c>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_TIM13_Init+0x3c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_TIM13_Init+0x3c>)
 8001446:	f005 fcc1 	bl	8006dcc <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8001450:	f000 f8ba 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20004bf4 	.word	0x20004bf4
 800145c:	40001c00 	.word	0x40001c00

08001460 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_DMA_Init+0x5c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <MX_DMA_Init+0x5c>)
 8001470:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_DMA_Init+0x5c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2105      	movs	r1, #5
 8001486:	2038      	movs	r0, #56	; 0x38
 8001488:	f004 fa94 	bl	80059b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800148c:	2038      	movs	r0, #56	; 0x38
 800148e:	f004 faad 	bl	80059ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2105      	movs	r1, #5
 8001496:	2039      	movs	r0, #57	; 0x39
 8001498:	f004 fa8c 	bl	80059b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800149c:	2039      	movs	r0, #57	; 0x39
 800149e:	f004 faa5 	bl	80059ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2105      	movs	r1, #5
 80014a6:	203a      	movs	r0, #58	; 0x3a
 80014a8:	f004 fa84 	bl	80059b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014ac:	203a      	movs	r0, #58	; 0x3a
 80014ae:	f004 fa9d 	bl	80059ec <HAL_NVIC_EnableIRQ>

}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <MX_GPIO_Init+0xa0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a24      	ldr	r2, [pc, #144]	; (8001560 <MX_GPIO_Init+0xa0>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <MX_GPIO_Init+0xa0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <MX_GPIO_Init+0xa0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <MX_GPIO_Init+0xa0>)
 80014ec:	f043 0320 	orr.w	r3, r3, #32
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MX_GPIO_Init+0xa0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0320 	and.w	r3, r3, #32
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_GPIO_Init+0xa0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a16      	ldr	r2, [pc, #88]	; (8001560 <MX_GPIO_Init+0xa0>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_GPIO_Init+0xa0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_GPIO_Init+0xa0>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <MX_GPIO_Init+0xa0>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_GPIO_Init+0xa0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_GPIO_Init+0xa0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <MX_GPIO_Init+0xa0>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_GPIO_Init+0xa0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

}
 8001552:	bf00      	nop
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800

08001564 <StartMainTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      DAM_main_task();
 800156c:	f7ff fc12 	bl	8000d94 <DAM_main_task>
      // Should never get here
      Error_Handler();
 8001570:	f000 f82a 	bl	80015c8 <Error_Handler>
      DAM_main_task();
 8001574:	e7fa      	b.n	800156c <StartMainTask+0x8>

08001576 <gopherCAN_tx_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gopherCAN_tx_task */
void gopherCAN_tx_task(void *argument)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gopherCAN_tx_task */
  /* Infinite loop */
  for(;;)
  {
    gopherCAN_tx_service_task();
 800157e:	f7ff fcd3 	bl	8000f28 <gopherCAN_tx_service_task>
    // Should never get here
    Error_Handler();
 8001582:	f000 f821 	bl	80015c8 <Error_Handler>
    gopherCAN_tx_service_task();
 8001586:	e7fa      	b.n	800157e <gopherCAN_tx_task+0x8>

08001588 <gcan_rx_buffer_service_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gcan_rx_buffer_service_task */
void gcan_rx_buffer_service_task(void *argument)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gcan_rx_buffer_service_task */
  /* Infinite loop */
  for(;;)
  {
      gopherCAN_rx_buffer_service_task();
 8001590:	f7ff fcdc 	bl	8000f4c <gopherCAN_rx_buffer_service_task>
     //should never get here
     Error_Handler();
 8001594:	f000 f818 	bl	80015c8 <Error_Handler>
      gopherCAN_rx_buffer_service_task();
 8001598:	e7fa      	b.n	8001590 <gcan_rx_buffer_service_task+0x8>
	...

0800159c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d102      	bne.n	80015b4 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80015ae:	f002 fccf 	bl	8003f50 <HAL_IncTick>
  else
  {
      DAQ_TimerCallback(htim);
  }
  /* USER CODE END Callback 1 */
}
 80015b2:	e002      	b.n	80015ba <HAL_TIM_PeriodElapsedCallback+0x1e>
      DAQ_TimerCallback(htim);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f001 fb93 	bl	8002ce0 <DAQ_TimerCallback>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40002000 	.word	0x40002000

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  // Something fucked up, handle it here
  handle_DAM_error(INITIALIZATION_ERROR);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7fe fff3 	bl	80005b8 <handle_DAM_error>

  /* USER CODE END Error_Handler_Debug */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_MspInit+0x54>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <HAL_MspInit+0x54>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_MspInit+0x54>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_MspInit+0x54>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_MspInit+0x54>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_MspInit+0x54>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	210f      	movs	r1, #15
 800161a:	f06f 0001 	mvn.w	r0, #1
 800161e:	f004 f9c9 	bl	80059b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	; 0x38
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a9a      	ldr	r2, [pc, #616]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d160      	bne.n	8001714 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	4b99      	ldr	r3, [pc, #612]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a98      	ldr	r2, [pc, #608]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b96      	ldr	r3, [pc, #600]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166a:	623b      	str	r3, [r7, #32]
 800166c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	4b92      	ldr	r3, [pc, #584]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a91      	ldr	r2, [pc, #580]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b8f      	ldr	r3, [pc, #572]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800168a:	2303      	movs	r3, #3
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168e:	2303      	movs	r3, #3
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169a:	4619      	mov	r1, r3
 800169c:	4888      	ldr	r0, [pc, #544]	; (80018c0 <HAL_ADC_MspInit+0x290>)
 800169e:	f004 fd91 	bl	80061c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016a2:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016a4:	4a88      	ldr	r2, [pc, #544]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 80016a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016a8:	4b86      	ldr	r3, [pc, #536]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ae:	4b85      	ldr	r3, [pc, #532]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b4:	4b83      	ldr	r3, [pc, #524]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016ba:	4b82      	ldr	r3, [pc, #520]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c2:	4b80      	ldr	r3, [pc, #512]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016ca:	4b7e      	ldr	r3, [pc, #504]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80016d2:	4b7c      	ldr	r3, [pc, #496]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80016d8:	4b7a      	ldr	r3, [pc, #488]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016de:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e0:	4b78      	ldr	r3, [pc, #480]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016e6:	4877      	ldr	r0, [pc, #476]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016e8:	f004 f98e 	bl	8005a08 <HAL_DMA_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80016f2:	f7ff ff69 	bl	80015c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a72      	ldr	r2, [pc, #456]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016fa:	639a      	str	r2, [r3, #56]	; 0x38
 80016fc:	4a71      	ldr	r2, [pc, #452]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2105      	movs	r1, #5
 8001706:	2012      	movs	r0, #18
 8001708:	f004 f954 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800170c:	2012      	movs	r0, #18
 800170e:	f004 f96d 	bl	80059ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001712:	e0cc      	b.n	80018ae <HAL_ADC_MspInit+0x27e>
  else if(hadc->Instance==ADC2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a6c      	ldr	r2, [pc, #432]	; (80018cc <HAL_ADC_MspInit+0x29c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d161      	bne.n	80017e2 <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
 8001722:	4b66      	ldr	r3, [pc, #408]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a65      	ldr	r2, [pc, #404]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 8001728:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b63      	ldr	r3, [pc, #396]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b5c      	ldr	r3, [pc, #368]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001756:	230c      	movs	r3, #12
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175a:	2303      	movs	r3, #3
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	4855      	ldr	r0, [pc, #340]	; (80018c0 <HAL_ADC_MspInit+0x290>)
 800176a:	f004 fd2b 	bl	80061c4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800176e:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 8001770:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 8001772:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001774:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 8001776:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800177a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177c:	4b54      	ldr	r3, [pc, #336]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 800178a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001790:	4b4f      	ldr	r3, [pc, #316]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 8001792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001796:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 800179a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80017a0:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80017a6:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 80017a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ac:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ae:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80017b4:	4846      	ldr	r0, [pc, #280]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 80017b6:	f004 f927 	bl	8005a08 <HAL_DMA_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_ADC_MspInit+0x194>
      Error_Handler();
 80017c0:	f7ff ff02 	bl	80015c8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a42      	ldr	r2, [pc, #264]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
 80017ca:	4a41      	ldr	r2, [pc, #260]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2105      	movs	r1, #5
 80017d4:	2012      	movs	r0, #18
 80017d6:	f004 f8ed 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017da:	2012      	movs	r0, #18
 80017dc:	f004 f906 	bl	80059ec <HAL_NVIC_EnableIRQ>
}
 80017e0:	e065      	b.n	80018ae <HAL_ADC_MspInit+0x27e>
  else if(hadc->Instance==ADC3)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a3c      	ldr	r2, [pc, #240]	; (80018d8 <HAL_ADC_MspInit+0x2a8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d160      	bne.n	80018ae <HAL_ADC_MspInit+0x27e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	4a31      	ldr	r2, [pc, #196]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 80017f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fa:	6453      	str	r3, [r2, #68]	; 0x44
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	4a2a      	ldr	r2, [pc, #168]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 8001812:	f043 0320 	orr.w	r3, r3, #32
 8001816:	6313      	str	r3, [r2, #48]	; 0x30
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001824:	23c0      	movs	r3, #192	; 0xc0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001828:	2303      	movs	r3, #3
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	4829      	ldr	r0, [pc, #164]	; (80018dc <HAL_ADC_MspInit+0x2ac>)
 8001838:	f004 fcc4 	bl	80061c4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 800183e:	4a29      	ldr	r2, [pc, #164]	; (80018e4 <HAL_ADC_MspInit+0x2b4>)
 8001840:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 8001844:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001848:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 8001858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 8001860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001864:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 8001868:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 8001870:	2200      	movs	r2, #0
 8001872:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 8001876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800187a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001882:	4817      	ldr	r0, [pc, #92]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 8001884:	f004 f8c0 	bl	8005a08 <HAL_DMA_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_ADC_MspInit+0x262>
      Error_Handler();
 800188e:	f7ff fe9b 	bl	80015c8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 8001896:	639a      	str	r2, [r3, #56]	; 0x38
 8001898:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <HAL_ADC_MspInit+0x2b0>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2105      	movs	r1, #5
 80018a2:	2012      	movs	r0, #18
 80018a4:	f004 f886 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018a8:	2012      	movs	r0, #18
 80018aa:	f004 f89f 	bl	80059ec <HAL_NVIC_EnableIRQ>
}
 80018ae:	bf00      	nop
 80018b0:	3738      	adds	r7, #56	; 0x38
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40012000 	.word	0x40012000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	20004c78 	.word	0x20004c78
 80018c8:	40026410 	.word	0x40026410
 80018cc:	40012100 	.word	0x40012100
 80018d0:	20004cdc 	.word	0x20004cdc
 80018d4:	40026440 	.word	0x40026440
 80018d8:	40012200 	.word	0x40012200
 80018dc:	40021400 	.word	0x40021400
 80018e0:	20004ad8 	.word	0x20004ad8
 80018e4:	40026428 	.word	0x40026428

080018e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a57      	ldr	r2, [pc, #348]	; (8001a64 <HAL_CAN_MspInit+0x17c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d14e      	bne.n	80019a8 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800190a:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <HAL_CAN_MspInit+0x180>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	4a55      	ldr	r2, [pc, #340]	; (8001a68 <HAL_CAN_MspInit+0x180>)
 8001912:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001914:	4b54      	ldr	r3, [pc, #336]	; (8001a68 <HAL_CAN_MspInit+0x180>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d10d      	bne.n	8001938 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	4a51      	ldr	r2, [pc, #324]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 8001926:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800192a:	6413      	str	r3, [r2, #64]	; 0x40
 800192c:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001934:	61bb      	str	r3, [r7, #24]
 8001936:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	4a4a      	ldr	r2, [pc, #296]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6313      	str	r3, [r2, #48]	; 0x30
 8001948:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001954:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195e:	2301      	movs	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001966:	2309      	movs	r3, #9
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	483f      	ldr	r0, [pc, #252]	; (8001a70 <HAL_CAN_MspInit+0x188>)
 8001972:	f004 fc27 	bl	80061c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2105      	movs	r1, #5
 800197a:	2013      	movs	r0, #19
 800197c:	f004 f81a 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001980:	2013      	movs	r0, #19
 8001982:	f004 f833 	bl	80059ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2105      	movs	r1, #5
 800198a:	2014      	movs	r0, #20
 800198c:	f004 f812 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001990:	2014      	movs	r0, #20
 8001992:	f004 f82b 	bl	80059ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2105      	movs	r1, #5
 800199a:	2015      	movs	r0, #21
 800199c:	f004 f80a 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80019a0:	2015      	movs	r0, #21
 80019a2:	f004 f823 	bl	80059ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80019a6:	e058      	b.n	8001a5a <HAL_CAN_MspInit+0x172>
  else if(hcan->Instance==CAN2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a31      	ldr	r2, [pc, #196]	; (8001a74 <HAL_CAN_MspInit+0x18c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d153      	bne.n	8001a5a <HAL_CAN_MspInit+0x172>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a2c      	ldr	r2, [pc, #176]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 80019bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <HAL_CAN_MspInit+0x180>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	4a24      	ldr	r2, [pc, #144]	; (8001a68 <HAL_CAN_MspInit+0x180>)
 80019d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_CAN_MspInit+0x180>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d10d      	bne.n	80019fc <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 80019ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ee:	6413      	str	r3, [r2, #64]	; 0x40
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_CAN_MspInit+0x184>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a18:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001a2a:	2309      	movs	r3, #9
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4810      	ldr	r0, [pc, #64]	; (8001a78 <HAL_CAN_MspInit+0x190>)
 8001a36:	f004 fbc5 	bl	80061c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	2040      	movs	r0, #64	; 0x40
 8001a40:	f003 ffb8 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001a44:	2040      	movs	r0, #64	; 0x40
 8001a46:	f003 ffd1 	bl	80059ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2105      	movs	r1, #5
 8001a4e:	2041      	movs	r0, #65	; 0x41
 8001a50:	f003 ffb0 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001a54:	2041      	movs	r0, #65	; 0x41
 8001a56:	f003 ffc9 	bl	80059ec <HAL_NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3730      	adds	r7, #48	; 0x30
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40006400 	.word	0x40006400
 8001a68:	2000012c 	.word	0x2000012c
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000
 8001a74:	40006800 	.word	0x40006800
 8001a78:	40020400 	.word	0x40020400

08001a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <HAL_TIM_Base_MspInit+0xb8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d116      	bne.n	8001abc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a28      	ldr	r2, [pc, #160]	; (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697b      	ldr	r3, [r7, #20]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2105      	movs	r1, #5
 8001aae:	2019      	movs	r0, #25
 8001ab0:	f003 ff80 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ab4:	2019      	movs	r0, #25
 8001ab6:	f003 ff99 	bl	80059ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001aba:	e036      	b.n	8001b2a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <HAL_TIM_Base_MspInit+0xc0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d116      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a1a      	ldr	r2, [pc, #104]	; (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	201a      	movs	r0, #26
 8001ae8:	f003 ff64 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001aec:	201a      	movs	r0, #26
 8001aee:	f003 ff7d 	bl	80059ec <HAL_NVIC_EnableIRQ>
}
 8001af2:	e01a      	b.n	8001b2a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM13)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <HAL_TIM_Base_MspInit+0xc4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d115      	bne.n	8001b2a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a0c      	ldr	r2, [pc, #48]	; (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	202c      	movs	r0, #44	; 0x2c
 8001b20:	f003 ff48 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001b24:	202c      	movs	r0, #44	; 0x2c
 8001b26:	f003 ff61 	bl	80059ec <HAL_NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40014400 	.word	0x40014400
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40014800 	.word	0x40014800
 8001b40:	40001c00 	.word	0x40001c00

08001b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	202d      	movs	r0, #45	; 0x2d
 8001b5a:	f003 ff2b 	bl	80059b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8001b5e:	202d      	movs	r0, #45	; 0x2d
 8001b60:	f003 ff44 	bl	80059ec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_InitTick+0xa0>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_InitTick+0xa0>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	6413      	str	r3, [r2, #64]	; 0x40
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_InitTick+0xa0>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b80:	f107 0210 	add.w	r2, r7, #16
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f005 f8ec 	bl	8006d68 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b90:	f005 f8d6 	bl	8006d40 <HAL_RCC_GetPCLK1Freq>
 8001b94:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <HAL_InitTick+0xa4>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	0c9b      	lsrs	r3, r3, #18
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_InitTick+0xa8>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <HAL_InitTick+0xac>)
 8001ba8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_InitTick+0xa8>)
 8001bac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bb0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_InitTick+0xa8>)
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_InitTick+0xa8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_InitTick+0xa8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001bc4:	4809      	ldr	r0, [pc, #36]	; (8001bec <HAL_InitTick+0xa8>)
 8001bc6:	f005 f901 	bl	8006dcc <HAL_TIM_Base_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d104      	bne.n	8001bda <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001bd0:	4806      	ldr	r0, [pc, #24]	; (8001bec <HAL_InitTick+0xa8>)
 8001bd2:	f005 f926 	bl	8006e22 <HAL_TIM_Base_Start_IT>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	e000      	b.n	8001bdc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3730      	adds	r7, #48	; 0x30
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	431bde83 	.word	0x431bde83
 8001bec:	20004d64 	.word	0x20004d64
 8001bf0:	40002000 	.word	0x40002000

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <MemManage_Handler+0x4>

08001c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <ADC_IRQHandler+0x1c>)
 8001c2e:	f002 fa1a 	bl	8004066 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <ADC_IRQHandler+0x20>)
 8001c34:	f002 fa17 	bl	8004066 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8001c38:	4804      	ldr	r0, [pc, #16]	; (8001c4c <ADC_IRQHandler+0x24>)
 8001c3a:	f002 fa14 	bl	8004066 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20004b3c 	.word	0x20004b3c
 8001c48:	20004a50 	.word	0x20004a50
 8001c4c:	20004bac 	.word	0x20004bac

08001c50 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <CAN1_TX_IRQHandler+0x10>)
 8001c56:	f003 fc12 	bl	800547e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20004d3c 	.word	0x20004d3c

08001c64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <CAN1_RX0_IRQHandler+0x10>)
 8001c6a:	f003 fc08 	bl	800547e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20004d3c 	.word	0x20004d3c

08001c78 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <CAN1_RX1_IRQHandler+0x10>)
 8001c7e:	f003 fbfe 	bl	800547e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20004d3c 	.word	0x20004d3c

08001c8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c92:	f005 f915 	bl	8006ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20004a98 	.word	0x20004a98

08001ca0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001ca6:	f005 f90b 	bl	8006ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20004c34 	.word	0x20004c34

08001cb4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001cba:	f005 f901 	bl	8006ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20004bf4 	.word	0x20004bf4

08001cc8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001cce:	f005 f8f7 	bl	8006ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20004d64 	.word	0x20004d64

08001cdc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <DMA2_Stream0_IRQHandler+0x10>)
 8001ce2:	f004 f807 	bl	8005cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20004c78 	.word	0x20004c78

08001cf0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <DMA2_Stream1_IRQHandler+0x10>)
 8001cf6:	f003 fffd 	bl	8005cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20004ad8 	.word	0x20004ad8

08001d04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <DMA2_Stream2_IRQHandler+0x10>)
 8001d0a:	f003 fff3 	bl	8005cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20004cdc 	.word	0x20004cdc

08001d18 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <CAN2_RX0_IRQHandler+0x10>)
 8001d1e:	f003 fbae 	bl	800547e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20004b84 	.word	0x20004b84

08001d2c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <CAN2_RX1_IRQHandler+0x10>)
 8001d32:	f003 fba4 	bl	800547e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20004b84 	.word	0x20004b84

08001d40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_sbrk+0x50>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <_sbrk+0x16>
		heap_end = &end;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <_sbrk+0x50>)
 8001d52:	4a10      	ldr	r2, [pc, #64]	; (8001d94 <_sbrk+0x54>)
 8001d54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <_sbrk+0x50>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <_sbrk+0x50>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	466a      	mov	r2, sp
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d907      	bls.n	8001d7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d6a:	f008 f847 	bl	8009dfc <__errno>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	230c      	movs	r3, #12
 8001d72:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	e006      	b.n	8001d88 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <_sbrk+0x50>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <_sbrk+0x50>)
 8001d84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000130 	.word	0x20000130
 8001d94:	200072f8 	.word	0x200072f8

08001d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <SystemInit+0x28>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <SystemInit+0x28>)
 8001da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SystemInit+0x28>)
 8001dae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001db2:	609a      	str	r2, [r3, #8]
#endif
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dfc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dca:	e003      	b.n	8001dd4 <LoopCopyDataInit>

08001dcc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dd2:	3104      	adds	r1, #4

08001dd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001dd4:	480b      	ldr	r0, [pc, #44]	; (8001e04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001dd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ddc:	d3f6      	bcc.n	8001dcc <CopyDataInit>
  ldr  r2, =_sbss
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001de0:	e002      	b.n	8001de8 <LoopFillZerobss>

08001de2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001de2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001de4:	f842 3b04 	str.w	r3, [r2], #4

08001de8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dec:	d3f9      	bcc.n	8001de2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dee:	f7ff ffd3 	bl	8001d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001df2:	f008 f809 	bl	8009e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df6:	f7ff f8bf 	bl	8000f78 <main>
  bx  lr    
 8001dfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dfc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001e00:	0800a7b0 	.word	0x0800a7b0
  ldr  r0, =_sdata
 8001e04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e08:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 8001e0c:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8001e10:	200072f8 	.word	0x200072f8

08001e14 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <CAN1_SCE_IRQHandler>
	...

08001e18 <init_adc1_params>:




//ADC1
void init_adc1_params (void) {
 8001e18:	b5b0      	push	{r4, r5, r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
    
    
    // adc1_param1
    adc1_param1_genparam.param.float_struct = oil_cooler_pressure_in;
 8001e1c:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <init_adc1_params+0x114>)
 8001e1e:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <init_adc1_params+0x118>)
 8001e20:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    adc1_param1.analog_sensor = honeywell_heavy_duty_pressure_transducer;
 8001e26:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <init_adc1_params+0x11c>)
 8001e28:	4a43      	ldr	r2, [pc, #268]	; (8001f38 <init_adc1_params+0x120>)
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	2294      	movs	r2, #148	; 0x94
 8001e30:	4618      	mov	r0, r3
 8001e32:	f008 f80d 	bl	8009e50 <memcpy>
    
    adc1_param1.num_filtered_subparams = 1;
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <init_adc1_params+0x11c>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    
    adc1_param1_filtered_1.filtered_param.param.float_struct = oil_cooler_pressure_in_lowpass_1000;
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <init_adc1_params+0x124>)
 8001e40:	4a3f      	ldr	r2, [pc, #252]	; (8001f40 <init_adc1_params+0x128>)
 8001e42:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    adc1_param1_filtered_1.filter_type = LOW_PASS;
 8001e48:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <init_adc1_params+0x124>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	761a      	strb	r2, [r3, #24]
    adc1_param1_filtered_1.filter_value = 1000;
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <init_adc1_params+0x124>)
 8001e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e54:	835a      	strh	r2, [r3, #26]
    
    
    adc1_param1_fparam_list[0] = adc1_param1_filtered_1;
 8001e56:	4a3b      	ldr	r2, [pc, #236]	; (8001f44 <init_adc1_params+0x12c>)
 8001e58:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <init_adc1_params+0x124>)
 8001e5a:	4614      	mov	r4, r2
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    adc1_param1.filtered_subparams = adc1_param1_fparam_list;
 8001e6a:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <init_adc1_params+0x11c>)
 8001e6c:	4a35      	ldr	r2, [pc, #212]	; (8001f44 <init_adc1_params+0x12c>)
 8001e6e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

    

    adc1_param1_u16buffer.buffer = adc1_param1_buffer;
 8001e72:	4b35      	ldr	r3, [pc, #212]	; (8001f48 <init_adc1_params+0x130>)
 8001e74:	4a35      	ldr	r2, [pc, #212]	; (8001f4c <init_adc1_params+0x134>)
 8001e76:	601a      	str	r2, [r3, #0]
    adc1_param1_u16buffer.buffer_size = 100;
 8001e78:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <init_adc1_params+0x130>)
 8001e7a:	2264      	movs	r2, #100	; 0x64
 8001e7c:	809a      	strh	r2, [r3, #4]
    adc1_param1_u16buffer.fill_level = 0;
 8001e7e:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <init_adc1_params+0x130>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	80da      	strh	r2, [r3, #6]
    adc1_param1.buffer = adc1_param1_u16buffer;
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <init_adc1_params+0x11c>)
 8001e86:	4a30      	ldr	r2, [pc, #192]	; (8001f48 <init_adc1_params+0x130>)
 8001e88:	33b4      	adds	r3, #180	; 0xb4
 8001e8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e8e:	e883 0003 	stmia.w	r3, {r0, r1}
    
    
    // adc1_param2
    adc1_param2_genparam.param.float_struct = oil_cooler_pressure_out;
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <init_adc1_params+0x138>)
 8001e94:	4a2f      	ldr	r2, [pc, #188]	; (8001f54 <init_adc1_params+0x13c>)
 8001e96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    adc1_param2.analog_sensor = honeywell_heavy_duty_pressure_transducer;
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <init_adc1_params+0x140>)
 8001e9e:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <init_adc1_params+0x120>)
 8001ea0:	3318      	adds	r3, #24
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	2294      	movs	r2, #148	; 0x94
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f007 ffd2 	bl	8009e50 <memcpy>
    
    adc1_param2.num_filtered_subparams = 1;
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <init_adc1_params+0x140>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    
    adc1_param2_filtered_1.filtered_param.param.float_struct = oil_cooler_pressure_out_lowpass_1000;
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <init_adc1_params+0x144>)
 8001eb6:	4a2a      	ldr	r2, [pc, #168]	; (8001f60 <init_adc1_params+0x148>)
 8001eb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    adc1_param2_filtered_1.filter_type = LOW_PASS;
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <init_adc1_params+0x144>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	761a      	strb	r2, [r3, #24]
    adc1_param2_filtered_1.filter_value = 1000;
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <init_adc1_params+0x144>)
 8001ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eca:	835a      	strh	r2, [r3, #26]
    
    
    adc1_param2_fparam_list[0] = adc1_param2_filtered_1;
 8001ecc:	4a25      	ldr	r2, [pc, #148]	; (8001f64 <init_adc1_params+0x14c>)
 8001ece:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <init_adc1_params+0x144>)
 8001ed0:	4614      	mov	r4, r2
 8001ed2:	461d      	mov	r5, r3
 8001ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ed8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    adc1_param2.filtered_subparams = adc1_param2_fparam_list;
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <init_adc1_params+0x140>)
 8001ee2:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <init_adc1_params+0x14c>)
 8001ee4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

    

    adc1_param2_u16buffer.buffer = adc1_param2_buffer;
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <init_adc1_params+0x150>)
 8001eea:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <init_adc1_params+0x154>)
 8001eec:	601a      	str	r2, [r3, #0]
    adc1_param2_u16buffer.buffer_size = 100;
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <init_adc1_params+0x150>)
 8001ef0:	2264      	movs	r2, #100	; 0x64
 8001ef2:	809a      	strh	r2, [r3, #4]
    adc1_param2_u16buffer.fill_level = 0;
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <init_adc1_params+0x150>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	80da      	strh	r2, [r3, #6]
    adc1_param2.buffer = adc1_param2_u16buffer;
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <init_adc1_params+0x140>)
 8001efc:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <init_adc1_params+0x150>)
 8001efe:	33b4      	adds	r3, #180	; 0xb4
 8001f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f04:	e883 0003 	stmia.w	r3, {r0, r1}
    
    
    
    adc1_sensor_params[0] = adc1_param1;
 8001f08:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <init_adc1_params+0x158>)
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <init_adc1_params+0x11c>)
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	23c0      	movs	r3, #192	; 0xc0
 8001f12:	461a      	mov	r2, r3
 8001f14:	f007 ff9c 	bl	8009e50 <memcpy>
    
    adc1_sensor_params[1] = adc1_param2;
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <init_adc1_params+0x158>)
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <init_adc1_params+0x140>)
 8001f1c:	33c0      	adds	r3, #192	; 0xc0
 8001f1e:	4611      	mov	r1, r2
 8001f20:	22c0      	movs	r2, #192	; 0xc0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f007 ff94 	bl	8009e50 <memcpy>
    

}
 8001f28:	bf00      	nop
 8001f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2c:	20004ea8 	.word	0x20004ea8
 8001f30:	20007220 	.word	0x20007220
 8001f34:	20005aa0 	.word	0x20005aa0
 8001f38:	200062f4 	.word	0x200062f4
 8001f3c:	20005320 	.word	0x20005320
 8001f40:	20007284 	.word	0x20007284
 8001f44:	20005348 	.word	0x20005348
 8001f48:	20005458 	.word	0x20005458
 8001f4c:	20005460 	.word	0x20005460
 8001f50:	200050c0 	.word	0x200050c0
 8001f54:	200071d8 	.word	0x200071d8
 8001f58:	200050d8 	.word	0x200050d8
 8001f5c:	20005668 	.word	0x20005668
 8001f60:	20007278 	.word	0x20007278
 8001f64:	20005bd8 	.word	0x20005bd8
 8001f68:	20005598 	.word	0x20005598
 8001f6c:	20005c38 	.word	0x20005c38
 8001f70:	20004f40 	.word	0x20004f40

08001f74 <init_adc2_params>:




//ADC2
void init_adc2_params (void) {
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
    
    
    

}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <init_adc3_params>:




//ADC3
void init_adc3_params (void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
    
    
    // adc3_param1
    adc3_param1_genparam.param.float_struct = rad_water_temp_in;
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <init_adc3_params+0x64>)
 8001f8a:	4a18      	ldr	r2, [pc, #96]	; (8001fec <init_adc3_params+0x68>)
 8001f8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    adc3_param1.analog_sensor = bosch_temperature_sensor;
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <init_adc3_params+0x6c>)
 8001f94:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <init_adc3_params+0x70>)
 8001f96:	3318      	adds	r3, #24
 8001f98:	4611      	mov	r1, r2
 8001f9a:	2294      	movs	r2, #148	; 0x94
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f007 ff57 	bl	8009e50 <memcpy>
    
    adc3_param1.num_filtered_subparams = 0;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <init_adc3_params+0x6c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    
    adc3_param1.filtered_subparams = NULL;
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <init_adc3_params+0x6c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    

    adc3_param1_u16buffer.buffer = adc3_param1_buffer;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <init_adc3_params+0x74>)
 8001fb4:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <init_adc3_params+0x78>)
 8001fb6:	601a      	str	r2, [r3, #0]
    adc3_param1_u16buffer.buffer_size = 100;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <init_adc3_params+0x74>)
 8001fba:	2264      	movs	r2, #100	; 0x64
 8001fbc:	809a      	strh	r2, [r3, #4]
    adc3_param1_u16buffer.fill_level = 0;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <init_adc3_params+0x74>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	80da      	strh	r2, [r3, #6]
    adc3_param1.buffer = adc3_param1_u16buffer;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <init_adc3_params+0x6c>)
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <init_adc3_params+0x74>)
 8001fc8:	33b4      	adds	r3, #180	; 0xb4
 8001fca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fce:	e883 0003 	stmia.w	r3, {r0, r1}
    
    
    
    adc3_sensor_params[0] = adc3_param1;
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <init_adc3_params+0x7c>)
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <init_adc3_params+0x6c>)
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	23c0      	movs	r3, #192	; 0xc0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f007 ff37 	bl	8009e50 <memcpy>
    

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20004f28 	.word	0x20004f28
 8001fec:	200072a4 	.word	0x200072a4
 8001ff0:	20005198 	.word	0x20005198
 8001ff4:	20005fc4 	.word	0x20005fc4
 8001ff8:	200058f8 	.word	0x200058f8
 8001ffc:	20005830 	.word	0x20005830
 8002000:	20004dd8 	.word	0x20004dd8

08002004 <init_can_params>:


CAN_SENSOR_PARAM can_sensor_params[NUM_CAN_SENSOR_PARAMS];


void init_can_params (void) {
 8002004:	b5b0      	push	{r4, r5, r7, lr}
 8002006:	af00      	add	r7, sp, #0


// can_param1
can_param1.can_param.param.float_struct = lateral_acceleration;
 8002008:	4b6f      	ldr	r3, [pc, #444]	; (80021c8 <init_can_params+0x1c4>)
 800200a:	4a70      	ldr	r2, [pc, #448]	; (80021cc <init_can_params+0x1c8>)
 800200c:	ca07      	ldmia	r2, {r0, r1, r2}
 800200e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

can_param1.can_sensor = bosch_accelerometer;
 8002012:	4b6d      	ldr	r3, [pc, #436]	; (80021c8 <init_can_params+0x1c4>)
 8002014:	4a6e      	ldr	r2, [pc, #440]	; (80021d0 <init_can_params+0x1cc>)
 8002016:	f103 0418 	add.w	r4, r3, #24
 800201a:	4615      	mov	r5, r2
 800201c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002028:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800202c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
can_param1.message_idx = 3;
 8002030:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <init_can_params+0x1c4>)
 8002032:	2203      	movs	r2, #3
 8002034:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

can_param1.num_filtered_params = 0;
 8002038:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <init_can_params+0x1c4>)
 800203a:	2200      	movs	r2, #0
 800203c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


can_param1.filtered_subparams = NULL;
 8002040:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <init_can_params+0x1c4>)
 8002042:	2200      	movs	r2, #0
 8002044:	659a      	str	r2, [r3, #88]	; 0x58


can_param1_u16buffer.buffer = can_param1_buffer;
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <init_can_params+0x1d0>)
 8002048:	4a63      	ldr	r2, [pc, #396]	; (80021d8 <init_can_params+0x1d4>)
 800204a:	601a      	str	r2, [r3, #0]
can_param1_u16buffer.buffer_size = 100;
 800204c:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <init_can_params+0x1d0>)
 800204e:	2264      	movs	r2, #100	; 0x64
 8002050:	809a      	strh	r2, [r3, #4]
can_param1_u16buffer.fill_level = 0;
 8002052:	4b60      	ldr	r3, [pc, #384]	; (80021d4 <init_can_params+0x1d0>)
 8002054:	2200      	movs	r2, #0
 8002056:	80da      	strh	r2, [r3, #6]

can_param1.buffer = can_param1_u16buffer;
 8002058:	4b5b      	ldr	r3, [pc, #364]	; (80021c8 <init_can_params+0x1c4>)
 800205a:	4a5e      	ldr	r2, [pc, #376]	; (80021d4 <init_can_params+0x1d0>)
 800205c:	3360      	adds	r3, #96	; 0x60
 800205e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002062:	e883 0003 	stmia.w	r3, {r0, r1}



// can_param2
can_param2.can_param.param.float_struct = longitudinal_acceleration;
 8002066:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <init_can_params+0x1d8>)
 8002068:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <init_can_params+0x1dc>)
 800206a:	ca07      	ldmia	r2, {r0, r1, r2}
 800206c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

can_param2.can_sensor = bosch_accelerometer;
 8002070:	4b5a      	ldr	r3, [pc, #360]	; (80021dc <init_can_params+0x1d8>)
 8002072:	4a57      	ldr	r2, [pc, #348]	; (80021d0 <init_can_params+0x1cc>)
 8002074:	f103 0418 	add.w	r4, r3, #24
 8002078:	4615      	mov	r5, r2
 800207a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800207c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800207e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002086:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800208a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
can_param2.message_idx = 1;
 800208e:	4b53      	ldr	r3, [pc, #332]	; (80021dc <init_can_params+0x1d8>)
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

can_param2.num_filtered_params = 0;
 8002096:	4b51      	ldr	r3, [pc, #324]	; (80021dc <init_can_params+0x1d8>)
 8002098:	2200      	movs	r2, #0
 800209a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


can_param2.filtered_subparams = NULL;
 800209e:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <init_can_params+0x1d8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	659a      	str	r2, [r3, #88]	; 0x58


can_param2_u16buffer.buffer = can_param2_buffer;
 80020a4:	4b4f      	ldr	r3, [pc, #316]	; (80021e4 <init_can_params+0x1e0>)
 80020a6:	4a50      	ldr	r2, [pc, #320]	; (80021e8 <init_can_params+0x1e4>)
 80020a8:	601a      	str	r2, [r3, #0]
can_param2_u16buffer.buffer_size = 100;
 80020aa:	4b4e      	ldr	r3, [pc, #312]	; (80021e4 <init_can_params+0x1e0>)
 80020ac:	2264      	movs	r2, #100	; 0x64
 80020ae:	809a      	strh	r2, [r3, #4]
can_param2_u16buffer.fill_level = 0;
 80020b0:	4b4c      	ldr	r3, [pc, #304]	; (80021e4 <init_can_params+0x1e0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	80da      	strh	r2, [r3, #6]

can_param2.buffer = can_param2_u16buffer;
 80020b6:	4b49      	ldr	r3, [pc, #292]	; (80021dc <init_can_params+0x1d8>)
 80020b8:	4a4a      	ldr	r2, [pc, #296]	; (80021e4 <init_can_params+0x1e0>)
 80020ba:	3360      	adds	r3, #96	; 0x60
 80020bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020c0:	e883 0003 	stmia.w	r3, {r0, r1}



// can_param3
can_param3.can_param.param.float_struct = yaw_rate;
 80020c4:	4b49      	ldr	r3, [pc, #292]	; (80021ec <init_can_params+0x1e8>)
 80020c6:	4a4a      	ldr	r2, [pc, #296]	; (80021f0 <init_can_params+0x1ec>)
 80020c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

can_param3.can_sensor = bosch_accelerometer;
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <init_can_params+0x1e8>)
 80020d0:	4a3f      	ldr	r2, [pc, #252]	; (80021d0 <init_can_params+0x1cc>)
 80020d2:	f103 0418 	add.w	r4, r3, #24
 80020d6:	4615      	mov	r5, r2
 80020d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
can_param3.message_idx = 0;
 80020ec:	4b3f      	ldr	r3, [pc, #252]	; (80021ec <init_can_params+0x1e8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

can_param3.num_filtered_params = 0;
 80020f4:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <init_can_params+0x1e8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


can_param3.filtered_subparams = NULL;
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <init_can_params+0x1e8>)
 80020fe:	2200      	movs	r2, #0
 8002100:	659a      	str	r2, [r3, #88]	; 0x58


can_param3_u16buffer.buffer = can_param3_buffer;
 8002102:	4b3c      	ldr	r3, [pc, #240]	; (80021f4 <init_can_params+0x1f0>)
 8002104:	4a3c      	ldr	r2, [pc, #240]	; (80021f8 <init_can_params+0x1f4>)
 8002106:	601a      	str	r2, [r3, #0]
can_param3_u16buffer.buffer_size = 100;
 8002108:	4b3a      	ldr	r3, [pc, #232]	; (80021f4 <init_can_params+0x1f0>)
 800210a:	2264      	movs	r2, #100	; 0x64
 800210c:	809a      	strh	r2, [r3, #4]
can_param3_u16buffer.fill_level = 0;
 800210e:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <init_can_params+0x1f0>)
 8002110:	2200      	movs	r2, #0
 8002112:	80da      	strh	r2, [r3, #6]

can_param3.buffer = can_param3_u16buffer;
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <init_can_params+0x1e8>)
 8002116:	4a37      	ldr	r2, [pc, #220]	; (80021f4 <init_can_params+0x1f0>)
 8002118:	3360      	adds	r3, #96	; 0x60
 800211a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800211e:	e883 0003 	stmia.w	r3, {r0, r1}



// can_param4
can_param4.can_param.param.float_struct = back_left_tire_temp_channel_1;
 8002122:	4b36      	ldr	r3, [pc, #216]	; (80021fc <init_can_params+0x1f8>)
 8002124:	4a36      	ldr	r2, [pc, #216]	; (8002200 <init_can_params+0x1fc>)
 8002126:	ca07      	ldmia	r2, {r0, r1, r2}
 8002128:	e883 0007 	stmia.w	r3, {r0, r1, r2}

can_param4.can_sensor = izze_infared_tire_temperature_sensor;
 800212c:	4b33      	ldr	r3, [pc, #204]	; (80021fc <init_can_params+0x1f8>)
 800212e:	4a35      	ldr	r2, [pc, #212]	; (8002204 <init_can_params+0x200>)
 8002130:	f103 0418 	add.w	r4, r3, #24
 8002134:	4615      	mov	r5, r2
 8002136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
can_param4.message_idx = 0;
 800214a:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <init_can_params+0x1f8>)
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

can_param4.num_filtered_params = 0;
 8002152:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <init_can_params+0x1f8>)
 8002154:	2200      	movs	r2, #0
 8002156:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


can_param4.filtered_subparams = NULL;
 800215a:	4b28      	ldr	r3, [pc, #160]	; (80021fc <init_can_params+0x1f8>)
 800215c:	2200      	movs	r2, #0
 800215e:	659a      	str	r2, [r3, #88]	; 0x58


can_param4_u16buffer.buffer = can_param4_buffer;
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <init_can_params+0x204>)
 8002162:	4a2a      	ldr	r2, [pc, #168]	; (800220c <init_can_params+0x208>)
 8002164:	601a      	str	r2, [r3, #0]
can_param4_u16buffer.buffer_size = 100;
 8002166:	4b28      	ldr	r3, [pc, #160]	; (8002208 <init_can_params+0x204>)
 8002168:	2264      	movs	r2, #100	; 0x64
 800216a:	809a      	strh	r2, [r3, #4]
can_param4_u16buffer.fill_level = 0;
 800216c:	4b26      	ldr	r3, [pc, #152]	; (8002208 <init_can_params+0x204>)
 800216e:	2200      	movs	r2, #0
 8002170:	80da      	strh	r2, [r3, #6]

can_param4.buffer = can_param4_u16buffer;
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <init_can_params+0x1f8>)
 8002174:	4a24      	ldr	r2, [pc, #144]	; (8002208 <init_can_params+0x204>)
 8002176:	3360      	adds	r3, #96	; 0x60
 8002178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800217c:	e883 0003 	stmia.w	r3, {r0, r1}





can_sensor_params[0] = can_param1;
 8002180:	4a23      	ldr	r2, [pc, #140]	; (8002210 <init_can_params+0x20c>)
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <init_can_params+0x1c4>)
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	2368      	movs	r3, #104	; 0x68
 800218a:	461a      	mov	r2, r3
 800218c:	f007 fe60 	bl	8009e50 <memcpy>

can_sensor_params[1] = can_param2;
 8002190:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <init_can_params+0x20c>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <init_can_params+0x1d8>)
 8002194:	3368      	adds	r3, #104	; 0x68
 8002196:	4611      	mov	r1, r2
 8002198:	2268      	movs	r2, #104	; 0x68
 800219a:	4618      	mov	r0, r3
 800219c:	f007 fe58 	bl	8009e50 <memcpy>

can_sensor_params[2] = can_param3;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <init_can_params+0x20c>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <init_can_params+0x1e8>)
 80021a4:	33d0      	adds	r3, #208	; 0xd0
 80021a6:	4611      	mov	r1, r2
 80021a8:	2268      	movs	r2, #104	; 0x68
 80021aa:	4618      	mov	r0, r3
 80021ac:	f007 fe50 	bl	8009e50 <memcpy>

can_sensor_params[3] = can_param4;
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <init_can_params+0x20c>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <init_can_params+0x1f8>)
 80021b4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80021b8:	4611      	mov	r1, r2
 80021ba:	2268      	movs	r2, #104	; 0x68
 80021bc:	4618      	mov	r0, r3
 80021be:	f007 fe47 	bl	8009e50 <memcpy>



}
 80021c2:	bf00      	nop
 80021c4:	bdb0      	pop	{r4, r5, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20005528 	.word	0x20005528
 80021cc:	20007290 	.word	0x20007290
 80021d0:	20005f88 	.word	0x20005f88
 80021d4:	20004ea0 	.word	0x20004ea0
 80021d8:	200056a0 	.word	0x200056a0
 80021dc:	20004ec0 	.word	0x20004ec0
 80021e0:	200071c0 	.word	0x200071c0
 80021e4:	20005c28 	.word	0x20005c28
 80021e8:	20005380 	.word	0x20005380
 80021ec:	20005b70 	.word	0x20005b70
 80021f0:	200071cc 	.word	0x200071cc
 80021f4:	20005340 	.word	0x20005340
 80021f8:	200055a0 	.word	0x200055a0
 80021fc:	200057c8 	.word	0x200057c8
 8002200:	2000725c 	.word	0x2000725c
 8002204:	20006388 	.word	0x20006388
 8002208:	20005c30 	.word	0x20005c30
 800220c:	20005258 	.word	0x20005258
 8002210:	20005900 	.word	0x20005900

08002214 <init_buckets>:

BUCKET buckets[NUM_BUCKETS];


// ************************************************
void init_buckets (void) {
 8002214:	b490      	push	{r4, r7}
 8002216:	af00      	add	r7, sp, #0

// Define bucket bucket_1
bucket_1.bucket_id = 1;
 8002218:	4b3c      	ldr	r3, [pc, #240]	; (800230c <init_buckets+0xf8>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
bucket_1.frequency = 10;
 800221e:	4b3b      	ldr	r3, [pc, #236]	; (800230c <init_buckets+0xf8>)
 8002220:	220a      	movs	r2, #10
 8002222:	805a      	strh	r2, [r3, #2]
bucket_1_bucket_param_list.len = 4;
 8002224:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <init_buckets+0xfc>)
 8002226:	2204      	movs	r2, #4
 8002228:	809a      	strh	r2, [r3, #4]


bucket_1_bucket_general_param_list[0].param.float_struct = oil_cooler_pressure_in;
 800222a:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <init_buckets+0x100>)
 800222c:	4a3a      	ldr	r2, [pc, #232]	; (8002318 <init_buckets+0x104>)
 800222e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002230:	e883 0007 	stmia.w	r3, {r0, r1, r2}
bucket_1_bucket_general_param_list[1].param.float_struct = oil_cooler_pressure_out;
 8002234:	4b37      	ldr	r3, [pc, #220]	; (8002314 <init_buckets+0x100>)
 8002236:	4a39      	ldr	r2, [pc, #228]	; (800231c <init_buckets+0x108>)
 8002238:	3318      	adds	r3, #24
 800223a:	ca07      	ldmia	r2, {r0, r1, r2}
 800223c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
bucket_1_bucket_general_param_list[2].param.float_struct = oil_cooler_pressure_out_lowpass_1000;
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <init_buckets+0x100>)
 8002242:	4a37      	ldr	r2, [pc, #220]	; (8002320 <init_buckets+0x10c>)
 8002244:	3330      	adds	r3, #48	; 0x30
 8002246:	ca07      	ldmia	r2, {r0, r1, r2}
 8002248:	e883 0007 	stmia.w	r3, {r0, r1, r2}
bucket_1_bucket_general_param_list[3].param.float_struct = oil_cooler_pressure_in_lowpass_1000;
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <init_buckets+0x100>)
 800224e:	4a35      	ldr	r2, [pc, #212]	; (8002324 <init_buckets+0x110>)
 8002250:	3348      	adds	r3, #72	; 0x48
 8002252:	ca07      	ldmia	r2, {r0, r1, r2}
 8002254:	e883 0007 	stmia.w	r3, {r0, r1, r2}


bucket_1_bucket_param_list.list = bucket_1_bucket_general_param_list;
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <init_buckets+0xfc>)
 800225a:	4a2e      	ldr	r2, [pc, #184]	; (8002314 <init_buckets+0x100>)
 800225c:	601a      	str	r2, [r3, #0]
bucket_1.bucket = bucket_1_bucket_param_list;
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <init_buckets+0xf8>)
 8002260:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <init_buckets+0xfc>)
 8002262:	3308      	adds	r3, #8
 8002264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002268:	e883 0003 	stmia.w	r3, {r0, r1}

// Define bucket bucket_2
bucket_2.bucket_id = 2;
 800226c:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <init_buckets+0x114>)
 800226e:	2202      	movs	r2, #2
 8002270:	701a      	strb	r2, [r3, #0]
bucket_2.frequency = 50;
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <init_buckets+0x114>)
 8002274:	2232      	movs	r2, #50	; 0x32
 8002276:	805a      	strh	r2, [r3, #2]
bucket_2_bucket_param_list.len = 2;
 8002278:	4b2c      	ldr	r3, [pc, #176]	; (800232c <init_buckets+0x118>)
 800227a:	2202      	movs	r2, #2
 800227c:	809a      	strh	r2, [r3, #4]


bucket_2_bucket_general_param_list[0].param.float_struct = lateral_acceleration;
 800227e:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <init_buckets+0x11c>)
 8002280:	4a2c      	ldr	r2, [pc, #176]	; (8002334 <init_buckets+0x120>)
 8002282:	ca07      	ldmia	r2, {r0, r1, r2}
 8002284:	e883 0007 	stmia.w	r3, {r0, r1, r2}
bucket_2_bucket_general_param_list[1].param.float_struct = longitudinal_acceleration;
 8002288:	4b29      	ldr	r3, [pc, #164]	; (8002330 <init_buckets+0x11c>)
 800228a:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <init_buckets+0x124>)
 800228c:	3318      	adds	r3, #24
 800228e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002290:	e883 0007 	stmia.w	r3, {r0, r1, r2}


bucket_2_bucket_param_list.list = bucket_2_bucket_general_param_list;
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <init_buckets+0x118>)
 8002296:	4a26      	ldr	r2, [pc, #152]	; (8002330 <init_buckets+0x11c>)
 8002298:	601a      	str	r2, [r3, #0]
bucket_2.bucket = bucket_2_bucket_param_list;
 800229a:	4b23      	ldr	r3, [pc, #140]	; (8002328 <init_buckets+0x114>)
 800229c:	4a23      	ldr	r2, [pc, #140]	; (800232c <init_buckets+0x118>)
 800229e:	3308      	adds	r3, #8
 80022a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022a4:	e883 0003 	stmia.w	r3, {r0, r1}

// Define bucket bucket_3
bucket_3.bucket_id = 3;
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <init_buckets+0x128>)
 80022aa:	2203      	movs	r2, #3
 80022ac:	701a      	strb	r2, [r3, #0]
bucket_3.frequency = 1;
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <init_buckets+0x128>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	805a      	strh	r2, [r3, #2]
bucket_3_bucket_param_list.len = 1;
 80022b4:	4b22      	ldr	r3, [pc, #136]	; (8002340 <init_buckets+0x12c>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	809a      	strh	r2, [r3, #4]


bucket_3_bucket_general_param_list[0].param.float_struct = back_left_tire_temp_channel_1;
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <init_buckets+0x130>)
 80022bc:	4a22      	ldr	r2, [pc, #136]	; (8002348 <init_buckets+0x134>)
 80022be:	ca07      	ldmia	r2, {r0, r1, r2}
 80022c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}


bucket_3_bucket_param_list.list = bucket_3_bucket_general_param_list;
 80022c4:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <init_buckets+0x12c>)
 80022c6:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <init_buckets+0x130>)
 80022c8:	601a      	str	r2, [r3, #0]
bucket_3.bucket = bucket_3_bucket_param_list;
 80022ca:	4b1c      	ldr	r3, [pc, #112]	; (800233c <init_buckets+0x128>)
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <init_buckets+0x12c>)
 80022ce:	3308      	adds	r3, #8
 80022d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022d4:	e883 0003 	stmia.w	r3, {r0, r1}


buckets[0] = bucket_1;
 80022d8:	4a1c      	ldr	r2, [pc, #112]	; (800234c <init_buckets+0x138>)
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <init_buckets+0xf8>)
 80022dc:	4614      	mov	r4, r2
 80022de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
buckets[1] = bucket_2;
 80022e4:	4b19      	ldr	r3, [pc, #100]	; (800234c <init_buckets+0x138>)
 80022e6:	4a10      	ldr	r2, [pc, #64]	; (8002328 <init_buckets+0x114>)
 80022e8:	f103 0410 	add.w	r4, r3, #16
 80022ec:	4613      	mov	r3, r2
 80022ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
buckets[2] = bucket_3;
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <init_buckets+0x138>)
 80022f6:	4a11      	ldr	r2, [pc, #68]	; (800233c <init_buckets+0x128>)
 80022f8:	f103 0420 	add.w	r4, r3, #32
 80022fc:	4613      	mov	r3, r2
 80022fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	bc90      	pop	{r4, r7}
 800230a:	4770      	bx	lr
 800230c:	20005368 	.word	0x20005368
 8002310:	20005378 	.word	0x20005378
 8002314:	20005768 	.word	0x20005768
 8002318:	20007220 	.word	0x20007220
 800231c:	200071d8 	.word	0x200071d8
 8002320:	20007278 	.word	0x20007278
 8002324:	20007284 	.word	0x20007284
 8002328:	20005448 	.word	0x20005448
 800232c:	20005590 	.word	0x20005590
 8002330:	20005bf8 	.word	0x20005bf8
 8002334:	20007290 	.word	0x20007290
 8002338:	200071c0 	.word	0x200071c0
 800233c:	20005b60 	.word	0x20005b60
 8002340:	20004e98 	.word	0x20004e98
 8002344:	20005688 	.word	0x20005688
 8002348:	2000725c 	.word	0x2000725c
 800234c:	20004da8 	.word	0x20004da8

08002350 <init_analog_sensors>:
};




void init_analog_sensors (void) {
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
    
    //honeywell_heavy_duty_pressure_transducer.sensor_id = "32313757";
    honeywell_heavy_duty_pressure_transducer.model.type = RATIOMETRIC_LINEAR;
 8002354:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <init_analog_sensors+0x140>)
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    honeywell_heavy_duty_pressure_transducer.model.measurement_unit = VOLTS;
 800235c:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <init_analog_sensors+0x140>)
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    honeywell_heavy_duty_pressure_transducer.model.supply_voltage = 5;
 8002364:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <init_analog_sensors+0x140>)
 8002366:	4a4b      	ldr	r2, [pc, #300]	; (8002494 <init_analog_sensors+0x144>)
 8002368:	649a      	str	r2, [r3, #72]	; 0x48
    honeywell_heavy_duty_pressure_transducer.model.inline_resistance = 0;
 800236a:	4b49      	ldr	r3, [pc, #292]	; (8002490 <init_analog_sensors+0x140>)
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	64da      	str	r2, [r3, #76]	; 0x4c
    honeywell_heavy_duty_pressure_transducer.model.low_bar = 10;
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <init_analog_sensors+0x140>)
 8002374:	4a48      	ldr	r2, [pc, #288]	; (8002498 <init_analog_sensors+0x148>)
 8002376:	639a      	str	r2, [r3, #56]	; 0x38
    honeywell_heavy_duty_pressure_transducer.model.high_bar = 90;
 8002378:	4b45      	ldr	r3, [pc, #276]	; (8002490 <init_analog_sensors+0x140>)
 800237a:	4a48      	ldr	r2, [pc, #288]	; (800249c <init_analog_sensors+0x14c>)
 800237c:	63da      	str	r2, [r3, #60]	; 0x3c
    honeywell_heavy_duty_pressure_transducer.model.low_bar_value = 0;
 800237e:	4b44      	ldr	r3, [pc, #272]	; (8002490 <init_analog_sensors+0x140>)
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
    honeywell_heavy_duty_pressure_transducer.model.high_bar_value = 100;
 8002386:	4b42      	ldr	r3, [pc, #264]	; (8002490 <init_analog_sensors+0x140>)
 8002388:	4a45      	ldr	r2, [pc, #276]	; (80024a0 <init_analog_sensors+0x150>)
 800238a:	645a      	str	r2, [r3, #68]	; 0x44

    
    honeywell_heavy_duty_pressure_transducer.model.table = NULL;
 800238c:	4b40      	ldr	r3, [pc, #256]	; (8002490 <init_analog_sensors+0x140>)
 800238e:	2200      	movs	r2, #0
 8002390:	651a      	str	r2, [r3, #80]	; 0x50
    

    //honeywell_heavy_duty_pressure_transducer.output.output_name = "pressure";
    honeywell_heavy_duty_pressure_transducer.output.scalar.quantization = continuous; //0 if continuous
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <init_analog_sensors+0x140>)
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    honeywell_heavy_duty_pressure_transducer.output.scalar.offset = 0;
 800239c:	4b3c      	ldr	r3, [pc, #240]	; (8002490 <init_analog_sensors+0x140>)
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    honeywell_heavy_duty_pressure_transducer.output.data_size_bits = 12;
 80023a6:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <init_analog_sensors+0x140>)
 80023a8:	220c      	movs	r2, #12
 80023aa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    

    
    //banner_qx4_analog_laser_sensor.sensor_id = "185624";
    banner_qx4_analog_laser_sensor.model.type = ABSOLUTE_LINEAR;
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <init_analog_sensors+0x154>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    banner_qx4_analog_laser_sensor.model.measurement_unit = MILLIAMPS;
 80023b6:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <init_analog_sensors+0x154>)
 80023b8:	2202      	movs	r2, #2
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    banner_qx4_analog_laser_sensor.model.supply_voltage = 5;
 80023be:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <init_analog_sensors+0x154>)
 80023c0:	4a34      	ldr	r2, [pc, #208]	; (8002494 <init_analog_sensors+0x144>)
 80023c2:	649a      	str	r2, [r3, #72]	; 0x48
    banner_qx4_analog_laser_sensor.model.inline_resistance = 0;
 80023c4:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <init_analog_sensors+0x154>)
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	64da      	str	r2, [r3, #76]	; 0x4c
    banner_qx4_analog_laser_sensor.model.low_bar = 4;
 80023cc:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <init_analog_sensors+0x154>)
 80023ce:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
    banner_qx4_analog_laser_sensor.model.high_bar = 20;
 80023d4:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <init_analog_sensors+0x154>)
 80023d6:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <init_analog_sensors+0x158>)
 80023d8:	63da      	str	r2, [r3, #60]	; 0x3c
    banner_qx4_analog_laser_sensor.model.low_bar_value = 5;
 80023da:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <init_analog_sensors+0x154>)
 80023dc:	4a2d      	ldr	r2, [pc, #180]	; (8002494 <init_analog_sensors+0x144>)
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
    banner_qx4_analog_laser_sensor.model.high_bar_value = 50;
 80023e0:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <init_analog_sensors+0x154>)
 80023e2:	4a32      	ldr	r2, [pc, #200]	; (80024ac <init_analog_sensors+0x15c>)
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44

    
    banner_qx4_analog_laser_sensor.model.table = NULL;
 80023e6:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <init_analog_sensors+0x154>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	651a      	str	r2, [r3, #80]	; 0x50
    

    //banner_qx4_analog_laser_sensor.output.output_name = "height";
    banner_qx4_analog_laser_sensor.output.scalar.quantization = continuous; //0 if continuous
 80023ec:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <init_analog_sensors+0x154>)
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    banner_qx4_analog_laser_sensor.output.scalar.offset = 0;
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <init_analog_sensors+0x154>)
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    banner_qx4_analog_laser_sensor.output.data_size_bits = 12;
 8002400:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <init_analog_sensors+0x154>)
 8002402:	220c      	movs	r2, #12
 8002404:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    

    
    //bosch_temperature_sensor.sensor_id = "NTC M12-H";
    bosch_temperature_sensor.model.type = TABULAR;
 8002408:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <init_analog_sensors+0x160>)
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    bosch_temperature_sensor.model.measurement_unit = OHMS;
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <init_analog_sensors+0x160>)
 8002412:	2208      	movs	r2, #8
 8002414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    bosch_temperature_sensor.model.supply_voltage = 5;
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <init_analog_sensors+0x160>)
 800241a:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <init_analog_sensors+0x144>)
 800241c:	649a      	str	r2, [r3, #72]	; 0x48
    bosch_temperature_sensor.model.inline_resistance = 0;
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <init_analog_sensors+0x160>)
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	64da      	str	r2, [r3, #76]	; 0x4c
    bosch_temperature_sensor.model.low_bar = 0;
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <init_analog_sensors+0x160>)
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
    bosch_temperature_sensor.model.high_bar = 0;
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <init_analog_sensors+0x160>)
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	63da      	str	r2, [r3, #60]	; 0x3c
    bosch_temperature_sensor.model.low_bar_value = 0;
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <init_analog_sensors+0x160>)
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
    bosch_temperature_sensor.model.high_bar_value = 0;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <init_analog_sensors+0x160>)
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	; 0x44

    
    
    //TABLE bosch_temperature_sensor_output_model_table;
    bosch_temperature_sensor_output_model_table.num_entries = 4;
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <init_analog_sensors+0x164>)
 8002448:	2204      	movs	r2, #4
 800244a:	819a      	strh	r2, [r3, #12]
    bosch_temperature_sensor_output_model_table.independent_unit = DEGREES_C;
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <init_analog_sensors+0x164>)
 800244e:	2203      	movs	r2, #3
 8002450:	701a      	strb	r2, [r3, #0]
    bosch_temperature_sensor_output_model_table.dependent_unit = OHMS;
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <init_analog_sensors+0x164>)
 8002454:	2208      	movs	r2, #8
 8002456:	705a      	strb	r2, [r3, #1]
    bosch_temperature_sensor_output_model_table.independent_vars = bosch_temperature_sensor_output_model_table_independent_vars;
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <init_analog_sensors+0x164>)
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <init_analog_sensors+0x168>)
 800245c:	605a      	str	r2, [r3, #4]
    bosch_temperature_sensor_output_model_table.dependent_vars = bosch_temperature_sensor_output_model_table_dependent_vars;
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <init_analog_sensors+0x164>)
 8002460:	4a16      	ldr	r2, [pc, #88]	; (80024bc <init_analog_sensors+0x16c>)
 8002462:	609a      	str	r2, [r3, #8]
    bosch_temperature_sensor.model.table = &bosch_temperature_sensor_output_model_table;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <init_analog_sensors+0x160>)
 8002466:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <init_analog_sensors+0x164>)
 8002468:	651a      	str	r2, [r3, #80]	; 0x50

    

    //bosch_temperature_sensor.output.output_name = "temperature";
    bosch_temperature_sensor.output.scalar.quantization = continuous; //0 if continuous
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <init_analog_sensors+0x160>)
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    bosch_temperature_sensor.output.scalar.offset = 0;
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <init_analog_sensors+0x160>)
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    bosch_temperature_sensor.output.data_size_bits = 12;
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <init_analog_sensors+0x160>)
 8002480:	220c      	movs	r2, #12
 8002482:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    

    
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	200062f4 	.word	0x200062f4
 8002494:	40a00000 	.word	0x40a00000
 8002498:	41200000 	.word	0x41200000
 800249c:	42b40000 	.word	0x42b40000
 80024a0:	42c80000 	.word	0x42c80000
 80024a4:	200060f8 	.word	0x200060f8
 80024a8:	41a00000 	.word	0x41a00000
 80024ac:	42480000 	.word	0x42480000
 80024b0:	20005fc4 	.word	0x20005fc4
 80024b4:	200060e8 	.word	0x200060e8
 80024b8:	20000004 	.word	0x20000004
 80024bc:	20000014 	.word	0x20000014

080024c0 <init_can_sensors>:

SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_messages[16];


// CAN sensors
void init_can_sensors (void) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
    
    // Sensor definition bosch_accelerometer
    //CAN_SENSOR bosch_accelerometer;
    //bosch_accelerometer.sensor_id = "MM5.10-R";
    bosch_accelerometer.byte_order = LSB;
 80024c4:	4baa      	ldr	r3, [pc, #680]	; (8002770 <init_can_sensors+0x2b0>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    
    bosch_accelerometer.num_messages = 5;
 80024cc:	4ba8      	ldr	r3, [pc, #672]	; (8002770 <init_can_sensors+0x2b0>)
 80024ce:	2205      	movs	r2, #5
 80024d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    
    
    //SENSOR_CAN_MESSAGE bosch_accelerometer_message_1;
    bosch_accelerometer_message_1.message_id = 372;
 80024d4:	4ba7      	ldr	r3, [pc, #668]	; (8002774 <init_can_sensors+0x2b4>)
 80024d6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80024da:	601a      	str	r2, [r3, #0]
    //bosch_accelerometer_message_1.output.output_name = "yaw_rate";
    bosch_accelerometer_message_1.output.scalar.quantization = 0.005;
 80024dc:	4ba5      	ldr	r3, [pc, #660]	; (8002774 <init_can_sensors+0x2b4>)
 80024de:	4aa6      	ldr	r2, [pc, #664]	; (8002778 <init_can_sensors+0x2b8>)
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38
    bosch_accelerometer_message_1.output.scalar.offset = 32768;
 80024e2:	4ba4      	ldr	r3, [pc, #656]	; (8002774 <init_can_sensors+0x2b4>)
 80024e4:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 80024e8:	63da      	str	r2, [r3, #60]	; 0x3c
    bosch_accelerometer_message_1.data_start = 0;
 80024ea:	4ba2      	ldr	r3, [pc, #648]	; (8002774 <init_can_sensors+0x2b4>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    bosch_accelerometer_message_1.data_end = 0;
 80024f2:	4ba0      	ldr	r3, [pc, #640]	; (8002774 <init_can_sensors+0x2b4>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE bosch_accelerometer_message_2;
    bosch_accelerometer_message_2.message_id = 372;
 80024fa:	4ba0      	ldr	r3, [pc, #640]	; (800277c <init_can_sensors+0x2bc>)
 80024fc:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8002500:	601a      	str	r2, [r3, #0]
    //bosch_accelerometer_message_2.output.output_name = "y_acceleration";
    bosch_accelerometer_message_2.output.scalar.quantization = 0.0001274;
 8002502:	4b9e      	ldr	r3, [pc, #632]	; (800277c <init_can_sensors+0x2bc>)
 8002504:	4a9e      	ldr	r2, [pc, #632]	; (8002780 <init_can_sensors+0x2c0>)
 8002506:	639a      	str	r2, [r3, #56]	; 0x38
    bosch_accelerometer_message_2.output.scalar.offset = 32768;
 8002508:	4b9c      	ldr	r3, [pc, #624]	; (800277c <init_can_sensors+0x2bc>)
 800250a:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 800250e:	63da      	str	r2, [r3, #60]	; 0x3c
    bosch_accelerometer_message_2.data_start = 4;
 8002510:	4b9a      	ldr	r3, [pc, #616]	; (800277c <init_can_sensors+0x2bc>)
 8002512:	2204      	movs	r2, #4
 8002514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    bosch_accelerometer_message_2.data_end = 5;
 8002518:	4b98      	ldr	r3, [pc, #608]	; (800277c <init_can_sensors+0x2bc>)
 800251a:	2205      	movs	r2, #5
 800251c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE bosch_accelerometer_message_3;
    bosch_accelerometer_message_3.message_id = 376;
 8002520:	4b98      	ldr	r3, [pc, #608]	; (8002784 <init_can_sensors+0x2c4>)
 8002522:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8002526:	601a      	str	r2, [r3, #0]
    //bosch_accelerometer_message_3.output.output_name = "roll_rate";
    bosch_accelerometer_message_3.output.scalar.quantization = 0.005;
 8002528:	4b96      	ldr	r3, [pc, #600]	; (8002784 <init_can_sensors+0x2c4>)
 800252a:	4a93      	ldr	r2, [pc, #588]	; (8002778 <init_can_sensors+0x2b8>)
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
    bosch_accelerometer_message_3.output.scalar.offset = 32768;
 800252e:	4b95      	ldr	r3, [pc, #596]	; (8002784 <init_can_sensors+0x2c4>)
 8002530:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 8002534:	63da      	str	r2, [r3, #60]	; 0x3c
    bosch_accelerometer_message_3.data_start = 0;
 8002536:	4b93      	ldr	r3, [pc, #588]	; (8002784 <init_can_sensors+0x2c4>)
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    bosch_accelerometer_message_3.data_end = 0;
 800253e:	4b91      	ldr	r3, [pc, #580]	; (8002784 <init_can_sensors+0x2c4>)
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE bosch_accelerometer_message_4;
    bosch_accelerometer_message_4.message_id = 376;
 8002546:	4b90      	ldr	r3, [pc, #576]	; (8002788 <init_can_sensors+0x2c8>)
 8002548:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800254c:	601a      	str	r2, [r3, #0]
    //bosch_accelerometer_message_4.output.output_name = "x_acceleration";
    bosch_accelerometer_message_4.output.scalar.quantization = 0.0001274;
 800254e:	4b8e      	ldr	r3, [pc, #568]	; (8002788 <init_can_sensors+0x2c8>)
 8002550:	4a8b      	ldr	r2, [pc, #556]	; (8002780 <init_can_sensors+0x2c0>)
 8002552:	639a      	str	r2, [r3, #56]	; 0x38
    bosch_accelerometer_message_4.output.scalar.offset = 32768;
 8002554:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <init_can_sensors+0x2c8>)
 8002556:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 800255a:	63da      	str	r2, [r3, #60]	; 0x3c
    bosch_accelerometer_message_4.data_start = 4;
 800255c:	4b8a      	ldr	r3, [pc, #552]	; (8002788 <init_can_sensors+0x2c8>)
 800255e:	2204      	movs	r2, #4
 8002560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    bosch_accelerometer_message_4.data_end = 5;
 8002564:	4b88      	ldr	r3, [pc, #544]	; (8002788 <init_can_sensors+0x2c8>)
 8002566:	2205      	movs	r2, #5
 8002568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE bosch_accelerometer_message_5;
    bosch_accelerometer_message_5.message_id = 380;
 800256c:	4b87      	ldr	r3, [pc, #540]	; (800278c <init_can_sensors+0x2cc>)
 800256e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002572:	601a      	str	r2, [r3, #0]
    //bosch_accelerometer_message_5.output.output_name = "z_acceleration";
    bosch_accelerometer_message_5.output.scalar.quantization = 0.0001274;
 8002574:	4b85      	ldr	r3, [pc, #532]	; (800278c <init_can_sensors+0x2cc>)
 8002576:	4a82      	ldr	r2, [pc, #520]	; (8002780 <init_can_sensors+0x2c0>)
 8002578:	639a      	str	r2, [r3, #56]	; 0x38
    bosch_accelerometer_message_5.output.scalar.offset = 32768;
 800257a:	4b84      	ldr	r3, [pc, #528]	; (800278c <init_can_sensors+0x2cc>)
 800257c:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 8002580:	63da      	str	r2, [r3, #60]	; 0x3c
    bosch_accelerometer_message_5.data_start = 4;
 8002582:	4b82      	ldr	r3, [pc, #520]	; (800278c <init_can_sensors+0x2cc>)
 8002584:	2204      	movs	r2, #4
 8002586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    bosch_accelerometer_message_5.data_end = 5;
 800258a:	4b80      	ldr	r3, [pc, #512]	; (800278c <init_can_sensors+0x2cc>)
 800258c:	2205      	movs	r2, #5
 800258e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    bosch_accelerometer_messages[0] = bosch_accelerometer_message_1;
 8002592:	4a7f      	ldr	r2, [pc, #508]	; (8002790 <init_can_sensors+0x2d0>)
 8002594:	4b77      	ldr	r3, [pc, #476]	; (8002774 <init_can_sensors+0x2b4>)
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	2348      	movs	r3, #72	; 0x48
 800259c:	461a      	mov	r2, r3
 800259e:	f007 fc57 	bl	8009e50 <memcpy>
    bosch_accelerometer_messages[1] = bosch_accelerometer_message_2;
 80025a2:	4b7b      	ldr	r3, [pc, #492]	; (8002790 <init_can_sensors+0x2d0>)
 80025a4:	4a75      	ldr	r2, [pc, #468]	; (800277c <init_can_sensors+0x2bc>)
 80025a6:	3348      	adds	r3, #72	; 0x48
 80025a8:	4611      	mov	r1, r2
 80025aa:	2248      	movs	r2, #72	; 0x48
 80025ac:	4618      	mov	r0, r3
 80025ae:	f007 fc4f 	bl	8009e50 <memcpy>
    bosch_accelerometer_messages[2] = bosch_accelerometer_message_3;
 80025b2:	4b77      	ldr	r3, [pc, #476]	; (8002790 <init_can_sensors+0x2d0>)
 80025b4:	4a73      	ldr	r2, [pc, #460]	; (8002784 <init_can_sensors+0x2c4>)
 80025b6:	3390      	adds	r3, #144	; 0x90
 80025b8:	4611      	mov	r1, r2
 80025ba:	2248      	movs	r2, #72	; 0x48
 80025bc:	4618      	mov	r0, r3
 80025be:	f007 fc47 	bl	8009e50 <memcpy>
    bosch_accelerometer_messages[3] = bosch_accelerometer_message_4;
 80025c2:	4b73      	ldr	r3, [pc, #460]	; (8002790 <init_can_sensors+0x2d0>)
 80025c4:	4a70      	ldr	r2, [pc, #448]	; (8002788 <init_can_sensors+0x2c8>)
 80025c6:	33d8      	adds	r3, #216	; 0xd8
 80025c8:	4611      	mov	r1, r2
 80025ca:	2248      	movs	r2, #72	; 0x48
 80025cc:	4618      	mov	r0, r3
 80025ce:	f007 fc3f 	bl	8009e50 <memcpy>
    bosch_accelerometer_messages[4] = bosch_accelerometer_message_5;
 80025d2:	4b6f      	ldr	r3, [pc, #444]	; (8002790 <init_can_sensors+0x2d0>)
 80025d4:	4a6d      	ldr	r2, [pc, #436]	; (800278c <init_can_sensors+0x2cc>)
 80025d6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80025da:	4611      	mov	r1, r2
 80025dc:	2248      	movs	r2, #72	; 0x48
 80025de:	4618      	mov	r0, r3
 80025e0:	f007 fc36 	bl	8009e50 <memcpy>
    
    bosch_accelerometer.messages = bosch_accelerometer_messages;
 80025e4:	4b62      	ldr	r3, [pc, #392]	; (8002770 <init_can_sensors+0x2b0>)
 80025e6:	4a6a      	ldr	r2, [pc, #424]	; (8002790 <init_can_sensors+0x2d0>)
 80025e8:	635a      	str	r2, [r3, #52]	; 0x34

    
    // Sensor definition izze_infared_tire_temperature_sensor
    //CAN_SENSOR izze_infared_tire_temperature_sensor;
    //izze_infared_tire_temperature_sensor.sensor_id = "IRTS-V2";
    izze_infared_tire_temperature_sensor.byte_order = MSB;
 80025ea:	4b6a      	ldr	r3, [pc, #424]	; (8002794 <init_can_sensors+0x2d4>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    
    izze_infared_tire_temperature_sensor.num_messages = 16;
 80025f2:	4b68      	ldr	r3, [pc, #416]	; (8002794 <init_can_sensors+0x2d4>)
 80025f4:	2210      	movs	r2, #16
 80025f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_1;
    izze_infared_tire_temperature_sensor_message_1.message_id = 1200;
 80025fa:	4b67      	ldr	r3, [pc, #412]	; (8002798 <init_can_sensors+0x2d8>)
 80025fc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002600:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_1.output.output_name = "channel_1_temp";
    izze_infared_tire_temperature_sensor_message_1.output.scalar.quantization = 0.1;
 8002602:	4b65      	ldr	r3, [pc, #404]	; (8002798 <init_can_sensors+0x2d8>)
 8002604:	4a65      	ldr	r2, [pc, #404]	; (800279c <init_can_sensors+0x2dc>)
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_1.output.scalar.offset = -100;
 8002608:	4b63      	ldr	r3, [pc, #396]	; (8002798 <init_can_sensors+0x2d8>)
 800260a:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <init_can_sensors+0x2e0>)
 800260c:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_1.data_start = 0;
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <init_can_sensors+0x2d8>)
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_1.data_end = 1;
 8002616:	4b60      	ldr	r3, [pc, #384]	; (8002798 <init_can_sensors+0x2d8>)
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_2;
    izze_infared_tire_temperature_sensor_message_2.message_id = 1200;
 800261e:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <init_can_sensors+0x2e4>)
 8002620:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002624:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_2.output.output_name = "channel_2_temp";
    izze_infared_tire_temperature_sensor_message_2.output.scalar.quantization = 0.1;
 8002626:	4b5f      	ldr	r3, [pc, #380]	; (80027a4 <init_can_sensors+0x2e4>)
 8002628:	4a5c      	ldr	r2, [pc, #368]	; (800279c <init_can_sensors+0x2dc>)
 800262a:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_2.output.scalar.offset = -100;
 800262c:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <init_can_sensors+0x2e4>)
 800262e:	4a5c      	ldr	r2, [pc, #368]	; (80027a0 <init_can_sensors+0x2e0>)
 8002630:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_2.data_start = 2;
 8002632:	4b5c      	ldr	r3, [pc, #368]	; (80027a4 <init_can_sensors+0x2e4>)
 8002634:	2202      	movs	r2, #2
 8002636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_2.data_end = 3;
 800263a:	4b5a      	ldr	r3, [pc, #360]	; (80027a4 <init_can_sensors+0x2e4>)
 800263c:	2203      	movs	r2, #3
 800263e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_3;
    izze_infared_tire_temperature_sensor_message_3.message_id = 1200;
 8002642:	4b59      	ldr	r3, [pc, #356]	; (80027a8 <init_can_sensors+0x2e8>)
 8002644:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002648:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_3.output.output_name = "channel_3_temp";
    izze_infared_tire_temperature_sensor_message_3.output.scalar.quantization = 0.1;
 800264a:	4b57      	ldr	r3, [pc, #348]	; (80027a8 <init_can_sensors+0x2e8>)
 800264c:	4a53      	ldr	r2, [pc, #332]	; (800279c <init_can_sensors+0x2dc>)
 800264e:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_3.output.scalar.offset = -100;
 8002650:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <init_can_sensors+0x2e8>)
 8002652:	4a53      	ldr	r2, [pc, #332]	; (80027a0 <init_can_sensors+0x2e0>)
 8002654:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_3.data_start = 4;
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <init_can_sensors+0x2e8>)
 8002658:	2204      	movs	r2, #4
 800265a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_3.data_end = 5;
 800265e:	4b52      	ldr	r3, [pc, #328]	; (80027a8 <init_can_sensors+0x2e8>)
 8002660:	2205      	movs	r2, #5
 8002662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_4;
    izze_infared_tire_temperature_sensor_message_4.message_id = 1200;
 8002666:	4b51      	ldr	r3, [pc, #324]	; (80027ac <init_can_sensors+0x2ec>)
 8002668:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800266c:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_4.output.output_name = "channel_4_temp";
    izze_infared_tire_temperature_sensor_message_4.output.scalar.quantization = 0.1;
 800266e:	4b4f      	ldr	r3, [pc, #316]	; (80027ac <init_can_sensors+0x2ec>)
 8002670:	4a4a      	ldr	r2, [pc, #296]	; (800279c <init_can_sensors+0x2dc>)
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_4.output.scalar.offset = -100;
 8002674:	4b4d      	ldr	r3, [pc, #308]	; (80027ac <init_can_sensors+0x2ec>)
 8002676:	4a4a      	ldr	r2, [pc, #296]	; (80027a0 <init_can_sensors+0x2e0>)
 8002678:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_4.data_start = 6;
 800267a:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <init_can_sensors+0x2ec>)
 800267c:	2206      	movs	r2, #6
 800267e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_4.data_end = 7;
 8002682:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <init_can_sensors+0x2ec>)
 8002684:	2207      	movs	r2, #7
 8002686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_5;
    izze_infared_tire_temperature_sensor_message_5.message_id = 1201;
 800268a:	4b49      	ldr	r3, [pc, #292]	; (80027b0 <init_can_sensors+0x2f0>)
 800268c:	f240 42b1 	movw	r2, #1201	; 0x4b1
 8002690:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_5.output.output_name = "channel_5_temp";
    izze_infared_tire_temperature_sensor_message_5.output.scalar.quantization = 0.1;
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <init_can_sensors+0x2f0>)
 8002694:	4a41      	ldr	r2, [pc, #260]	; (800279c <init_can_sensors+0x2dc>)
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_5.output.scalar.offset = -100;
 8002698:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <init_can_sensors+0x2f0>)
 800269a:	4a41      	ldr	r2, [pc, #260]	; (80027a0 <init_can_sensors+0x2e0>)
 800269c:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_5.data_start = 0;
 800269e:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <init_can_sensors+0x2f0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_5.data_end = 1;
 80026a6:	4b42      	ldr	r3, [pc, #264]	; (80027b0 <init_can_sensors+0x2f0>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_6;
    izze_infared_tire_temperature_sensor_message_6.message_id = 1201;
 80026ae:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <init_can_sensors+0x2f4>)
 80026b0:	f240 42b1 	movw	r2, #1201	; 0x4b1
 80026b4:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_6.output.output_name = "channel_6_temp";
    izze_infared_tire_temperature_sensor_message_6.output.scalar.quantization = 0.1;
 80026b6:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <init_can_sensors+0x2f4>)
 80026b8:	4a38      	ldr	r2, [pc, #224]	; (800279c <init_can_sensors+0x2dc>)
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_6.output.scalar.offset = -100;
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <init_can_sensors+0x2f4>)
 80026be:	4a38      	ldr	r2, [pc, #224]	; (80027a0 <init_can_sensors+0x2e0>)
 80026c0:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_6.data_start = 2;
 80026c2:	4b3c      	ldr	r3, [pc, #240]	; (80027b4 <init_can_sensors+0x2f4>)
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_6.data_end = 3;
 80026ca:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <init_can_sensors+0x2f4>)
 80026cc:	2203      	movs	r2, #3
 80026ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_7;
    izze_infared_tire_temperature_sensor_message_7.message_id = 1201;
 80026d2:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <init_can_sensors+0x2f8>)
 80026d4:	f240 42b1 	movw	r2, #1201	; 0x4b1
 80026d8:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_7.output.output_name = "channel_7_temp";
    izze_infared_tire_temperature_sensor_message_7.output.scalar.quantization = 0.1;
 80026da:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <init_can_sensors+0x2f8>)
 80026dc:	4a2f      	ldr	r2, [pc, #188]	; (800279c <init_can_sensors+0x2dc>)
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_7.output.scalar.offset = -100;
 80026e0:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <init_can_sensors+0x2f8>)
 80026e2:	4a2f      	ldr	r2, [pc, #188]	; (80027a0 <init_can_sensors+0x2e0>)
 80026e4:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_7.data_start = 4;
 80026e6:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <init_can_sensors+0x2f8>)
 80026e8:	2204      	movs	r2, #4
 80026ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_7.data_end = 5;
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <init_can_sensors+0x2f8>)
 80026f0:	2205      	movs	r2, #5
 80026f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_8;
    izze_infared_tire_temperature_sensor_message_8.message_id = 1201;
 80026f6:	4b31      	ldr	r3, [pc, #196]	; (80027bc <init_can_sensors+0x2fc>)
 80026f8:	f240 42b1 	movw	r2, #1201	; 0x4b1
 80026fc:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_8.output.output_name = "channel_8_temp";
    izze_infared_tire_temperature_sensor_message_8.output.scalar.quantization = 0.1;
 80026fe:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <init_can_sensors+0x2fc>)
 8002700:	4a26      	ldr	r2, [pc, #152]	; (800279c <init_can_sensors+0x2dc>)
 8002702:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_8.output.scalar.offset = -100;
 8002704:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <init_can_sensors+0x2fc>)
 8002706:	4a26      	ldr	r2, [pc, #152]	; (80027a0 <init_can_sensors+0x2e0>)
 8002708:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_8.data_start = 6;
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <init_can_sensors+0x2fc>)
 800270c:	2206      	movs	r2, #6
 800270e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_8.data_end = 7;
 8002712:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <init_can_sensors+0x2fc>)
 8002714:	2207      	movs	r2, #7
 8002716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_9;
    izze_infared_tire_temperature_sensor_message_9.message_id = 1202;
 800271a:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <init_can_sensors+0x300>)
 800271c:	f240 42b2 	movw	r2, #1202	; 0x4b2
 8002720:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_9.output.output_name = "channel_9_temp";
    izze_infared_tire_temperature_sensor_message_9.output.scalar.quantization = 0.1;
 8002722:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <init_can_sensors+0x300>)
 8002724:	4a1d      	ldr	r2, [pc, #116]	; (800279c <init_can_sensors+0x2dc>)
 8002726:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_9.output.scalar.offset = -100;
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <init_can_sensors+0x300>)
 800272a:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <init_can_sensors+0x2e0>)
 800272c:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_9.data_start = 0;
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <init_can_sensors+0x300>)
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_9.data_end = 1;
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <init_can_sensors+0x300>)
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_10;
    izze_infared_tire_temperature_sensor_message_10.message_id = 1202;
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <init_can_sensors+0x304>)
 8002740:	f240 42b2 	movw	r2, #1202	; 0x4b2
 8002744:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_10.output.output_name = "channel_10_temp";
    izze_infared_tire_temperature_sensor_message_10.output.scalar.quantization = 0.1;
 8002746:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <init_can_sensors+0x304>)
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <init_can_sensors+0x2dc>)
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_10.output.scalar.offset = -100;
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <init_can_sensors+0x304>)
 800274e:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <init_can_sensors+0x2e0>)
 8002750:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_10.data_start = 2;
 8002752:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <init_can_sensors+0x304>)
 8002754:	2202      	movs	r2, #2
 8002756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_10.data_end = 3;
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <init_can_sensors+0x304>)
 800275c:	2203      	movs	r2, #3
 800275e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_11;
    izze_infared_tire_temperature_sensor_message_11.message_id = 1202;
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <init_can_sensors+0x308>)
 8002764:	f240 42b2 	movw	r2, #1202	; 0x4b2
 8002768:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_11.output.output_name = "channel_11_temp";
    izze_infared_tire_temperature_sensor_message_11.output.scalar.quantization = 0.1;
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <init_can_sensors+0x308>)
 800276c:	e02e      	b.n	80027cc <init_can_sensors+0x30c>
 800276e:	bf00      	nop
 8002770:	20005f88 	.word	0x20005f88
 8002774:	20006604 	.word	0x20006604
 8002778:	3ba3d70a 	.word	0x3ba3d70a
 800277c:	20005dd8 	.word	0x20005dd8
 8002780:	390596ad 	.word	0x390596ad
 8002784:	2000621c 	.word	0x2000621c
 8002788:	200065bc 	.word	0x200065bc
 800278c:	20005e68 	.word	0x20005e68
 8002790:	200063c4 	.word	0x200063c4
 8002794:	20006388 	.word	0x20006388
 8002798:	20005e20 	.word	0x20005e20
 800279c:	3dcccccd 	.word	0x3dcccccd
 80027a0:	c2c80000 	.word	0xc2c80000
 80027a4:	20005eb0 	.word	0x20005eb0
 80027a8:	200061d4 	.word	0x200061d4
 80027ac:	20006058 	.word	0x20006058
 80027b0:	20006acc 	.word	0x20006acc
 80027b4:	200062ac 	.word	0x200062ac
 80027b8:	20005d90 	.word	0x20005d90
 80027bc:	2000618c 	.word	0x2000618c
 80027c0:	20005d48 	.word	0x20005d48
 80027c4:	20006574 	.word	0x20006574
 80027c8:	200060a0 	.word	0x200060a0
 80027cc:	4a7b      	ldr	r2, [pc, #492]	; (80029bc <init_can_sensors+0x4fc>)
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_11.output.scalar.offset = -100;
 80027d0:	4b7b      	ldr	r3, [pc, #492]	; (80029c0 <init_can_sensors+0x500>)
 80027d2:	4a7c      	ldr	r2, [pc, #496]	; (80029c4 <init_can_sensors+0x504>)
 80027d4:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_11.data_start = 4;
 80027d6:	4b7a      	ldr	r3, [pc, #488]	; (80029c0 <init_can_sensors+0x500>)
 80027d8:	2204      	movs	r2, #4
 80027da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_11.data_end = 5;
 80027de:	4b78      	ldr	r3, [pc, #480]	; (80029c0 <init_can_sensors+0x500>)
 80027e0:	2205      	movs	r2, #5
 80027e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_12;
    izze_infared_tire_temperature_sensor_message_12.message_id = 1202;
 80027e6:	4b78      	ldr	r3, [pc, #480]	; (80029c8 <init_can_sensors+0x508>)
 80027e8:	f240 42b2 	movw	r2, #1202	; 0x4b2
 80027ec:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_12.output.output_name = "channel_12_temp";
    izze_infared_tire_temperature_sensor_message_12.output.scalar.quantization = 0.1;
 80027ee:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <init_can_sensors+0x508>)
 80027f0:	4a72      	ldr	r2, [pc, #456]	; (80029bc <init_can_sensors+0x4fc>)
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_12.output.scalar.offset = -100;
 80027f4:	4b74      	ldr	r3, [pc, #464]	; (80029c8 <init_can_sensors+0x508>)
 80027f6:	4a73      	ldr	r2, [pc, #460]	; (80029c4 <init_can_sensors+0x504>)
 80027f8:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_12.data_start = 6;
 80027fa:	4b73      	ldr	r3, [pc, #460]	; (80029c8 <init_can_sensors+0x508>)
 80027fc:	2206      	movs	r2, #6
 80027fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_12.data_end = 7;
 8002802:	4b71      	ldr	r3, [pc, #452]	; (80029c8 <init_can_sensors+0x508>)
 8002804:	2207      	movs	r2, #7
 8002806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_13;
    izze_infared_tire_temperature_sensor_message_13.message_id = 1203;
 800280a:	4b70      	ldr	r3, [pc, #448]	; (80029cc <init_can_sensors+0x50c>)
 800280c:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8002810:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_13.output.output_name = "channel_13_temp";
    izze_infared_tire_temperature_sensor_message_13.output.scalar.quantization = 0.1;
 8002812:	4b6e      	ldr	r3, [pc, #440]	; (80029cc <init_can_sensors+0x50c>)
 8002814:	4a69      	ldr	r2, [pc, #420]	; (80029bc <init_can_sensors+0x4fc>)
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_13.output.scalar.offset = -100;
 8002818:	4b6c      	ldr	r3, [pc, #432]	; (80029cc <init_can_sensors+0x50c>)
 800281a:	4a6a      	ldr	r2, [pc, #424]	; (80029c4 <init_can_sensors+0x504>)
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_13.data_start = 0;
 800281e:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <init_can_sensors+0x50c>)
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_13.data_end = 1;
 8002826:	4b69      	ldr	r3, [pc, #420]	; (80029cc <init_can_sensors+0x50c>)
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_14;
    izze_infared_tire_temperature_sensor_message_14.message_id = 1203;
 800282e:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <init_can_sensors+0x510>)
 8002830:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8002834:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_14.output.output_name = "channel_14_temp";
    izze_infared_tire_temperature_sensor_message_14.output.scalar.quantization = 0.1;
 8002836:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <init_can_sensors+0x510>)
 8002838:	4a60      	ldr	r2, [pc, #384]	; (80029bc <init_can_sensors+0x4fc>)
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_14.output.scalar.offset = -100;
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <init_can_sensors+0x510>)
 800283e:	4a61      	ldr	r2, [pc, #388]	; (80029c4 <init_can_sensors+0x504>)
 8002840:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_14.data_start = 2;
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <init_can_sensors+0x510>)
 8002844:	2202      	movs	r2, #2
 8002846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_14.data_end = 3;
 800284a:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <init_can_sensors+0x510>)
 800284c:	2203      	movs	r2, #3
 800284e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_15;
    izze_infared_tire_temperature_sensor_message_15.message_id = 1203;
 8002852:	4b60      	ldr	r3, [pc, #384]	; (80029d4 <init_can_sensors+0x514>)
 8002854:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8002858:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_15.output.output_name = "channel_15_temp";
    izze_infared_tire_temperature_sensor_message_15.output.scalar.quantization = 0.1;
 800285a:	4b5e      	ldr	r3, [pc, #376]	; (80029d4 <init_can_sensors+0x514>)
 800285c:	4a57      	ldr	r2, [pc, #348]	; (80029bc <init_can_sensors+0x4fc>)
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_15.output.scalar.offset = -100;
 8002860:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <init_can_sensors+0x514>)
 8002862:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <init_can_sensors+0x504>)
 8002864:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_15.data_start = 4;
 8002866:	4b5b      	ldr	r3, [pc, #364]	; (80029d4 <init_can_sensors+0x514>)
 8002868:	2204      	movs	r2, #4
 800286a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_15.data_end = 5;
 800286e:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <init_can_sensors+0x514>)
 8002870:	2205      	movs	r2, #5
 8002872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    
    //SENSOR_CAN_MESSAGE izze_infared_tire_temperature_sensor_message_16;
    izze_infared_tire_temperature_sensor_message_16.message_id = 1203;
 8002876:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <init_can_sensors+0x518>)
 8002878:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800287c:	601a      	str	r2, [r3, #0]
    //izze_infared_tire_temperature_sensor_message_16.output.output_name = "channel_16_temp";
    izze_infared_tire_temperature_sensor_message_16.output.scalar.quantization = 0.1;
 800287e:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <init_can_sensors+0x518>)
 8002880:	4a4e      	ldr	r2, [pc, #312]	; (80029bc <init_can_sensors+0x4fc>)
 8002882:	639a      	str	r2, [r3, #56]	; 0x38
    izze_infared_tire_temperature_sensor_message_16.output.scalar.offset = -100;
 8002884:	4b54      	ldr	r3, [pc, #336]	; (80029d8 <init_can_sensors+0x518>)
 8002886:	4a4f      	ldr	r2, [pc, #316]	; (80029c4 <init_can_sensors+0x504>)
 8002888:	63da      	str	r2, [r3, #60]	; 0x3c
    izze_infared_tire_temperature_sensor_message_16.data_start = 6;
 800288a:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <init_can_sensors+0x518>)
 800288c:	2206      	movs	r2, #6
 800288e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    izze_infared_tire_temperature_sensor_message_16.data_end = 7;
 8002892:	4b51      	ldr	r3, [pc, #324]	; (80029d8 <init_can_sensors+0x518>)
 8002894:	2207      	movs	r2, #7
 8002896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    izze_infared_tire_temperature_sensor_messages[0] = izze_infared_tire_temperature_sensor_message_1;
 800289a:	4a50      	ldr	r2, [pc, #320]	; (80029dc <init_can_sensors+0x51c>)
 800289c:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <init_can_sensors+0x520>)
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	2348      	movs	r3, #72	; 0x48
 80028a4:	461a      	mov	r2, r3
 80028a6:	f007 fad3 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[1] = izze_infared_tire_temperature_sensor_message_2;
 80028aa:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <init_can_sensors+0x51c>)
 80028ac:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <init_can_sensors+0x524>)
 80028ae:	3348      	adds	r3, #72	; 0x48
 80028b0:	4611      	mov	r1, r2
 80028b2:	2248      	movs	r2, #72	; 0x48
 80028b4:	4618      	mov	r0, r3
 80028b6:	f007 facb 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[2] = izze_infared_tire_temperature_sensor_message_3;
 80028ba:	4b48      	ldr	r3, [pc, #288]	; (80029dc <init_can_sensors+0x51c>)
 80028bc:	4a4a      	ldr	r2, [pc, #296]	; (80029e8 <init_can_sensors+0x528>)
 80028be:	3390      	adds	r3, #144	; 0x90
 80028c0:	4611      	mov	r1, r2
 80028c2:	2248      	movs	r2, #72	; 0x48
 80028c4:	4618      	mov	r0, r3
 80028c6:	f007 fac3 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[3] = izze_infared_tire_temperature_sensor_message_4;
 80028ca:	4b44      	ldr	r3, [pc, #272]	; (80029dc <init_can_sensors+0x51c>)
 80028cc:	4a47      	ldr	r2, [pc, #284]	; (80029ec <init_can_sensors+0x52c>)
 80028ce:	33d8      	adds	r3, #216	; 0xd8
 80028d0:	4611      	mov	r1, r2
 80028d2:	2248      	movs	r2, #72	; 0x48
 80028d4:	4618      	mov	r0, r3
 80028d6:	f007 fabb 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[4] = izze_infared_tire_temperature_sensor_message_5;
 80028da:	4b40      	ldr	r3, [pc, #256]	; (80029dc <init_can_sensors+0x51c>)
 80028dc:	4a44      	ldr	r2, [pc, #272]	; (80029f0 <init_can_sensors+0x530>)
 80028de:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80028e2:	4611      	mov	r1, r2
 80028e4:	2248      	movs	r2, #72	; 0x48
 80028e6:	4618      	mov	r0, r3
 80028e8:	f007 fab2 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[5] = izze_infared_tire_temperature_sensor_message_6;
 80028ec:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <init_can_sensors+0x51c>)
 80028ee:	4a41      	ldr	r2, [pc, #260]	; (80029f4 <init_can_sensors+0x534>)
 80028f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028f4:	4611      	mov	r1, r2
 80028f6:	2248      	movs	r2, #72	; 0x48
 80028f8:	4618      	mov	r0, r3
 80028fa:	f007 faa9 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[6] = izze_infared_tire_temperature_sensor_message_7;
 80028fe:	4b37      	ldr	r3, [pc, #220]	; (80029dc <init_can_sensors+0x51c>)
 8002900:	4a3d      	ldr	r2, [pc, #244]	; (80029f8 <init_can_sensors+0x538>)
 8002902:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8002906:	4611      	mov	r1, r2
 8002908:	2248      	movs	r2, #72	; 0x48
 800290a:	4618      	mov	r0, r3
 800290c:	f007 faa0 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[7] = izze_infared_tire_temperature_sensor_message_8;
 8002910:	4b32      	ldr	r3, [pc, #200]	; (80029dc <init_can_sensors+0x51c>)
 8002912:	4a3a      	ldr	r2, [pc, #232]	; (80029fc <init_can_sensors+0x53c>)
 8002914:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002918:	4611      	mov	r1, r2
 800291a:	2248      	movs	r2, #72	; 0x48
 800291c:	4618      	mov	r0, r3
 800291e:	f007 fa97 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[8] = izze_infared_tire_temperature_sensor_message_9;
 8002922:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <init_can_sensors+0x51c>)
 8002924:	4a36      	ldr	r2, [pc, #216]	; (8002a00 <init_can_sensors+0x540>)
 8002926:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800292a:	4611      	mov	r1, r2
 800292c:	2248      	movs	r2, #72	; 0x48
 800292e:	4618      	mov	r0, r3
 8002930:	f007 fa8e 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[9] = izze_infared_tire_temperature_sensor_message_10;
 8002934:	4b29      	ldr	r3, [pc, #164]	; (80029dc <init_can_sensors+0x51c>)
 8002936:	4a33      	ldr	r2, [pc, #204]	; (8002a04 <init_can_sensors+0x544>)
 8002938:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800293c:	4611      	mov	r1, r2
 800293e:	2248      	movs	r2, #72	; 0x48
 8002940:	4618      	mov	r0, r3
 8002942:	f007 fa85 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[10] = izze_infared_tire_temperature_sensor_message_11;
 8002946:	4b25      	ldr	r3, [pc, #148]	; (80029dc <init_can_sensors+0x51c>)
 8002948:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <init_can_sensors+0x500>)
 800294a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800294e:	4611      	mov	r1, r2
 8002950:	2248      	movs	r2, #72	; 0x48
 8002952:	4618      	mov	r0, r3
 8002954:	f007 fa7c 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[11] = izze_infared_tire_temperature_sensor_message_12;
 8002958:	4b20      	ldr	r3, [pc, #128]	; (80029dc <init_can_sensors+0x51c>)
 800295a:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <init_can_sensors+0x508>)
 800295c:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002960:	4611      	mov	r1, r2
 8002962:	2248      	movs	r2, #72	; 0x48
 8002964:	4618      	mov	r0, r3
 8002966:	f007 fa73 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[12] = izze_infared_tire_temperature_sensor_message_13;
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <init_can_sensors+0x51c>)
 800296c:	4a17      	ldr	r2, [pc, #92]	; (80029cc <init_can_sensors+0x50c>)
 800296e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8002972:	4611      	mov	r1, r2
 8002974:	2248      	movs	r2, #72	; 0x48
 8002976:	4618      	mov	r0, r3
 8002978:	f007 fa6a 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[13] = izze_infared_tire_temperature_sensor_message_14;
 800297c:	4b17      	ldr	r3, [pc, #92]	; (80029dc <init_can_sensors+0x51c>)
 800297e:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <init_can_sensors+0x510>)
 8002980:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8002984:	4611      	mov	r1, r2
 8002986:	2248      	movs	r2, #72	; 0x48
 8002988:	4618      	mov	r0, r3
 800298a:	f007 fa61 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[14] = izze_infared_tire_temperature_sensor_message_15;
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <init_can_sensors+0x51c>)
 8002990:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <init_can_sensors+0x514>)
 8002992:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002996:	4611      	mov	r1, r2
 8002998:	2248      	movs	r2, #72	; 0x48
 800299a:	4618      	mov	r0, r3
 800299c:	f007 fa58 	bl	8009e50 <memcpy>
    izze_infared_tire_temperature_sensor_messages[15] = izze_infared_tire_temperature_sensor_message_16;
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <init_can_sensors+0x51c>)
 80029a2:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <init_can_sensors+0x518>)
 80029a4:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80029a8:	4611      	mov	r1, r2
 80029aa:	2248      	movs	r2, #72	; 0x48
 80029ac:	4618      	mov	r0, r3
 80029ae:	f007 fa4f 	bl	8009e50 <memcpy>
    
    izze_infared_tire_temperature_sensor.messages = izze_infared_tire_temperature_sensor_messages;
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <init_can_sensors+0x548>)
 80029b4:	4a09      	ldr	r2, [pc, #36]	; (80029dc <init_can_sensors+0x51c>)
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34


    
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	3dcccccd 	.word	0x3dcccccd
 80029c0:	200060a0 	.word	0x200060a0
 80029c4:	c2c80000 	.word	0xc2c80000
 80029c8:	20005f40 	.word	0x20005f40
 80029cc:	20006264 	.word	0x20006264
 80029d0:	20005ef8 	.word	0x20005ef8
 80029d4:	20005d00 	.word	0x20005d00
 80029d8:	2000652c 	.word	0x2000652c
 80029dc:	2000664c 	.word	0x2000664c
 80029e0:	20005e20 	.word	0x20005e20
 80029e4:	20005eb0 	.word	0x20005eb0
 80029e8:	200061d4 	.word	0x200061d4
 80029ec:	20006058 	.word	0x20006058
 80029f0:	20006acc 	.word	0x20006acc
 80029f4:	200062ac 	.word	0x200062ac
 80029f8:	20005d90 	.word	0x20005d90
 80029fc:	2000618c 	.word	0x2000618c
 8002a00:	20005d48 	.word	0x20005d48
 8002a04:	20006574 	.word	0x20006574
 8002a08:	20006388 	.word	0x20006388

08002a0c <init_sensor_hal>:
#define TIM_CLOCK_BASE_FREQ 16000000
#define TIM_MAX_VAL 65536


//************ Initialize the library ****************
void init_sensor_hal (void) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
    init_analog_sensors();
 8002a10:	f7ff fc9e 	bl	8002350 <init_analog_sensors>
    init_can_sensors();
 8002a14:	f7ff fd54 	bl	80024c0 <init_can_sensors>
    init_adc1_params();
 8002a18:	f7ff f9fe 	bl	8001e18 <init_adc1_params>
    init_adc2_params();
 8002a1c:	f7ff faaa 	bl	8001f74 <init_adc2_params>
    init_adc3_params();
 8002a20:	f7ff fab0 	bl	8001f84 <init_adc3_params>
    init_can_params();
 8002a24:	f7ff faee 	bl	8002004 <init_can_params>
    init_buckets();
 8002a28:	f7ff fbf4 	bl	8002214 <init_buckets>
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <configLibADC>:

//******************* ADC Config *******************
void configLibADC(ADC_HandleTypeDef* ad1, ADC_HandleTypeDef* ad2, ADC_HandleTypeDef* ad3)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
    adc1 = ad1;
 8002a3c:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <configLibADC+0x2c>)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6013      	str	r3, [r2, #0]
    adc2 = ad2;
 8002a42:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <configLibADC+0x30>)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6013      	str	r3, [r2, #0]
    adc3 = ad3;
 8002a48:	4a06      	ldr	r2, [pc, #24]	; (8002a64 <configLibADC+0x34>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20006b20 	.word	0x20006b20
 8002a60:	20006b24 	.word	0x20006b24
 8002a64:	20006b28 	.word	0x20006b28

08002a68 <HAL_ADC_ConvCpltCallback>:

void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *adc_handle){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
    // stop the DMA and start the timer
    HAL_ADC_Stop_DMA(adc_handle);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f001 fd2b 	bl	80044cc <HAL_ADC_Stop_DMA>
    U16_BUFFER* buf;

    if (adc_handle == adc1) {
 8002a76:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <HAL_ADC_ConvCpltCallback+0xcc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d121      	bne.n	8002ac4 <HAL_ADC_ConvCpltCallback+0x5c>
        HAL_TIM_Base_Start_IT(adc1_timer);
 8002a80:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f004 f9cc 	bl	8006e22 <HAL_TIM_Base_Start_IT>
        for (U8 i = 0; i < NUM_ADC1_PARAMS; i++) {
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
 8002a8e:	e015      	b.n	8002abc <HAL_ADC_ConvCpltCallback+0x54>
            buf = &adc1_sensor_params[i].buffer;
 8002a90:	7dfa      	ldrb	r2, [r7, #23]
 8002a92:	4613      	mov	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4413      	add	r3, r2
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	33b0      	adds	r3, #176	; 0xb0
 8002a9c:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <HAL_ADC_ConvCpltCallback+0xd4>)
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	613b      	str	r3, [r7, #16]
            add_to_buffer(buf, adc1_sample_buffer[i]);
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
 8002aa6:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6938      	ldr	r0, [r7, #16]
 8002ab2:	f000 fa45 	bl	8002f40 <add_to_buffer>
        for (U8 i = 0; i < NUM_ADC1_PARAMS; i++) {
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	75fb      	strb	r3, [r7, #23]
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d9e6      	bls.n	8002a90 <HAL_ADC_ConvCpltCallback+0x28>
        for (U8 i = 0; i < NUM_ADC3_PARAMS; i++) {
            buf = &adc3_sensor_params[i].buffer;
            add_to_buffer(buf, adc3_sample_buffer[i]);
        }
    }
}
 8002ac2:	e033      	b.n	8002b2c <HAL_ADC_ConvCpltCallback+0xc4>
    else if (adc_handle == adc2) {
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <HAL_ADC_ConvCpltCallback+0xdc>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d108      	bne.n	8002ae0 <HAL_ADC_ConvCpltCallback+0x78>
        HAL_TIM_Base_Start_IT(adc2_timer);
 8002ace:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 f9a5 	bl	8006e22 <HAL_TIM_Base_Start_IT>
        for (U8 i = 0; i < NUM_ADC2_PARAMS; i++) {
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	bf00      	nop
}
 8002ade:	e025      	b.n	8002b2c <HAL_ADC_ConvCpltCallback+0xc4>
    else if (adc_handle == adc3) {
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <HAL_ADC_ConvCpltCallback+0xe4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d120      	bne.n	8002b2c <HAL_ADC_ConvCpltCallback+0xc4>
        HAL_TIM_Base_Start_IT(adc3_timer);
 8002aea:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 f997 	bl	8006e22 <HAL_TIM_Base_Start_IT>
        for (U8 i = 0; i < NUM_ADC3_PARAMS; i++) {
 8002af4:	2300      	movs	r3, #0
 8002af6:	75bb      	strb	r3, [r7, #22]
 8002af8:	e015      	b.n	8002b26 <HAL_ADC_ConvCpltCallback+0xbe>
            buf = &adc3_sensor_params[i].buffer;
 8002afa:	7dba      	ldrb	r2, [r7, #22]
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	019b      	lsls	r3, r3, #6
 8002b04:	33b0      	adds	r3, #176	; 0xb0
 8002b06:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <HAL_ADC_ConvCpltCallback+0xec>)
 8002b08:	4413      	add	r3, r2
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	613b      	str	r3, [r7, #16]
            add_to_buffer(buf, adc3_sample_buffer[i]);
 8002b0e:	7dbb      	ldrb	r3, [r7, #22]
 8002b10:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6938      	ldr	r0, [r7, #16]
 8002b1c:	f000 fa10 	bl	8002f40 <add_to_buffer>
        for (U8 i = 0; i < NUM_ADC3_PARAMS; i++) {
 8002b20:	7dbb      	ldrb	r3, [r7, #22]
 8002b22:	3301      	adds	r3, #1
 8002b24:	75bb      	strb	r3, [r7, #22]
 8002b26:	7dbb      	ldrb	r3, [r7, #22]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0e6      	beq.n	8002afa <HAL_ADC_ConvCpltCallback+0x92>
}
 8002b2c:	bf00      	nop
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20006b20 	.word	0x20006b20
 8002b38:	20006b1c 	.word	0x20006b1c
 8002b3c:	20004f40 	.word	0x20004f40
 8002b40:	20000134 	.word	0x20000134
 8002b44:	20006b24 	.word	0x20006b24
 8002b48:	20006b18 	.word	0x20006b18
 8002b4c:	20006b28 	.word	0x20006b28
 8002b50:	20006b14 	.word	0x20006b14
 8002b54:	20004dd8 	.word	0x20004dd8
 8002b58:	20000138 	.word	0x20000138

08002b5c <configLibTIM>:

//******************* Timer interaction *******************
void configLibTIM(TIM_HandleTypeDef* t1, U16 t1_freq,
                  TIM_HandleTypeDef* t2, U16 t2_freq,
                  TIM_HandleTypeDef* t3, U16 t3_freq, U16 psc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	461a      	mov	r2, r3
 8002b68:	460b      	mov	r3, r1
 8002b6a:	817b      	strh	r3, [r7, #10]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	813b      	strh	r3, [r7, #8]
    adc1_timer = t1;
 8002b70:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <configLibTIM+0x58>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6013      	str	r3, [r2, #0]
    adc2_timer = t2;
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <configLibTIM+0x5c>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6013      	str	r3, [r2, #0]
    adc3_timer = t3;
 8002b7c:	4a0f      	ldr	r2, [pc, #60]	; (8002bbc <configLibTIM+0x60>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	6013      	str	r3, [r2, #0]
    configTimer(adc1_timer, psc, t1_freq);
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <configLibTIM+0x58>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	897a      	ldrh	r2, [r7, #10]
 8002b88:	8c39      	ldrh	r1, [r7, #32]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f818 	bl	8002bc0 <configTimer>
    configTimer(adc2_timer, psc, t2_freq);
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <configLibTIM+0x5c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	893a      	ldrh	r2, [r7, #8]
 8002b96:	8c39      	ldrh	r1, [r7, #32]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f811 	bl	8002bc0 <configTimer>
    configTimer(adc3_timer, psc, t3_freq);
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <configLibTIM+0x60>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	8bba      	ldrh	r2, [r7, #28]
 8002ba4:	8c39      	ldrh	r1, [r7, #32]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f80a 	bl	8002bc0 <configTimer>
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20006b1c 	.word	0x20006b1c
 8002bb8:	20006b18 	.word	0x20006b18
 8002bbc:	20006b14 	.word	0x20006b14

08002bc0 <configTimer>:


void configTimer(TIM_HandleTypeDef* timer, U16 psc,  U16 timer_int_freq_hz) {
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	803b      	strh	r3, [r7, #0]
    __HAL_TIM_DISABLE(timer);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a1a      	ldr	r2, [r3, #32]
 8002bd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10f      	bne.n	8002c00 <configTimer+0x40>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6a1a      	ldr	r2, [r3, #32]
 8002be6:	f240 4344 	movw	r3, #1092	; 0x444
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <configTimer+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(timer, 0);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2200      	movs	r2, #0
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24
    // Maybe look at this?
    U32 reload;
    do {
        reload = (TIM_CLOCK_BASE_FREQ/psc) / timer_int_freq_hz;
 8002c08:	887b      	ldrh	r3, [r7, #2]
 8002c0a:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <configTimer+0x98>)
 8002c0c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002c10:	883b      	ldrh	r3, [r7, #0]
 8002c12:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c16:	60fb      	str	r3, [r7, #12]
        psc *= 2;
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	807b      	strh	r3, [r7, #2]
    } while (reload > TIM_MAX_VAL);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c24:	d8f0      	bhi.n	8002c08 <configTimer+0x48>

    __HAL_TIM_SET_PRESCALER(timer, psc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_TIM_SET_AUTORELOAD(timer, reload);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE(timer);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	00f42400 	.word	0x00f42400

08002c5c <startTimers>:


void startTimers (void) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(adc1_timer);
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <startTimers+0x28>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f004 f8dc 	bl	8006e22 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(adc2_timer);
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <startTimers+0x2c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f004 f8d7 	bl	8006e22 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(adc3_timer);
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <startTimers+0x30>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 f8d2 	bl	8006e22 <HAL_TIM_Base_Start_IT>
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20006b1c 	.word	0x20006b1c
 8002c88:	20006b18 	.word	0x20006b18
 8002c8c:	20006b14 	.word	0x20006b14

08002c90 <stopTimers>:


void stopTimers (void) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(adc1_timer);
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <stopTimers+0x44>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f004 f8e6 	bl	8006e6a <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(adc2_timer);
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <stopTimers+0x48>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 f8e1 	bl	8006e6a <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(adc3_timer);
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <stopTimers+0x4c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f004 f8dc 	bl	8006e6a <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_SET_COUNTER(adc1_timer, 0);
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <stopTimers+0x44>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(adc2_timer, 0);
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <stopTimers+0x48>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(adc3_timer, 0);
 8002cc6:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <stopTimers+0x4c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002cd0:	bf00      	nop
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20006b1c 	.word	0x20006b1c
 8002cd8:	20006b18 	.word	0x20006b18
 8002cdc:	20006b14 	.word	0x20006b14

08002ce0 <DAQ_TimerCallback>:


// Call this inside the period elapsed callback
void DAQ_TimerCallback (TIM_HandleTypeDef* timer) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

    HAL_TIM_Base_Stop_IT(timer);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f004 f8be 	bl	8006e6a <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_SET_COUNTER(timer, 0);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

    if (timer == adc1_timer) {
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <DAQ_TimerCallback+0x6c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d107      	bne.n	8002d10 <DAQ_TimerCallback+0x30>
        HAL_ADC_Start_DMA(adc1, (uint32_t*)adc1_sample_buffer, NUM_ADC1_PARAMS);
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <DAQ_TimerCallback+0x70>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2202      	movs	r2, #2
 8002d06:	4913      	ldr	r1, [pc, #76]	; (8002d54 <DAQ_TimerCallback+0x74>)
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 faed 	bl	80042e8 <HAL_ADC_Start_DMA>
        HAL_ADC_Start_DMA(adc2, (uint32_t*)adc2_sample_buffer, NUM_ADC2_PARAMS);
    }
    else if (timer == adc3_timer) {
        HAL_ADC_Start_DMA(adc3, (uint32_t*)adc3_sample_buffer, NUM_ADC3_PARAMS);
    }
}
 8002d0e:	e018      	b.n	8002d42 <DAQ_TimerCallback+0x62>
    else if (timer == adc2_timer) {
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <DAQ_TimerCallback+0x78>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d107      	bne.n	8002d2a <DAQ_TimerCallback+0x4a>
        HAL_ADC_Start_DMA(adc2, (uint32_t*)adc2_sample_buffer, NUM_ADC2_PARAMS);
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <DAQ_TimerCallback+0x7c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	490f      	ldr	r1, [pc, #60]	; (8002d60 <DAQ_TimerCallback+0x80>)
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 fae0 	bl	80042e8 <HAL_ADC_Start_DMA>
}
 8002d28:	e00b      	b.n	8002d42 <DAQ_TimerCallback+0x62>
    else if (timer == adc3_timer) {
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <DAQ_TimerCallback+0x84>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d106      	bne.n	8002d42 <DAQ_TimerCallback+0x62>
        HAL_ADC_Start_DMA(adc3, (uint32_t*)adc3_sample_buffer, NUM_ADC3_PARAMS);
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <DAQ_TimerCallback+0x88>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	490c      	ldr	r1, [pc, #48]	; (8002d6c <DAQ_TimerCallback+0x8c>)
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 fad3 	bl	80042e8 <HAL_ADC_Start_DMA>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20006b1c 	.word	0x20006b1c
 8002d50:	20006b20 	.word	0x20006b20
 8002d54:	20000134 	.word	0x20000134
 8002d58:	20006b18 	.word	0x20006b18
 8002d5c:	20006b24 	.word	0x20006b24
 8002d60:	20000138 	.word	0x20000138
 8002d64:	20006b14 	.word	0x20006b14
 8002d68:	20006b28 	.word	0x20006b28
 8002d6c:	20000138 	.word	0x20000138

08002d70 <sensor_can_message_handle>:

//******************* CAN Handling *******************

// Redesign option: pull this into a queue and handle not in an ISR
void sensor_can_message_handle (CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 8002d70:	b5b0      	push	{r4, r5, r7, lr}
 8002d72:	b0b2      	sub	sp, #200	; 0xc8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
    CAN_RxHeaderTypeDef rx_header;
    CAN_MSG message;

    // Get the message
    if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message.data) != HAL_OK) {
 8002d7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d7e:	3306      	adds	r3, #6
 8002d80:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002d84:	6839      	ldr	r1, [r7, #0]
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f002 f9f2 	bl	8005170 <HAL_CAN_GetRxMessage>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 80b5 	bne.w	8002efe <sensor_can_message_handle+0x18e>
        // Handle errors ?
        return;
    }
    message.rtr_bit = rx_header.RTR;
 8002d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    message.id = rx_header.ExtId;
 8002d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002da2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    message.dlc = rx_header.DLC;
 8002da6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

    // Check the CAN params for a match
    for (U8 i = 0; i < NUM_CAN_SENSOR_PARAMS; i++) {
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8002db6:	e09c      	b.n	8002ef2 <sensor_can_message_handle+0x182>

        CAN_SENSOR_PARAM* param = &can_sensor_params[i];
 8002db8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002dbc:	2268      	movs	r2, #104	; 0x68
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	4a51      	ldr	r2, [pc, #324]	; (8002f08 <sensor_can_message_handle+0x198>)
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        CAN_SENSOR sensor = param->can_sensor;
 8002dca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dce:	f107 040c 	add.w	r4, r7, #12
 8002dd2:	f103 0518 	add.w	r5, r3, #24
 8002dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002de2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002de6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        SENSOR_CAN_MESSAGE can_info = sensor.messages[param->message_idx];
 8002dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002df0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002df4:	4619      	mov	r1, r3
 8002df6:	460b      	mov	r3, r1
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	440b      	add	r3, r1
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	441a      	add	r2, r3
 8002e00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e04:	4611      	mov	r1, r2
 8002e06:	2248      	movs	r2, #72	; 0x48
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f007 f821 	bl	8009e50 <memcpy>

        // check for ID match between this param message id and the message id
        if (can_info.message_id == message.id) {
 8002e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d167      	bne.n	8002ee8 <sensor_can_message_handle+0x178>
            U16 data = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
            U8 shift = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
            // Get correct data based on byte order
            if (sensor.byte_order == LSB) {
 8002e24:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d128      	bne.n	8002e7e <sensor_can_message_handle+0x10e>

                for (U8 b = can_info.data_start; b <= can_info.data_end; b++) {
 8002e2c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002e30:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8002e34:	e01c      	b.n	8002e70 <sensor_can_message_handle+0x100>
                    data &= message.data[b] << shift;
 8002e36:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8002e3a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002e3e:	4413      	add	r3, r2
 8002e40:	f813 3c32 	ldrb.w	r3, [r3, #-50]
 8002e44:	461a      	mov	r2, r3
 8002e46:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	b21a      	sxth	r2, r3
 8002e50:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8002e54:	4013      	ands	r3, r2
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
                    shift += 8;
 8002e5c:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8002e60:	3308      	adds	r3, #8
 8002e62:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                for (U8 b = can_info.data_start; b <= can_info.data_end; b++) {
 8002e66:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8002e70:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002e74:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d9dc      	bls.n	8002e36 <sensor_can_message_handle+0xc6>
 8002e7c:	e02b      	b.n	8002ed6 <sensor_can_message_handle+0x166>
                }
            }

            else if (sensor.byte_order == MSB) {
 8002e7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d127      	bne.n	8002ed6 <sensor_can_message_handle+0x166>
                for (U8 b = can_info.data_end; b >= can_info.data_start; b--) {
 8002e86:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002e8a:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 8002e8e:	e01c      	b.n	8002eca <sensor_can_message_handle+0x15a>
                    data &= message.data[b] << shift;
 8002e90:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8002e94:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002e98:	4413      	add	r3, r2
 8002e9a:	f813 3c32 	ldrb.w	r3, [r3, #-50]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	b21a      	sxth	r2, r3
 8002eaa:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8002eae:	4013      	ands	r3, r2
 8002eb0:	b21b      	sxth	r3, r3
 8002eb2:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
                    shift += 8;
 8002eb6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8002eba:	3308      	adds	r3, #8
 8002ebc:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                for (U8 b = can_info.data_end; b >= can_info.data_start; b--) {
 8002ec0:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 8002eca:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002ece:	f897 20c1 	ldrb.w	r2, [r7, #193]	; 0xc1
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d2dc      	bcs.n	8002e90 <sensor_can_message_handle+0x120>
                }
            }
            // Add the data to the buffer
            add_to_buffer(&param->buffer, data);
 8002ed6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002eda:	3360      	adds	r3, #96	; 0x60
 8002edc:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f82c 	bl	8002f40 <add_to_buffer>
    for (U8 i = 0; i < NUM_CAN_SENSOR_PARAMS; i++) {
 8002ee8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002eec:	3301      	adds	r3, #1
 8002eee:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8002ef2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	f67f af5e 	bls.w	8002db8 <sensor_can_message_handle+0x48>
 8002efc:	e000      	b.n	8002f00 <sensor_can_message_handle+0x190>
        return;
 8002efe:	bf00      	nop

        }
    }
}
 8002f00:	37c8      	adds	r7, #200	; 0xc8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bdb0      	pop	{r4, r5, r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20005900 	.word	0x20005900

08002f0c <buffer_full>:

//******************* Buffer interaction *******************

// Note: Semaphore probably not needed for buffer interaction because reset is atomic

S8 buffer_full (U16_BUFFER* buffer) {
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
    if (buffer == NULL) {
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <buffer_full+0x14>
        return BUFFER_ERR;
 8002f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1e:	e009      	b.n	8002f34 <buffer_full+0x28>
    }
    return buffer->fill_level == buffer->buffer_size;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	88da      	ldrh	r2, [r3, #6]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	889b      	ldrh	r3, [r3, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	b25b      	sxtb	r3, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <add_to_buffer>:

S8 add_to_buffer (U16_BUFFER* buffer, U16 toadd) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
    if (buffer == NULL) {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <add_to_buffer+0x18>
        return BUFFER_ERR;
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295
 8002f56:	e017      	b.n	8002f88 <add_to_buffer+0x48>
    }

    if (buffer_full(buffer)) {
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ffd7 	bl	8002f0c <buffer_full>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <add_to_buffer+0x2a>
        return BUFFER_ERR;
 8002f64:	f04f 33ff 	mov.w	r3, #4294967295
 8002f68:	e00e      	b.n	8002f88 <add_to_buffer+0x48>
    }

    buffer->buffer[buffer->fill_level] = toadd;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	88db      	ldrh	r3, [r3, #6]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	801a      	strh	r2, [r3, #0]
    buffer->fill_level++;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	88db      	ldrh	r3, [r3, #6]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	80da      	strh	r2, [r3, #6]
    return BUFFER_SUCCESS;
 8002f86:	2301      	movs	r3, #1
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <reset_buffer>:

S8 reset_buffer (U16_BUFFER* buffer) {
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    if (buffer == NULL) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <reset_buffer+0x14>
        return BUFFER_ERR;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	e003      	b.n	8002fac <reset_buffer+0x1c>
    }

    buffer->fill_level = 0;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	80da      	strh	r2, [r3, #6]
    return BUFFER_SUCCESS;
 8002faa:	2301      	movs	r3, #1
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <average_buffer>:

// Could average up to the fill level, returns error for now
S8 average_buffer (U16_BUFFER* buffer, U16* avg) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
    if (buffer == NULL || !buffer_full(buffer)) {
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <average_buffer+0x1c>
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ff9f 	bl	8002f0c <buffer_full>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <average_buffer+0x22>
        return BUFFER_ERR;
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd8:	e01e      	b.n	8003018 <average_buffer+0x60>
    }
    U16 calc_avg = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	81fb      	strh	r3, [r7, #14]
    for (U16 i = 0; i < buffer->buffer_size; i++) {
 8002fde:	2300      	movs	r3, #0
 8002fe0:	81bb      	strh	r3, [r7, #12]
 8002fe2:	e00b      	b.n	8002ffc <average_buffer+0x44>
        calc_avg += buffer->buffer[i];
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	89bb      	ldrh	r3, [r7, #12]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	881a      	ldrh	r2, [r3, #0]
 8002ff0:	89fb      	ldrh	r3, [r7, #14]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	81fb      	strh	r3, [r7, #14]
    for (U16 i = 0; i < buffer->buffer_size; i++) {
 8002ff6:	89bb      	ldrh	r3, [r7, #12]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	81bb      	strh	r3, [r7, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	889b      	ldrh	r3, [r3, #4]
 8003000:	89ba      	ldrh	r2, [r7, #12]
 8003002:	429a      	cmp	r2, r3
 8003004:	d3ee      	bcc.n	8002fe4 <average_buffer+0x2c>
    }

    *avg = calc_avg / buffer->buffer_size;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	889b      	ldrh	r3, [r3, #4]
 800300a:	89fa      	ldrh	r2, [r7, #14]
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	b29a      	uxth	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	801a      	strh	r2, [r3, #0]
    return BUFFER_SUCCESS;
 8003016:	2301      	movs	r3, #1

}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <apply_can_sensor_conversion>:


S8 apply_can_sensor_conversion (CAN_SENSOR* sensor, U8 msg_idx, float data_in, float* data_out) {
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	460b      	mov	r3, r1
 800302a:	ed87 0a01 	vstr	s0, [r7, #4]
 800302e:	603a      	str	r2, [r7, #0]
 8003030:	72fb      	strb	r3, [r7, #11]
    // TODO: Data conversion specifics
    *data_out = data_in;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	601a      	str	r2, [r3, #0]
    return BUFFER_SUCCESS;
 8003038:	2301      	movs	r3, #1
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <apply_analog_sensor_conversion>:

S8 apply_analog_sensor_conversion (ANALOG_SENSOR* sensor, float data_in, float* data_out) {
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003052:	6079      	str	r1, [r7, #4]
    // TODO: Data conversion specifics
    *data_out = data_in;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	601a      	str	r2, [r3, #0]
    return BUFFER_SUCCESS;
 800305a:	2301      	movs	r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <apply_filter>:

S8 apply_filter (U16_BUFFER* buffer, FILTERED_PARAM* filter) {
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
    // TODO - figure out how to do software filtering
    return BUFFER_SUCCESS;
 8003072:	2301      	movs	r3, #1
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <init_can>:
// params:
//  MODULE_ID module_id: what module this is (ex. PDM_ID, ACM_ID)
// returns:
//  error codes specified in GopherCAN.h
S8 init_can(CAN_HandleTypeDef* hcan, MODULE_ID module_id, BXCAN_TYPE bx_type)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	70fb      	strb	r3, [r7, #3]
 800308c:	4613      	mov	r3, r2
 800308e:	70bb      	strb	r3, [r7, #2]
	U8 c;

	// set the current module
	this_module_id = module_id;
 8003090:	4a35      	ldr	r2, [pc, #212]	; (8003168 <init_can+0xe8>)
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	7013      	strb	r3, [r2, #0]


	// init HAL_GetTick()
	HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 8003096:	2001      	movs	r0, #1
 8003098:	f000 ff7a 	bl	8003f90 <HAL_SetTickFreq>

	// setup the two buffers
	init_buffer(&rx_buffer, rx_buffer_mem, RX_BUFFER_SIZE);
 800309c:	2220      	movs	r2, #32
 800309e:	4933      	ldr	r1, [pc, #204]	; (800316c <init_can+0xec>)
 80030a0:	4833      	ldr	r0, [pc, #204]	; (8003170 <init_can+0xf0>)
 80030a2:	f000 fe59 	bl	8003d58 <init_buffer>
	init_buffer(&tx_buffer, tx_buffer_mem, TX_BUFFER_SIZE);
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	4932      	ldr	r1, [pc, #200]	; (8003174 <init_can+0xf4>)
 80030aa:	4833      	ldr	r0, [pc, #204]	; (8003178 <init_can+0xf8>)
 80030ac:	f000 fe54 	bl	8003d58 <init_buffer>
	init_buffer(&tx_buffer_2, tx_buffer_mem_2, TX_BUFFER_SIZE);
#endif // NUM_OF_BUSSES > 2
#endif // MULTI_BUS

	// init all of the parameter data
	init_all_params();
 80030b0:	f000 f868 	bl	8003184 <init_all_params>

	// set each function pointer to the do_nothing() function
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	e01f      	b.n	80030fa <init_can+0x7a>
	{
		cust_funcs[c].func_ptr = &do_nothing;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	492f      	ldr	r1, [pc, #188]	; (800317c <init_can+0xfc>)
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	4a2d      	ldr	r2, [pc, #180]	; (8003180 <init_can+0x100>)
 80030ca:	601a      	str	r2, [r3, #0]
		cust_funcs[c].func_enabled = FALSE;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	492b      	ldr	r1, [pc, #172]	; (800317c <init_can+0xfc>)
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	3304      	adds	r3, #4
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
		cust_funcs[c].param_ptr = NULL;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	4926      	ldr	r1, [pc, #152]	; (800317c <init_can+0xfc>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3308      	adds	r3, #8
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	3301      	adds	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d9dc      	bls.n	80030ba <init_can+0x3a>

	}

	if (init_filters(hcan, bx_type))
 8003100:	78bb      	ldrb	r3, [r7, #2]
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f869 	bl	80031dc <init_filters>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <init_can+0x96>
	{
		return FILTER_SET_FAILED;
 8003110:	f06f 0304 	mvn.w	r3, #4
 8003114:	e024      	b.n	8003160 <init_can+0xe0>
	}

	// Setup the rx interrupt function to interrupt on any pending message
	// will call methods following the format HAL_CAN_xxxCallback()
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK
 8003116:	2102      	movs	r1, #2
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f002 f963 	bl	80053e4 <HAL_CAN_ActivateNotification>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <init_can+0xb2>
			|| HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8003124:	2110      	movs	r1, #16
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f002 f95c 	bl	80053e4 <HAL_CAN_ActivateNotification>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <init_can+0xb8>
	{
		return IRQ_SET_FAILED;
 8003132:	f06f 0305 	mvn.w	r3, #5
 8003136:	e013      	b.n	8003160 <init_can+0xe0>
	}

	// The F7xx includes interrupts for when a message is complete. Activate them here
#if TARGET == F7XX || TARGET == F4XX
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8003138:	2101      	movs	r1, #1
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f002 f952 	bl	80053e4 <HAL_CAN_ActivateNotification>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <init_can+0xcc>
	{
		return IRQ_SET_FAILED;
 8003146:	f06f 0305 	mvn.w	r3, #5
 800314a:	e009      	b.n	8003160 <init_can+0xe0>
	}
#endif // TARGET == F7XX || TARGET == F4XX

	// start can!
	if (HAL_CAN_Start(hcan) != HAL_OK)
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f001 febb 	bl	8004ec8 <HAL_CAN_Start>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <init_can+0xde>
	{
		return CAN_START_FAILED;
 8003158:	f06f 0306 	mvn.w	r3, #6
 800315c:	e000      	b.n	8003160 <init_can+0xe0>
	}

	return CAN_SUCCESS;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200071b4 	.word	0x200071b4
 800316c:	20006b38 	.word	0x20006b38
 8003170:	20006d38 	.word	0x20006d38
 8003174:	20006d40 	.word	0x20006d40
 8003178:	20007140 	.word	0x20007140
 800317c:	20007148 	.word	0x20007148
 8003180:	08003d35 	.word	0x08003d35

08003184 <init_all_params>:


// init_all_params
//  function to run through each parameter and set the default data in the struct
static void init_all_params(void)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
	U16 c;
	CAN_INFO_STRUCT* data_struct;

	// set the param id for CAN commands
	can_command.param_id = CAN_COMMAND_ID;
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <init_all_params+0x50>)
 800318c:	2200      	movs	r2, #0
 800318e:	719a      	strb	r2, [r3, #6]

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8003190:	2301      	movs	r3, #1
 8003192:	80fb      	strh	r3, [r7, #6]
 8003194:	e014      	b.n	80031c0 <init_all_params+0x3c>
	{
		data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[c]);
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	4a0f      	ldr	r2, [pc, #60]	; (80031d8 <init_all_params+0x54>)
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	603b      	str	r3, [r7, #0]

		data_struct->last_rx = 0;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
		data_struct->update_enabled = FALSE;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2200      	movs	r2, #0
 80031aa:	711a      	strb	r2, [r3, #4]
		data_struct->pending_response = FALSE;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	715a      	strb	r2, [r3, #5]

		// set the ID for each parameter
		data_struct->param_id = c;
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	719a      	strb	r2, [r3, #6]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	3301      	adds	r3, #1
 80031be:	80fb      	strh	r3, [r7, #6]
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	2b14      	cmp	r3, #20
 80031c4:	d9e7      	bls.n	8003196 <init_all_params+0x12>
	}
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	200071e4 	.word	0x200071e4
 80031d8:	20000024 	.word	0x20000024

080031dc <init_filters>:


// init_filters
//  function called within init() that sets up all of the filters
static S8 init_filters(CAN_HandleTypeDef* hcan, BXCAN_TYPE bx_type)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b092      	sub	sp, #72	; 0x48
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
	CAN_FilterTypeDef filterConfig;
	U8 banknum = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (bx_type == BXTYPE_SLAVE)
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d102      	bne.n	80031fa <init_filters+0x1e>
	{
		banknum = SLAVE_FIRST_FILTER;
 80031f4:	230e      	movs	r3, #14
 80031f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	U32 filt_id_high;
	U32 filt_mask_high;
	U32 filt_mask_low;

	// get the correct bits from the id and mask for each part of the ID.
	filt_id_high = GET_ID_HIGH(this_module_id << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 80031fa:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <init_filters+0x10c>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	065b      	lsls	r3, r3, #25
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	643b      	str	r3, [r7, #64]	; 0x40
	filt_id_low = GET_ID_LOW(this_module_id << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 8003204:	2304      	movs	r3, #4
 8003206:	63fb      	str	r3, [r7, #60]	; 0x3c
	filt_mask_high = GET_ID_HIGH(DEST_MASK);
 8003208:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 800320c:	63bb      	str	r3, [r7, #56]	; 0x38
    filt_mask_low = GET_ID_LOW(DEST_MASK);
 800320e:	2304      	movs	r3, #4
 8003210:	637b      	str	r3, [r7, #52]	; 0x34

	// Set the the parameters on the filter struct (FIFO0)
	filterConfig.FilterBank = banknum;                                // Modify bank 0 (of 13)
 8003212:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003216:	623b      	str	r3, [r7, #32]
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;                // enable the filter
 8003218:	2301      	movs	r3, #1
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;             // use FIFO0
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;                  // Use mask mode to filter
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;                 // 32 bit mask
 8003224:	2301      	movs	r3, #1
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
	filterConfig.FilterIdLow = filt_id_low;                           // Low bound of accepted values
 8003228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322a:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = filt_id_high;                         // High bound of accepted values
 800322c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322e:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = filt_mask_low;                     // Which bits matter when filtering (high)
 8003230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003232:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = filt_mask_high;                   // Which bits matter when filtering (low)
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8003238:	f107 030c 	add.w	r3, r7, #12
 800323c:	4619      	mov	r1, r3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f001 fd62 	bl	8004d08 <HAL_CAN_ConfigFilter>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <init_filters+0x74>
	{
		return FILTER_SET_FAILED;
 800324a:	f06f 0304 	mvn.w	r3, #4
 800324e:	e047      	b.n	80032e0 <init_filters+0x104>
	}

	// Set the the parameters on the filter struct (FIFO1)
	// all other parameters are the same as FIFO0
	filterConfig.FilterBank = banknum + 1;                            // Modify bank 1 (of 13)
 8003250:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003254:	3301      	adds	r3, #1
 8003256:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;             // use FIFO1
 8003258:	2301      	movs	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 800325c:	f107 030c 	add.w	r3, r7, #12
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f001 fd50 	bl	8004d08 <HAL_CAN_ConfigFilter>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <init_filters+0x98>
	{
		return FILTER_SET_FAILED;
 800326e:	f06f 0304 	mvn.w	r3, #4
 8003272:	e035      	b.n	80032e0 <init_filters+0x104>
	}

	// get the correct bits from the id and mask for each part of the ID for adding the general CAN ID
	filt_id_high = GET_ID_HIGH(ALL_MODULES_ID << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 8003274:	2300      	movs	r3, #0
 8003276:	643b      	str	r3, [r7, #64]	; 0x40
	filt_id_low = GET_ID_LOW(ALL_MODULES_ID << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 8003278:	2304      	movs	r3, #4
 800327a:	63fb      	str	r3, [r7, #60]	; 0x3c
	filt_mask_high = GET_ID_HIGH(DEST_MASK);
 800327c:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38
	filt_mask_low = GET_ID_LOW(DEST_MASK);
 8003282:	2304      	movs	r3, #4
 8003284:	637b      	str	r3, [r7, #52]	; 0x34

	// Set the the parameters on the filter struct (FIFO0)
	filterConfig.FilterBank = banknum + 2;                            // Modify bank 2 (of 13)
 8003286:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800328a:	3302      	adds	r3, #2
 800328c:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;             // use FIFO0
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterIdLow = filt_id_low;                           // Low bound of accepted values
 8003292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003294:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = filt_id_high;                         // High bound of accepted values
 8003296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003298:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = filt_mask_low;                     // Which bits matter when filtering (high)
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = filt_mask_high;                   // Which bits matter when filtering (low)
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80032a2:	f107 030c 	add.w	r3, r7, #12
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f001 fd2d 	bl	8004d08 <HAL_CAN_ConfigFilter>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <init_filters+0xde>
	{
		return FILTER_SET_FAILED;
 80032b4:	f06f 0304 	mvn.w	r3, #4
 80032b8:	e012      	b.n	80032e0 <init_filters+0x104>
	}

	// Set the the parameters on the filter struct (FIFO1)
	// all other parameters are the same as FIFO0
	filterConfig.FilterBank = banknum + 3;                            // Modify bank 3 (of 13)
 80032ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032be:	3303      	adds	r3, #3
 80032c0:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;             // use FIFO1
 80032c2:	2301      	movs	r3, #1
 80032c4:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f001 fd1b 	bl	8004d08 <HAL_CAN_ConfigFilter>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <init_filters+0x102>
	{
		return FILTER_SET_FAILED;
 80032d8:	f06f 0304 	mvn.w	r3, #4
 80032dc:	e000      	b.n	80032e0 <init_filters+0x104>
	}
#endif // CAN_ROUTER

	return CAN_SUCCESS;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3748      	adds	r7, #72	; 0x48
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	200071b4 	.word	0x200071b4

080032ec <HAL_CAN_RxFifo0MsgPendingCallback>:


// HAL_CAN_RxFifo0MsgPendingCallback
//  ISR called when CAN_RX_FIFO0 has a pending message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
    FIFO0_RX_CALLBACK
 80032f4:	2100      	movs	r1, #0
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd fdf4 	bl	8000ee4 <custom_service_can_rx_hardware>
	//service_can_rx_hardware(hcan, CAN_RX_FIFO0);
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_CAN_RxFifo1MsgPendingCallback>:


// HAL_CAN_RxFifo1MsgPendingCallback
//  ISR called when CAN_RX_FIFO1 has a pending message
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
    FIFO1_RX_CALLBACK
 800330c:	2101      	movs	r1, #1
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fd fde8 	bl	8000ee4 <custom_service_can_rx_hardware>
	//service_can_rx_hardware(hcan, CAN_RX_FIFO1);
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <send_can_command>:
//  U8 command_param_3:     parameter 3
// returns:
//  error codes specified in GopherCAN.h
S8 send_can_command(PRIORITY priority, MODULE_ID dest_module, GCAN_COMMAND_ID command_id,
	U8 command_param_0, U8 command_param_1, U8 command_param_2, U8 command_param_3)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	4604      	mov	r4, r0
 8003324:	4608      	mov	r0, r1
 8003326:	4611      	mov	r1, r2
 8003328:	461a      	mov	r2, r3
 800332a:	4623      	mov	r3, r4
 800332c:	71fb      	strb	r3, [r7, #7]
 800332e:	4603      	mov	r3, r0
 8003330:	71bb      	strb	r3, [r7, #6]
 8003332:	460b      	mov	r3, r1
 8003334:	717b      	strb	r3, [r7, #5]
 8003336:	4613      	mov	r3, r2
 8003338:	713b      	strb	r3, [r7, #4]
	CAN_MSG message;
	CAN_ID id;

	if (dest_module < 0 || dest_module >= NUM_OF_MODULES)
 800333a:	79bb      	ldrb	r3, [r7, #6]
 800333c:	2b06      	cmp	r3, #6
 800333e:	d902      	bls.n	8003346 <send_can_command+0x2a>
	{
		return BAD_MODULE_ID;
 8003340:	f06f 0301 	mvn.w	r3, #1
 8003344:	e02f      	b.n	80033a6 <send_can_command+0x8a>
	}

	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 8003346:	797b      	ldrb	r3, [r7, #5]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d902      	bls.n	8003352 <send_can_command+0x36>
	{
		return BAD_COMMAND_ID;
 800334c:	f06f 0303 	mvn.w	r3, #3
 8003350:	e029      	b.n	80033a6 <send_can_command+0x8a>
	}

	id.priority = priority;
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	723b      	strb	r3, [r7, #8]
	id.dest_module = dest_module;
 8003356:	79bb      	ldrb	r3, [r7, #6]
 8003358:	727b      	strb	r3, [r7, #9]
	id.source_module = this_module_id;
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <send_can_command+0x94>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	72bb      	strb	r3, [r7, #10]
	id.error = FALSE;
 8003360:	2300      	movs	r3, #0
 8003362:	72fb      	strb	r3, [r7, #11]
	id.parameter = CAN_COMMAND_ID;
 8003364:	2300      	movs	r3, #0
 8003366:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &id);
 8003368:	f107 0208 	add.w	r2, r7, #8
 800336c:	f107 0310 	add.w	r3, r7, #16
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fbd6 	bl	8003b24 <build_message_id>

	// set the RTR bit to be a data message
	message.rtr_bit = DATA_MESSAGE;
 8003378:	2300      	movs	r3, #0
 800337a:	753b      	strb	r3, [r7, #20]

	message.dlc = COMMAND_SIZE;
 800337c:	2305      	movs	r3, #5
 800337e:	757b      	strb	r3, [r7, #21]

	message.data[0] = command_id;
 8003380:	797b      	ldrb	r3, [r7, #5]
 8003382:	75bb      	strb	r3, [r7, #22]
	message.data[1] = command_param_0;
 8003384:	793b      	ldrb	r3, [r7, #4]
 8003386:	75fb      	strb	r3, [r7, #23]
	message.data[2] = command_param_1;
 8003388:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800338c:	763b      	strb	r3, [r7, #24]
	message.data[3] = command_param_2;
 800338e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003392:	767b      	strb	r3, [r7, #25]
	message.data[4] = command_param_3;
 8003394:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003398:	76bb      	strb	r3, [r7, #26]

	return tx_can_message(&message);
 800339a:	f107 0310 	add.w	r3, r7, #16
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fa04 	bl	80037ac <tx_can_message>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	; 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	bf00      	nop
 80033b0:	200071b4 	.word	0x200071b4

080033b4 <send_parameter>:
//  MODULE_ID dest_module: what module to send the parameter to
//  GCAN_PARAM_ID parameter:  what parameter to send
// returns:
//  error codes specified in GopherCAN.h
S8 send_parameter(PRIORITY priority, MODULE_ID dest_module, GCAN_PARAM_ID parameter)
{
 80033b4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80033b8:	b08c      	sub	sp, #48	; 0x30
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	71fb      	strb	r3, [r7, #7]
 80033c0:	460b      	mov	r3, r1
 80033c2:	71bb      	strb	r3, [r7, #6]
 80033c4:	4613      	mov	r3, r2
 80033c6:	717b      	strb	r3, [r7, #5]
	CAN_ID id;
	CAN_MSG message;
	U64 data = 0;
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	S8 c;
	FLOAT_CONVERTER float_con;

	// make sure the parameter is valid
	if (parameter <= CAN_COMMAND_ID || parameter >= NUM_OF_PARAMETERS)
 80033d4:	797b      	ldrb	r3, [r7, #5]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <send_parameter+0x2c>
 80033da:	797b      	ldrb	r3, [r7, #5]
 80033dc:	2b14      	cmp	r3, #20
 80033de:	d902      	bls.n	80033e6 <send_parameter+0x32>
	{
		return BAD_PARAMETER_ID;
 80033e0:	f06f 0302 	mvn.w	r3, #2
 80033e4:	e0e2      	b.n	80035ac <send_parameter+0x1f8>
	}

	// make sure the parameter is enabled
	if (!((CAN_INFO_STRUCT*)(all_parameter_structs[parameter]))->update_enabled)
 80033e6:	797b      	ldrb	r3, [r7, #5]
 80033e8:	4a73      	ldr	r2, [pc, #460]	; (80035b8 <send_parameter+0x204>)
 80033ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ee:	791b      	ldrb	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <send_parameter+0x46>
	{
		return NOT_ENABLED_ERR;
 80033f4:	f06f 030a 	mvn.w	r3, #10
 80033f8:	e0d8      	b.n	80035ac <send_parameter+0x1f8>
	}

	// build the return message ID
	id.priority = priority;
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f887 3020 	strb.w	r3, [r7, #32]
	id.dest_module = dest_module;
 8003400:	79bb      	ldrb	r3, [r7, #6]
 8003402:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	id.source_module = this_module_id;
 8003406:	4b6d      	ldr	r3, [pc, #436]	; (80035bc <send_parameter+0x208>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	id.error = FALSE;
 800340e:	2300      	movs	r3, #0
 8003410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	id.parameter = parameter;
 8003414:	797b      	ldrb	r3, [r7, #5]
 8003416:	b29b      	uxth	r3, r3
 8003418:	84bb      	strh	r3, [r7, #36]	; 0x24

	build_message_id(&message, &id);
 800341a:	f107 0220 	add.w	r2, r7, #32
 800341e:	f107 0310 	add.w	r3, r7, #16
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fb7d 	bl	8003b24 <build_message_id>

	// set the RTR bit to data type
	message.rtr_bit = DATA_MESSAGE;
 800342a:	2300      	movs	r3, #0
 800342c:	753b      	strb	r3, [r7, #20]

	// get the value of the data on this module and build the CAN message
	if (parameter_data_types[parameter] == UNSIGNED8
 800342e:	797b      	ldrb	r3, [r7, #5]
 8003430:	4a63      	ldr	r2, [pc, #396]	; (80035c0 <send_parameter+0x20c>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d004      	beq.n	8003442 <send_parameter+0x8e>
		|| parameter_data_types[parameter] == SIGNED8)
 8003438:	797b      	ldrb	r3, [r7, #5]
 800343a:	4a61      	ldr	r2, [pc, #388]	; (80035c0 <send_parameter+0x20c>)
 800343c:	5cd3      	ldrb	r3, [r2, r3]
 800343e:	2b05      	cmp	r3, #5
 8003440:	d113      	bne.n	800346a <send_parameter+0xb6>
	{
		data |= ((U8_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8003442:	797b      	ldrb	r3, [r7, #5]
 8003444:	4a5c      	ldr	r2, [pc, #368]	; (80035b8 <send_parameter+0x204>)
 8003446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344a:	79db      	ldrb	r3, [r3, #7]
 800344c:	fa5f fb83 	uxtb.w	fp, r3
 8003450:	f04f 0c00 	mov.w	ip, #0
 8003454:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003458:	ea4b 0200 	orr.w	r2, fp, r0
 800345c:	ea4c 0301 	orr.w	r3, ip, r1
 8003460:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U8);
 8003464:	2301      	movs	r3, #1
 8003466:	757b      	strb	r3, [r7, #21]
 8003468:	e06e      	b.n	8003548 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == UNSIGNED16
 800346a:	797b      	ldrb	r3, [r7, #5]
 800346c:	4a54      	ldr	r2, [pc, #336]	; (80035c0 <send_parameter+0x20c>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d004      	beq.n	800347e <send_parameter+0xca>
		|| parameter_data_types[parameter] == SIGNED16)
 8003474:	797b      	ldrb	r3, [r7, #5]
 8003476:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <send_parameter+0x20c>)
 8003478:	5cd3      	ldrb	r3, [r2, r3]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d113      	bne.n	80034a6 <send_parameter+0xf2>
	{
		data |= ((U16_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 800347e:	797b      	ldrb	r3, [r7, #5]
 8003480:	4a4d      	ldr	r2, [pc, #308]	; (80035b8 <send_parameter+0x204>)
 8003482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003486:	891b      	ldrh	r3, [r3, #8]
 8003488:	fa1f fb83 	uxth.w	fp, r3
 800348c:	f04f 0c00 	mov.w	ip, #0
 8003490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003494:	ea4b 0200 	orr.w	r2, fp, r0
 8003498:	ea4c 0301 	orr.w	r3, ip, r1
 800349c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U16);
 80034a0:	2302      	movs	r3, #2
 80034a2:	757b      	strb	r3, [r7, #21]
 80034a4:	e050      	b.n	8003548 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == UNSIGNED32
 80034a6:	797b      	ldrb	r3, [r7, #5]
 80034a8:	4a45      	ldr	r2, [pc, #276]	; (80035c0 <send_parameter+0x20c>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d004      	beq.n	80034ba <send_parameter+0x106>
		|| parameter_data_types[parameter] == SIGNED32)
 80034b0:	797b      	ldrb	r3, [r7, #5]
 80034b2:	4a43      	ldr	r2, [pc, #268]	; (80035c0 <send_parameter+0x20c>)
 80034b4:	5cd3      	ldrb	r3, [r2, r3]
 80034b6:	2b07      	cmp	r3, #7
 80034b8:	d112      	bne.n	80034e0 <send_parameter+0x12c>
	{
		data |= ((U32_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 80034ba:	797b      	ldrb	r3, [r7, #5]
 80034bc:	4a3e      	ldr	r2, [pc, #248]	; (80035b8 <send_parameter+0x204>)
 80034be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	469b      	mov	fp, r3
 80034c6:	f04f 0c00 	mov.w	ip, #0
 80034ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034ce:	ea4b 0200 	orr.w	r2, fp, r0
 80034d2:	ea4c 0301 	orr.w	r3, ip, r1
 80034d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U32);
 80034da:	2304      	movs	r3, #4
 80034dc:	757b      	strb	r3, [r7, #21]
 80034de:	e033      	b.n	8003548 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == UNSIGNED64
 80034e0:	797b      	ldrb	r3, [r7, #5]
 80034e2:	4a37      	ldr	r2, [pc, #220]	; (80035c0 <send_parameter+0x20c>)
 80034e4:	5cd3      	ldrb	r3, [r2, r3]
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d004      	beq.n	80034f4 <send_parameter+0x140>
		|| parameter_data_types[parameter] == SIGNED64)
 80034ea:	797b      	ldrb	r3, [r7, #5]
 80034ec:	4a34      	ldr	r2, [pc, #208]	; (80035c0 <send_parameter+0x20c>)
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d110      	bne.n	8003516 <send_parameter+0x162>
	{
		data |= ((U64_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 80034f4:	797b      	ldrb	r3, [r7, #5]
 80034f6:	4a30      	ldr	r2, [pc, #192]	; (80035b8 <send_parameter+0x204>)
 80034f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fc:	e9d3 bc02 	ldrd	fp, ip, [r3, #8]
 8003500:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003504:	ea4b 0200 	orr.w	r2, fp, r0
 8003508:	ea4c 0301 	orr.w	r3, ip, r1
 800350c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U64);
 8003510:	2308      	movs	r3, #8
 8003512:	757b      	strb	r3, [r7, #21]
 8003514:	e018      	b.n	8003548 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == FLOATING)
 8003516:	797b      	ldrb	r3, [r7, #5]
 8003518:	4a29      	ldr	r2, [pc, #164]	; (80035c0 <send_parameter+0x20c>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	2b09      	cmp	r3, #9
 800351e:	d113      	bne.n	8003548 <send_parameter+0x194>
	{
		// Union to get the bitwise data of the float
		float_con.f = ((FLOAT_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8003520:	797b      	ldrb	r3, [r7, #5]
 8003522:	4a25      	ldr	r2, [pc, #148]	; (80035b8 <send_parameter+0x204>)
 8003524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60fb      	str	r3, [r7, #12]

		data |= float_con.u32;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	469b      	mov	fp, r3
 8003530:	f04f 0c00 	mov.w	ip, #0
 8003534:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003538:	ea4b 0200 	orr.w	r2, fp, r0
 800353c:	ea4c 0301 	orr.w	r3, ip, r1
 8003540:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(float);
 8003544:	2304      	movs	r3, #4
 8003546:	757b      	strb	r3, [r7, #21]
	}

	// build the data in the message (big endian)
	for (c = message.dlc - 1; c >= 0; c--)
 8003548:	7d7b      	ldrb	r3, [r7, #21]
 800354a:	3b01      	subs	r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003552:	e021      	b.n	8003598 <send_parameter+0x1e4>
	{
		message.data[c] = (U8)(data >> (c * BITS_IN_BYTE));
 8003554:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003558:	00d9      	lsls	r1, r3, #3
 800355a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800355e:	f1c1 0620 	rsb	r6, r1, #32
 8003562:	f1a1 0020 	sub.w	r0, r1, #32
 8003566:	fa22 f401 	lsr.w	r4, r2, r1
 800356a:	fa03 f606 	lsl.w	r6, r3, r6
 800356e:	4334      	orrs	r4, r6
 8003570:	fa23 f000 	lsr.w	r0, r3, r0
 8003574:	4304      	orrs	r4, r0
 8003576:	fa23 f501 	lsr.w	r5, r3, r1
 800357a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800357e:	b2e2      	uxtb	r2, r4
 8003580:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003584:	440b      	add	r3, r1
 8003586:	f803 2c1a 	strb.w	r2, [r3, #-26]
	for (c = message.dlc - 1; c >= 0; c--)
 800358a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800359c:	2b00      	cmp	r3, #0
 800359e:	dad9      	bge.n	8003554 <send_parameter+0x1a0>
	}

	// send the built CAN message
	return tx_can_message(&message);
 80035a0:	f107 0310 	add.w	r3, r7, #16
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f901 	bl	80037ac <tx_can_message>
 80035aa:	4603      	mov	r3, r0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3730      	adds	r7, #48	; 0x30
 80035b0:	46bd      	mov	sp, r7
 80035b2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80035b6:	bf00      	nop
 80035b8:	20000024 	.word	0x20000024
 80035bc:	200071b4 	.word	0x200071b4
 80035c0:	20000078 	.word	0x20000078

080035c4 <add_custom_can_func>:
//                                                       data type (including NULL) as long as it is casted correctly
// returns:
//  error codes specified in GopherCAN.h
S8 add_custom_can_func(GCAN_COMMAND_ID command_id, void (*func_ptr)(MODULE_ID, void*, U8, U8, U8, U8),
	U8 init_state, void* param_ptr)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	4603      	mov	r3, r0
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	4613      	mov	r3, r2
 80035d4:	73bb      	strb	r3, [r7, #14]
	CUST_FUNC* new_cust_func;

	// make sure the ID is valid
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d902      	bls.n	80035e2 <add_custom_can_func+0x1e>
	{
		return BAD_COMMAND_ID;
 80035dc:	f06f 0303 	mvn.w	r3, #3
 80035e0:	e017      	b.n	8003612 <add_custom_can_func+0x4e>
	}

	new_cust_func = &(cust_funcs[command_id]);
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <add_custom_can_func+0x5c>)
 80035ee:	4413      	add	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

	// set all of the values of the struct accordingly
	new_cust_func->func_ptr       = func_ptr;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	601a      	str	r2, [r3, #0]
	new_cust_func->func_enabled   = !!init_state;
 80035f8:	7bbb      	ldrb	r3, [r7, #14]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf14      	ite	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	2300      	moveq	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	711a      	strb	r2, [r3, #4]
	new_cust_func->param_ptr      = param_ptr;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]

	return CAN_SUCCESS;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20007148 	.word	0x20007148

08003624 <service_can_tx_hardware>:
//  Method to interact directly with the CAN registers through the HAL_CAN commands.
//  then will fill as many tx mailboxes as possible from the tx_message_buffer
//
//  designed to be called at high priority on 1ms loop
void service_can_tx_hardware(CAN_HandleTypeDef* hcan)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	; 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

	// With multiple busses, choose the correct bus buffer to be working with
#ifdef MULTI_BUS
	buffer = choose_tx_buffer_from_hcan(hcan);
#else
	buffer = &tx_buffer;
 800362c:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <service_can_tx_hardware+0x9c>)
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif // MULTI_BUS

	// add messages to the the TX mailboxes until they are full
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 8003630:	e037      	b.n	80036a2 <service_can_tx_hardware+0x7e>
	{
		U32 tx_mailbox_num;

		// Turn off the TX interrupt (if applicable)
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_DeactivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 8003632:	2101      	movs	r1, #1
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f001 fefb 	bl	8005430 <HAL_CAN_DeactivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX

		// get the next CAN message from the TX buffer (FIFO)
		message = GET_FROM_BUFFER(buffer, 0);
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	6819      	ldr	r1, [r3, #0]
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	795b      	ldrb	r3, [r3, #5]
 8003642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003644:	7912      	ldrb	r2, [r2, #4]
 8003646:	fb93 f0f2 	sdiv	r0, r3, r2
 800364a:	fb02 f200 	mul.w	r2, r2, r0
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	440b      	add	r3, r1
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28

		// configure the settings/params of the CAN message
		tx_header.IDE = CAN_ID_EXT;                                          // 29 bit id
 8003656:	2304      	movs	r3, #4
 8003658:	61bb      	str	r3, [r7, #24]
		tx_header.TransmitGlobalTime = DISABLE;                              // do not send a timestamp
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		tx_header.ExtId = message->id;
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	617b      	str	r3, [r7, #20]
		tx_header.RTR = message->rtr_bit;
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	791b      	ldrb	r3, [r3, #4]
 800366a:	61fb      	str	r3, [r7, #28]
		tx_header.DLC = message->dlc;
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	795b      	ldrb	r3, [r3, #5]
 8003670:	623b      	str	r3, [r7, #32]

		// add the message to the sending list
		if (HAL_CAN_AddTxMessage(hcan, &tx_header, message->data, &tx_mailbox_num) != HAL_OK)
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	1d9a      	adds	r2, r3, #6
 8003676:	f107 030c 	add.w	r3, r7, #12
 800367a:	f107 0110 	add.w	r1, r7, #16
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f001 fc66 	bl	8004f50 <HAL_CAN_AddTxMessage>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <service_can_tx_hardware+0x70>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <service_can_tx_hardware+0xa0>)
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e012      	b.n	80036ba <service_can_tx_hardware+0x96>
			return;
		}

		// move the head now that the first element has been removed
		remove_from_front(buffer);
 8003694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003696:	f000 fb78 	bl	8003d8a <remove_from_front>

		// re-enable the RX interrupt
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 800369a:	2101      	movs	r1, #1
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f001 fea1 	bl	80053e4 <HAL_CAN_ActivateNotification>
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	799b      	ldrb	r3, [r3, #6]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <service_can_tx_hardware+0x94>
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f001 fd2b 	bl	8005106 <HAL_CAN_GetTxMailboxesFreeLevel>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1bd      	bne.n	8003632 <service_can_tx_hardware+0xe>
#endif // TARGET == F7XX || TARGET == F4XX
	}

	return;
 80036b6:	bf00      	nop
 80036b8:	bf00      	nop
}
 80036ba:	3730      	adds	r7, #48	; 0x30
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20007140 	.word	0x20007140
 80036c4:	2000013c 	.word	0x2000013c

080036c8 <service_can_rx_hardware>:
//  U32 rx_mailbox: the mailbox to service (CAN_RX_FIFO0 or CAN_RX_FIFO1)
//    Make sure this is valid, no error checking is done
//
//  designed to be called as an ISR whenever there is an RX message pending
void service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	; 0x28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rx_header;
	CAN_MSG* message;

	// get all the pending RX messages from the RX mailbox and store into the RX buffer
	while (!IS_FULL(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 80036d2:	e032      	b.n	800373a <service_can_rx_hardware+0x72>
	{
		// set message to the correct pointer from the RX buffer (the "last" message in the buffer)
		message = GET_FROM_BUFFER(&rx_buffer, rx_buffer.fill_level);
 80036d4:	4b21      	ldr	r3, [pc, #132]	; (800375c <service_can_rx_hardware+0x94>)
 80036d6:	6819      	ldr	r1, [r3, #0]
 80036d8:	4b20      	ldr	r3, [pc, #128]	; (800375c <service_can_rx_hardware+0x94>)
 80036da:	795b      	ldrb	r3, [r3, #5]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <service_can_rx_hardware+0x94>)
 80036e0:	799b      	ldrb	r3, [r3, #6]
 80036e2:	4413      	add	r3, r2
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <service_can_rx_hardware+0x94>)
 80036e6:	7912      	ldrb	r2, [r2, #4]
 80036e8:	fb93 f0f2 	sdiv	r0, r3, r2
 80036ec:	fb02 f200 	mul.w	r2, r2, r0
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	440b      	add	r3, r1
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24

		// Build the message from the registers on the STM32
		if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message->data) != HAL_OK)
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	3306      	adds	r3, #6
 80036fc:	f107 0208 	add.w	r2, r7, #8
 8003700:	6839      	ldr	r1, [r7, #0]
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f001 fd34 	bl	8005170 <HAL_CAN_GetRxMessage>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <service_can_rx_hardware+0x50>
		{
			// this will always return HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	4a13      	ldr	r2, [pc, #76]	; (8003760 <service_can_rx_hardware+0x98>)
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e01d      	b.n	8003754 <service_can_rx_hardware+0x8c>
			return;
		}

		// modify the rx_buffer data to reflect the new message
		rx_buffer.fill_level++;
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <service_can_rx_hardware+0x94>)
 800371a:	799b      	ldrb	r3, [r3, #6]
 800371c:	3301      	adds	r3, #1
 800371e:	b2da      	uxtb	r2, r3
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <service_can_rx_hardware+0x94>)
 8003722:	719a      	strb	r2, [r3, #6]

		// move the header ID, RTR bit, and DLC into the GopherCAN message struct
		message->rtr_bit = rx_header.RTR;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	711a      	strb	r2, [r3, #4]
		message->id = rx_header.ExtId;
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	601a      	str	r2, [r3, #0]
		message->dlc = rx_header.DLC;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	715a      	strb	r2, [r3, #5]
	while (!IS_FULL(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <service_can_rx_hardware+0x94>)
 800373c:	799a      	ldrb	r2, [r3, #6]
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <service_can_rx_hardware+0x94>)
 8003740:	791b      	ldrb	r3, [r3, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d206      	bcs.n	8003754 <service_can_rx_hardware+0x8c>
 8003746:	6839      	ldr	r1, [r7, #0]
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f001 fe23 	bl	8005394 <HAL_CAN_GetRxFifoFillLevel>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1bf      	bne.n	80036d4 <service_can_rx_hardware+0xc>
		// router specific functionality that directly adds messages that need to be routed
		//  directly to the correct TX buffer (if needed, that decision is made within the function)
		rout_can_message(hcan, message);
#endif // CAN_ROUTER
	}
}
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20006d38 	.word	0x20006d38
 8003760:	2000013c 	.word	0x2000013c

08003764 <service_can_rx_buffer>:
//   parameter requests. The request will not be completed and the other module will have to
//   send a new request
//
//  call in a 1 ms or faster loop
S8 service_can_rx_buffer(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
	CAN_MSG* current_message;

	// run through each message in the RX buffer and service it with service_can_rx_message() (FIFO)
	while (!IS_EMPTY(&rx_buffer))
 800376a:	e013      	b.n	8003794 <service_can_rx_buffer+0x30>
	{
		// get the message at the head of the array
		current_message = GET_FROM_BUFFER(&rx_buffer, 0);
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <service_can_rx_buffer+0x44>)
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <service_can_rx_buffer+0x44>)
 8003772:	795b      	ldrb	r3, [r3, #5]
 8003774:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <service_can_rx_buffer+0x44>)
 8003776:	7912      	ldrb	r2, [r2, #4]
 8003778:	fb93 f0f2 	sdiv	r0, r3, r2
 800377c:	fb02 f200 	mul.w	r2, r2, r0
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	440b      	add	r3, r1
 8003786:	607b      	str	r3, [r7, #4]

		// WARNING: CAN errors from other modules are not handled in this version. The message is just discarded
		// Use a CAN bus analyzer to see what the message is for debugging
		service_can_rx_message(current_message);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f83d 	bl	8003808 <service_can_rx_message>

		// move the head now that the first element has been removed
		remove_from_front(&rx_buffer);
 800378e:	4806      	ldr	r0, [pc, #24]	; (80037a8 <service_can_rx_buffer+0x44>)
 8003790:	f000 fafb 	bl	8003d8a <remove_from_front>
	while (!IS_EMPTY(&rx_buffer))
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <service_can_rx_buffer+0x44>)
 8003796:	799b      	ldrb	r3, [r3, #6]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e7      	bne.n	800376c <service_can_rx_buffer+0x8>
	}

	return CAN_SUCCESS;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20006d38 	.word	0x20006d38

080037ac <tx_can_message>:


// tx_can_message
//  Takes in a CAN_MSG struct, adds it to the TX buffer
static S8 tx_can_message(CAN_MSG* message_to_add)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	CAN_MSG_RING_BUFFER* buffer;

	// remove any trailing zeros in the CAN message. This is done by starting at the
	// back of the message and decrementing the DLC for each byte in the message that
	// is zero at the back. RX logic will add zero bytes as needed
	while (message_to_add->dlc > 0
 80037b4:	e005      	b.n	80037c2 <tx_can_message+0x16>
			&& message_to_add->data[message_to_add->dlc - 1] == 0)
	{
		message_to_add->dlc--;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	795b      	ldrb	r3, [r3, #5]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	715a      	strb	r2, [r3, #5]
	while (message_to_add->dlc > 0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	795b      	ldrb	r3, [r3, #5]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <tx_can_message+0x2e>
			&& message_to_add->data[message_to_add->dlc - 1] == 0)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	795b      	ldrb	r3, [r3, #5]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	799b      	ldrb	r3, [r3, #6]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ed      	beq.n	80037b6 <tx_can_message+0xa>

	// If there are multiple busses, choose the correct bus based on the routing table
	buffer = choose_tx_buffer_from_dest_module(message_to_add);

#else
	buffer = &tx_buffer;
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <tx_can_message+0x58>)
 80037dc:	60fb      	str	r3, [r7, #12]
#endif // MULTI_BUS

	// check to make sure the buffer is not full, then add it to the back of the TX buffer
	if (IS_FULL(buffer))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	799a      	ldrb	r2, [r3, #6]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	791b      	ldrb	r3, [r3, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d302      	bcc.n	80037f0 <tx_can_message+0x44>
	{
		return TX_BUFFER_FULL;
 80037ea:	f06f 0307 	mvn.w	r3, #7
 80037ee:	e004      	b.n	80037fa <tx_can_message+0x4e>
#endif // TARGET == F7XX || TARGET == F4XX

	return CAN_SUCCESS;
}
#else
    add_message_by_highest_prio(buffer, message_to_add);
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 faeb 	bl	8003dce <add_message_by_highest_prio>

    return CAN_SUCCESS;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20007140 	.word	0x20007140

08003808 <service_can_rx_message>:
//  CAN message bus interrupt function this will update all
//  the global variables or trigger the CAN functions if needed.
//  Designed to be called by service_can_rx_software to loop perform
//  this task for each pending CAN message
static S8 service_can_rx_message(CAN_MSG* message)
{
 8003808:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800380c:	b08a      	sub	sp, #40	; 0x28
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
	CAN_ID id;
	CAN_INFO_STRUCT* data_struct = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
	FLOAT_CONVERTER float_con;
	U64 received_data = 0;
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	f04f 0400 	mov.w	r4, #0
 800381e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	S8 c;

	get_message_id(&id, message);
 8003822:	f107 0310 	add.w	r3, r7, #16
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f9db 	bl	8003be4 <get_message_id>

	// A double check to make sure this message is actually for this module (most useful in the CAN router)
	if (id.dest_module != this_module_id && id.dest_module != ALL_MODULES_ID)
 800382e:	7c7a      	ldrb	r2, [r7, #17]
 8003830:	4b74      	ldr	r3, [pc, #464]	; (8003a04 <service_can_rx_message+0x1fc>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d005      	beq.n	8003844 <service_can_rx_message+0x3c>
 8003838:	7c7b      	ldrb	r3, [r7, #17]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <service_can_rx_message+0x3c>
	{
		// This is not for this module. Do not process this message
		return WRONG_DEST_ERR;
 800383e:	f06f 030c 	mvn.w	r3, #12
 8003842:	e0d9      	b.n	80039f8 <service_can_rx_message+0x1f0>
	}

	// if the message received has the error flag high, put the details into the last_error struct, then return
	if (id.error)
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d014      	beq.n	8003874 <service_can_rx_message+0x6c>
	{
		// this could possibly be changed into a ring buffer
		last_error.last_rx = HAL_GetTick();
 800384a:	f000 fb95 	bl	8003f78 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	4b6d      	ldr	r3, [pc, #436]	; (8003a08 <service_can_rx_message+0x200>)
 8003852:	601a      	str	r2, [r3, #0]
		last_error.source_module = id.source_module;
 8003854:	7cba      	ldrb	r2, [r7, #18]
 8003856:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <service_can_rx_message+0x200>)
 8003858:	711a      	strb	r2, [r3, #4]
		last_error.parameter = id.parameter;
 800385a:	8aba      	ldrh	r2, [r7, #20]
 800385c:	4b6a      	ldr	r3, [pc, #424]	; (8003a08 <service_can_rx_message+0x200>)
 800385e:	80da      	strh	r2, [r3, #6]
		if (message->dlc > 0)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	795b      	ldrb	r3, [r3, #5]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <service_can_rx_message+0x68>
		{
			last_error.error_id = message->data[0];
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	799a      	ldrb	r2, [r3, #6]
 800386c:	4b66      	ldr	r3, [pc, #408]	; (8003a08 <service_can_rx_message+0x200>)
 800386e:	721a      	strb	r2, [r3, #8]
		}

		// return success because the problem is not with the RX
		return CAN_SUCCESS;
 8003870:	2300      	movs	r3, #0
 8003872:	e0c1      	b.n	80039f8 <service_can_rx_message+0x1f0>
	}

	// error checking on the parameter requested
	if (id.parameter < 0 || id.parameter >= NUM_OF_PARAMETERS)
 8003874:	8abb      	ldrh	r3, [r7, #20]
 8003876:	2b14      	cmp	r3, #20
 8003878:	d908      	bls.n	800388c <service_can_rx_message+0x84>
	{
		send_error_message(&id, ID_NOT_FOUND);
 800387a:	f107 0310 	add.w	r3, r7, #16
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f9e7 	bl	8003c54 <send_error_message>

		return NOT_FOUND_ERR;
 8003886:	f06f 0309 	mvn.w	r3, #9
 800388a:	e0b5      	b.n	80039f8 <service_can_rx_message+0x1f0>
	}
	
	// get the associated data struct and set last_rx
	data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[id.parameter]);
 800388c:	8abb      	ldrh	r3, [r7, #20]
 800388e:	461a      	mov	r2, r3
 8003890:	4b5e      	ldr	r3, [pc, #376]	; (8003a0c <service_can_rx_message+0x204>)
 8003892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003896:	61bb      	str	r3, [r7, #24]
	data_struct->last_rx = HAL_GetTick();
 8003898:	f000 fb6e 	bl	8003f78 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	601a      	str	r2, [r3, #0]

    // run command: run the command specified by the CAN message on this module
	if (parameter_data_types[id.parameter] == COMMAND)
 80038a2:	8abb      	ldrh	r3, [r7, #20]
 80038a4:	461a      	mov	r2, r3
 80038a6:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <service_can_rx_message+0x208>)
 80038a8:	5c9b      	ldrb	r3, [r3, r2]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d107      	bne.n	80038be <service_can_rx_message+0xb6>
	{
		return run_can_command(message, &id);
 80038ae:	f107 0310 	add.w	r3, r7, #16
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f8db 	bl	8003a70 <run_can_command>
 80038ba:	4603      	mov	r3, r0
 80038bc:	e09c      	b.n	80039f8 <service_can_rx_message+0x1f0>
	}

	// Check the update_enabled flag (if it is not a CAN command)
	if (!(data_struct->update_enabled))
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	791b      	ldrb	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <service_can_rx_message+0xd0>
	{
		send_error_message(&id, PARAM_NOT_ENABLED);
 80038c6:	f107 0310 	add.w	r3, r7, #16
 80038ca:	2102      	movs	r1, #2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 f9c1 	bl	8003c54 <send_error_message>
		return NOT_ENABLED_ERR;
 80038d2:	f06f 030a 	mvn.w	r3, #10
 80038d6:	e08f      	b.n	80039f8 <service_can_rx_message+0x1f0>
	}

	// request parameter: return a CAN message with the data taken from this module
	if (message->rtr_bit)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	791b      	ldrb	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <service_can_rx_message+0xe8>
	{
		return parameter_requested(message, &id);
 80038e0:	f107 0310 	add.w	r3, r7, #16
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f894 	bl	8003a14 <parameter_requested>
 80038ec:	4603      	mov	r3, r0
 80038ee:	e083      	b.n	80039f8 <service_can_rx_message+0x1f0>
	}

	// this code should only be reached if the message is a data message

	// build the data U64 (big endian)
	for (c = (message->dlc - 1); c >= 0; c--)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	795b      	ldrb	r3, [r3, #5]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e01b      	b.n	8003934 <service_can_rx_message+0x12c>
	{
		received_data |= message->data[c] << (c * BITS_IN_BYTE);
 80038fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	4413      	add	r3, r2
 8003904:	799b      	ldrb	r3, [r3, #6]
 8003906:	461a      	mov	r2, r3
 8003908:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	469b      	mov	fp, r3
 8003914:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8003918:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800391c:	ea4b 0301 	orr.w	r3, fp, r1
 8003920:	ea4c 0402 	orr.w	r4, ip, r2
 8003924:	e9c7 3408 	strd	r3, r4, [r7, #32]
	for (c = (message->dlc - 1); c >= 0; c--)
 8003928:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003938:	2b00      	cmp	r3, #0
 800393a:	dadf      	bge.n	80038fc <service_can_rx_message+0xf4>
	}

	// Switch the pending_response flag
	data_struct->pending_response = FALSE;
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2200      	movs	r2, #0
 8003940:	715a      	strb	r2, [r3, #5]

	// this switch will handle all of the different possible data types
	// that can be sent over CAN
	switch (parameter_data_types[id.parameter])
 8003942:	8abb      	ldrh	r3, [r7, #20]
 8003944:	461a      	mov	r2, r3
 8003946:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <service_can_rx_message+0x208>)
 8003948:	5c9b      	ldrb	r3, [r3, r2]
 800394a:	3b01      	subs	r3, #1
 800394c:	2b08      	cmp	r3, #8
 800394e:	d84b      	bhi.n	80039e8 <service_can_rx_message+0x1e0>
 8003950:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <service_can_rx_message+0x150>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	0800397d 	.word	0x0800397d
 800395c:	08003989 	.word	0x08003989
 8003960:	08003993 	.word	0x08003993
 8003964:	0800399d 	.word	0x0800399d
 8003968:	080039ab 	.word	0x080039ab
 800396c:	080039b7 	.word	0x080039b7
 8003970:	080039c3 	.word	0x080039c3
 8003974:	080039cd 	.word	0x080039cd
 8003978:	080039db 	.word	0x080039db
	{
	case UNSIGNED8:
		((U8_CAN_STRUCT*)(data_struct))->data = (U8)received_data;
 800397c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	71da      	strb	r2, [r3, #7]
		return CAN_SUCCESS;
 8003984:	2300      	movs	r3, #0
 8003986:	e037      	b.n	80039f8 <service_can_rx_message+0x1f0>

	case UNSIGNED16:
		((U16_CAN_STRUCT*)(data_struct))->data = (U16)received_data;
 8003988:	8c3a      	ldrh	r2, [r7, #32]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	811a      	strh	r2, [r3, #8]
		return CAN_SUCCESS;
 800398e:	2300      	movs	r3, #0
 8003990:	e032      	b.n	80039f8 <service_can_rx_message+0x1f0>

	case UNSIGNED32:
		((U32_CAN_STRUCT*)(data_struct))->data = (U32)received_data;
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 8003998:	2300      	movs	r3, #0
 800399a:	e02d      	b.n	80039f8 <service_can_rx_message+0x1f0>

	case UNSIGNED64:
		((U64_CAN_STRUCT*)(data_struct))->data = (U64)received_data;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80039a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
		return CAN_SUCCESS;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e026      	b.n	80039f8 <service_can_rx_message+0x1f0>

	case SIGNED8:
		((S8_CAN_STRUCT*)(data_struct))->data = (S8)received_data;
 80039aa:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	71da      	strb	r2, [r3, #7]
		return CAN_SUCCESS;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e020      	b.n	80039f8 <service_can_rx_message+0x1f0>

	case SIGNED16:
		((S16_CAN_STRUCT*)(data_struct))->data = (S16)received_data;
 80039b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	811a      	strh	r2, [r3, #8]
		return CAN_SUCCESS;
 80039be:	2300      	movs	r3, #0
 80039c0:	e01a      	b.n	80039f8 <service_can_rx_message+0x1f0>

	case SIGNED32:
		((S32_CAN_STRUCT*)(data_struct))->data = (S32)received_data;
 80039c2:	6a3a      	ldr	r2, [r7, #32]
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e015      	b.n	80039f8 <service_can_rx_message+0x1f0>

	case SIGNED64:
		((S64_CAN_STRUCT*)(data_struct))->data = (S64)received_data;
 80039cc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	e9c2 3402 	strd	r3, r4, [r2, #8]
		return CAN_SUCCESS;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e00e      	b.n	80039f8 <service_can_rx_message+0x1f0>

	case FLOATING:
		// Union to get the bitwise data of the float
		float_con.u32 = (U32)received_data;
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	60fb      	str	r3, [r7, #12]

		((FLOAT_CAN_STRUCT*)(data_struct))->data = float_con.f;
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e007      	b.n	80039f8 <service_can_rx_message+0x1f0>

	default:
		send_error_message(&id, DATATYPE_NOT_FOUND);
 80039e8:	f107 0310 	add.w	r3, r7, #16
 80039ec:	2104      	movs	r1, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f930 	bl	8003c54 <send_error_message>
		return NOT_FOUND_ERR;
 80039f4:	f06f 0309 	mvn.w	r3, #9
	}

	return CAN_SUCCESS;
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3728      	adds	r7, #40	; 0x28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003a02:	bf00      	nop
 8003a04:	200071b4 	.word	0x200071b4
 8003a08:	20006b2c 	.word	0x20006b2c
 8003a0c:	20000024 	.word	0x20000024
 8003a10:	20000078 	.word	0x20000078

08003a14 <parameter_requested>:


// parameter_requested
//  return a CAN message with the data taken from this module
static S8 parameter_requested(CAN_MSG* message, CAN_ID* id)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
	if (message->dlc != REQ_PARAM_SIZE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	795b      	ldrb	r3, [r3, #5]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <parameter_requested+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 8003a26:	2103      	movs	r1, #3
 8003a28:	6838      	ldr	r0, [r7, #0]
 8003a2a:	f000 f913 	bl	8003c54 <send_error_message>

		return SIZE_ERR;
 8003a2e:	f06f 030b 	mvn.w	r3, #11
 8003a32:	e019      	b.n	8003a68 <parameter_requested+0x54>
	}

	// the requested parameter is stored in id->parameter of the received CAN message
	if (id->parameter <= CAN_COMMAND_ID || id->parameter >= NUM_OF_PARAMETERS)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	889b      	ldrh	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <parameter_requested+0x30>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	889b      	ldrh	r3, [r3, #4]
 8003a40:	2b14      	cmp	r3, #20
 8003a42:	d906      	bls.n	8003a52 <parameter_requested+0x3e>
	{
		send_error_message(id, ID_NOT_FOUND);
 8003a44:	2100      	movs	r1, #0
 8003a46:	6838      	ldr	r0, [r7, #0]
 8003a48:	f000 f904 	bl	8003c54 <send_error_message>

		return NOT_FOUND_ERR;
 8003a4c:	f06f 0309 	mvn.w	r3, #9
 8003a50:	e00a      	b.n	8003a68 <parameter_requested+0x54>
	}

	// send the parameter data to the module that requested
	return send_parameter(id->priority, id->source_module, id->parameter);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	7818      	ldrb	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	7899      	ldrb	r1, [r3, #2]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	889b      	ldrh	r3, [r3, #4]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	f7ff fca7 	bl	80033b4 <send_parameter>
 8003a66:	4603      	mov	r3, r0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <run_can_command>:


// run_can_command
//  run the command specified by the CAN message on this module
static S8 run_can_command(CAN_MSG* message, CAN_ID* id)
{
 8003a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
	GCAN_COMMAND_ID command_id;
	CUST_FUNC* this_function;
	U8 c;

	// DLC error checking
	if (message->dlc > COMMAND_SIZE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	795b      	ldrb	r3, [r3, #5]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d906      	bls.n	8003a90 <run_can_command+0x20>
	{
		// there is either no DLC (no function ID) or too many parameters sent
		send_error_message(id, SIZE_ERROR);
 8003a82:	2103      	movs	r1, #3
 8003a84:	6838      	ldr	r0, [r7, #0]
 8003a86:	f000 f8e5 	bl	8003c54 <send_error_message>
		return SIZE_ERR;
 8003a8a:	f06f 030b 	mvn.w	r3, #11
 8003a8e:	e042      	b.n	8003b16 <run_can_command+0xa6>
	}

	// fill in the extra DLC of the message with zeros
	for (c = message->dlc; c < COMMAND_SIZE; c++)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	795b      	ldrb	r3, [r3, #5]
 8003a94:	73fb      	strb	r3, [r7, #15]
 8003a96:	e007      	b.n	8003aa8 <run_can_command+0x38>
	{
		message->data[c] = 0;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	719a      	strb	r2, [r3, #6]
	for (c = message->dlc; c < COMMAND_SIZE; c++)
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d9f4      	bls.n	8003a98 <run_can_command+0x28>
	}

	// error checking on the command ID
	command_id = message->data[COMMAND_ID_POS];
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	799b      	ldrb	r3, [r3, #6]
 8003ab2:	73bb      	strb	r3, [r7, #14]
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 8003ab4:	7bbb      	ldrb	r3, [r7, #14]
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d906      	bls.n	8003ac8 <run_can_command+0x58>
	{
		send_error_message(id, COMMAND_ID_NOT_FOUND);
 8003aba:	2101      	movs	r1, #1
 8003abc:	6838      	ldr	r0, [r7, #0]
 8003abe:	f000 f8c9 	bl	8003c54 <send_error_message>

		return NOT_FOUND_ERR;
 8003ac2:	f06f 0309 	mvn.w	r3, #9
 8003ac6:	e026      	b.n	8003b16 <run_can_command+0xa6>
	}

	this_function = &(cust_funcs[command_id]);
 8003ac8:	7bba      	ldrb	r2, [r7, #14]
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <run_can_command+0xb0>)
 8003ad4:	4413      	add	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]

	// check if the function is enabled
	if (!this_function->func_enabled)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	791b      	ldrb	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <run_can_command+0x7e>
	{
		send_error_message(id, COMMAND_NOT_ENABLED);
 8003ae0:	2105      	movs	r1, #5
 8003ae2:	6838      	ldr	r0, [r7, #0]
 8003ae4:	f000 f8b6 	bl	8003c54 <send_error_message>

		return NOT_ENABLED_ERR;
 8003ae8:	f06f 030a 	mvn.w	r3, #10
 8003aec:	e013      	b.n	8003b16 <run_can_command+0xa6>
	}

	// run the function
	(*(this_function->func_ptr))(id->source_module, this_function->param_ptr,
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	681c      	ldr	r4, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	7898      	ldrb	r0, [r3, #2]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6899      	ldr	r1, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	79dd      	ldrb	r5, [r3, #7]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7a1e      	ldrb	r6, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7a5b      	ldrb	r3, [r3, #9]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	7a92      	ldrb	r2, [r2, #10]
 8003b0a:	9201      	str	r2, [sp, #4]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	4633      	mov	r3, r6
 8003b10:	462a      	mov	r2, r5
 8003b12:	47a0      	blx	r4
		message->data[COMMAND_PARAM_0], message->data[COMMAND_PARAM_1],
		message->data[COMMAND_PARAM_2], message->data[COMMAND_PARAM_3]);

	return CAN_SUCCESS;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20007148 	.word	0x20007148

08003b24 <build_message_id>:

// build_can_id
//  this function will fill in the id of msg when called.
//  No error checking is preformed in this function besides masking
static void build_message_id(CAN_MSG* msg, CAN_ID* id)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
	U32 temp;

	msg->id = 0;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

	// priority bit
	temp = !!id->priority;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PRIORITY_POS - PRIORITY_SIZE);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	071b      	lsls	r3, r3, #28
 8003b48:	60fb      	str	r3, [r7, #12]
	temp &= PRIORITY_MASK;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]

	// destination bits
	temp = id->dest_module;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	785b      	ldrb	r3, [r3, #1]
 8003b62:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - DEST_POS - DEST_SIZE);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	059b      	lsls	r3, r3, #22
 8003b68:	60fb      	str	r3, [r7, #12]
	temp &= DEST_MASK;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f003 637c 	and.w	r3, r3, #264241152	; 0xfc00000
 8003b70:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]

    // source bits
	temp = id->source_module;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	789b      	ldrb	r3, [r3, #2]
 8003b82:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - SOURCE_POS - SOURCE_SIZE);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	041b      	lsls	r3, r3, #16
 8003b88:	60fb      	str	r3, [r7, #12]
	temp &= SOURCE_MASK;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003b90:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	601a      	str	r2, [r3, #0]

	// error bit
	temp = id->error;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	78db      	ldrb	r3, [r3, #3]
 8003ba2:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - ERROR_POS - ERROR_SIZE);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	03db      	lsls	r3, r3, #15
 8003ba8:	60fb      	str	r3, [r7, #12]
	temp &= ERROR_MASK;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb0:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	601a      	str	r2, [r3, #0]

	// parameter bits
	temp = id->parameter;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	889b      	ldrh	r3, [r3, #4]
 8003bc2:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PARAM_POS - PARAM_SIZE);
	temp &= PARAM_MASK;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003bca:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	601a      	str	r2, [r3, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <get_message_id>:

// get_message_id
//  this function will take in a CAN message and convert it to
//  a CAN id struct. No error checking is performed
static void get_message_id(CAN_ID* id, CAN_MSG* message)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
	id->priority = GET_ID_PRIO(message->id);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	0f1b      	lsrs	r3, r3, #28
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	701a      	strb	r2, [r3, #0]
	id->dest_module = GET_ID_DEST(message->id);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	0d9b      	lsrs	r3, r3, #22
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	705a      	strb	r2, [r3, #1]
	id->source_module = GET_ID_SOURCE(message->id);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	709a      	strb	r2, [r3, #2]
	id->error = GET_ID_ERROR(message->id);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0bdb      	lsrs	r3, r3, #15
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	70da      	strb	r2, [r3, #3]
	id->parameter = GET_ID_PARAM(message->id);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	809a      	strh	r2, [r3, #4]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <send_error_message>:


// send_error_message
//  Sends a return message to the original sender with the ID specified
static S8 send_error_message(CAN_ID* rx_id, U8 error_id)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
	CAN_MSG message;
	CAN_ID tx_id;

	// create the CAN ID for the error message
	tx_id.priority = rx_id->priority;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	723b      	strb	r3, [r7, #8]
	tx_id.dest_module = rx_id->source_module;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	789b      	ldrb	r3, [r3, #2]
 8003c6a:	727b      	strb	r3, [r7, #9]
	tx_id.source_module = this_module_id;
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <send_error_message+0x58>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	72bb      	strb	r3, [r7, #10]
	tx_id.error = TRUE;
 8003c72:	2301      	movs	r3, #1
 8003c74:	72fb      	strb	r3, [r7, #11]
	tx_id.parameter = rx_id->parameter;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	889b      	ldrh	r3, [r3, #4]
 8003c7a:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &tx_id);
 8003c7c:	f107 0208 	add.w	r2, r7, #8
 8003c80:	f107 0310 	add.w	r3, r7, #16
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff ff4c 	bl	8003b24 <build_message_id>

	// set the RTR bit to a data message
	message.rtr_bit = DATA_MESSAGE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	753b      	strb	r3, [r7, #20]

	// set the DLC and data
	message.dlc = sizeof(error_id);
 8003c90:	2301      	movs	r3, #1
 8003c92:	757b      	strb	r3, [r7, #21]
	message.data[0] = error_id;
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	75bb      	strb	r3, [r7, #22]

	// send the CAN message
	return tx_can_message(&message);
 8003c98:	f107 0310 	add.w	r3, r7, #16
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fd85 	bl	80037ac <tx_can_message>
 8003ca2:	4603      	mov	r3, r0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	200071b4 	.word	0x200071b4

08003cb0 <HAL_CAN_TxMailbox0CompleteCallback>:


// the F7xx has ISRs for available TX mailboxes having an opening. All callbacks should service the TX hardware
#if TARGET == F7XX || TARGET == F4XX
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff fcb3 	bl	8003624 <service_can_tx_hardware>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff fca8 	bl	8003624 <service_can_tx_hardware>
}
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff fc9d 	bl	8003624 <service_can_tx_hardware>
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef* hcan)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff fc92 	bl	8003624 <service_can_tx_hardware>
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef* hcan)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fc87 	bl	8003624 <service_can_tx_hardware>
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef* hcan)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff fc7c 	bl	8003624 <service_can_tx_hardware>
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <do_nothing>:
// do_nothing
//  this exists to give a default function pointer to all of the CAN commands
//  to avoid errors from bad function pointers
void do_nothing(U8 sending_module, void* param,
	U8 remote_param0, U8 remote_param1, U8 remote_param2, U8 remote_param3)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6039      	str	r1, [r7, #0]
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4603      	mov	r3, r0
 8003d42:	71fb      	strb	r3, [r7, #7]
 8003d44:	460b      	mov	r3, r1
 8003d46:	71bb      	strb	r3, [r7, #6]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	717b      	strb	r3, [r7, #5]
	// this function has successfully done nothing
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <init_buffer>:


// init_buffer
//  initialize the buffer with the values passed in as parameters
void init_buffer(CAN_MSG_RING_BUFFER* buffer, CAN_MSG buffer_memory_ptr[], U8 buffer_size)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	4613      	mov	r3, r2
 8003d64:	71fb      	strb	r3, [r7, #7]
	buffer->head = 0;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	715a      	strb	r2, [r3, #5]
	buffer->fill_level = 0;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	719a      	strb	r2, [r3, #6]
	buffer->size = buffer_size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	79fa      	ldrb	r2, [r7, #7]
 8003d76:	711a      	strb	r2, [r3, #4]
	buffer->message_buffer = buffer_memory_ptr;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	601a      	str	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <remove_from_front>:


// remove_from_front
//  will remove the first element of the ring buffer. If the buffer is empty it will do nothing
void remove_from_front(CAN_MSG_RING_BUFFER* buffer)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
	// don't do anything if the buffer is empty
	if (IS_EMPTY(buffer))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	799b      	ldrb	r3, [r3, #6]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d013      	beq.n	8003dc2 <remove_from_front+0x38>
	{
		return;
	}

	// move the head to the next element
	buffer->head = (buffer->head + 1) % buffer->size;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	795b      	ldrb	r3, [r3, #5]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	7912      	ldrb	r2, [r2, #4]
 8003da4:	fb93 f1f2 	sdiv	r1, r3, r2
 8003da8:	fb02 f201 	mul.w	r2, r2, r1
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	715a      	strb	r2, [r3, #5]

	// decrement the fill level
	buffer->fill_level--;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	799b      	ldrb	r3, [r3, #6]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	719a      	strb	r2, [r3, #6]
 8003dc0:	e000      	b.n	8003dc4 <remove_from_front+0x3a>
		return;
 8003dc2:	bf00      	nop
}
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <add_message_by_highest_prio>:
//  This function will add message to the buffer based on the ID of the message. Higher
//  priority messages (lower ID) will be towards the front, with lower priority
//  messages (greater ID) will be towards the back. Removing from the front will get
//  the highest priority message. This function assumes the buffer is not full
void add_message_by_highest_prio(CAN_MSG_RING_BUFFER* buffer, CAN_MSG* message)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
	CAN_MSG* buffer_message = GET_FROM_BUFFER(buffer, 0);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6819      	ldr	r1, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	795b      	ldrb	r3, [r3, #5]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	7912      	ldrb	r2, [r2, #4]
 8003de4:	fb93 f0f2 	sdiv	r0, r3, r2
 8003de8:	fb02 f200 	mul.w	r2, r2, r0
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	440b      	add	r3, r1
 8003df2:	60fb      	str	r3, [r7, #12]

	// start from the back of the buffer, moving each message towards the back
	// by one and put the new message in the correct spot by ID. If the buffer
	// was empty when the message first went through here, it will put the new
	// message in position 0
	buffer->fill_level++;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	799b      	ldrb	r3, [r3, #6]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	719a      	strb	r2, [r3, #6]
	for (c = buffer->fill_level - 2; c >= 0; c--)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	799b      	ldrb	r3, [r3, #6]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b02      	subs	r3, #2
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	817b      	strh	r3, [r7, #10]
 8003e0c:	e047      	b.n	8003e9e <add_message_by_highest_prio+0xd0>
	{
		buffer_message = GET_FROM_BUFFER(buffer, c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6819      	ldr	r1, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	795b      	ldrb	r3, [r3, #5]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	7912      	ldrb	r2, [r2, #4]
 8003e22:	fb93 f0f2 	sdiv	r0, r3, r2
 8003e26:	fb02 f200 	mul.w	r2, r2, r0
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	440b      	add	r3, r1
 8003e30:	60fb      	str	r3, [r7, #12]
		if (message->id >= buffer_message->id)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d313      	bcc.n	8003e66 <add_message_by_highest_prio+0x98>
		{
			// we have found the correct place for the new message
			buffer_message = GET_FROM_BUFFER(buffer, c + 1);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6819      	ldr	r1, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	795b      	ldrb	r3, [r3, #5]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3301      	adds	r3, #1
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	7912      	ldrb	r2, [r2, #4]
 8003e54:	fb93 f0f2 	sdiv	r0, r3, r2
 8003e58:	fb02 f200 	mul.w	r2, r2, r0
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	440b      	add	r3, r1
 8003e62:	60fb      	str	r3, [r7, #12]
			break;
 8003e64:	e01f      	b.n	8003ea6 <add_message_by_highest_prio+0xd8>
		}

		// move this message back by 1 and try again
		copy_message(buffer_message, GET_FROM_BUFFER(buffer, c + 1));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	795b      	ldrb	r3, [r3, #5]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e74:	4413      	add	r3, r2
 8003e76:	3301      	adds	r3, #1
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	7912      	ldrb	r2, [r2, #4]
 8003e7c:	fb93 f0f2 	sdiv	r0, r3, r2
 8003e80:	fb02 f200 	mul.w	r2, r2, r0
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	440b      	add	r3, r1
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f812 	bl	8003eb6 <copy_message>
	for (c = buffer->fill_level - 2; c >= 0; c--)
 8003e92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	817b      	strh	r3, [r7, #10]
 8003e9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	dab3      	bge.n	8003e0e <add_message_by_highest_prio+0x40>
	}

	// put the message into the buffer at this position
	copy_message(message, buffer_message);
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	6838      	ldr	r0, [r7, #0]
 8003eaa:	f000 f804 	bl	8003eb6 <copy_message>
}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <copy_message>:


// copy_message
//  function to copy all of the data in source to dest by value, not by refernce
static void copy_message(CAN_MSG* source, CAN_MSG* dest)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
	U8 c;

	dest->id = source->id;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	601a      	str	r2, [r3, #0]
	dest->dlc = source->dlc;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	795a      	ldrb	r2, [r3, #5]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	715a      	strb	r2, [r3, #5]
	dest->rtr_bit = source->rtr_bit;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	791a      	ldrb	r2, [r3, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	711a      	strb	r2, [r3, #4]

	for (c = 0; c < dest->dlc; c++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	73fb      	strb	r3, [r7, #15]
 8003edc:	e00b      	b.n	8003ef6 <copy_message+0x40>
	{
		dest->data[c] = source->data[c];
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	7991      	ldrb	r1, [r2, #6]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	4413      	add	r3, r2
 8003eec:	460a      	mov	r2, r1
 8003eee:	719a      	strb	r2, [r3, #6]
	for (c = 0; c < dest->dlc; c++)
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	795b      	ldrb	r3, [r3, #5]
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d3ee      	bcc.n	8003ede <copy_message+0x28>
	}
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f10:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <HAL_Init+0x40>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0d      	ldr	r2, [pc, #52]	; (8003f4c <HAL_Init+0x40>)
 8003f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_Init+0x40>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <HAL_Init+0x40>)
 8003f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <HAL_Init+0x40>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a07      	ldr	r2, [pc, #28]	; (8003f4c <HAL_Init+0x40>)
 8003f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f34:	2003      	movs	r0, #3
 8003f36:	f001 fd32 	bl	800599e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	f7fd fe02 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f40:	f7fd fb4a 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023c00 	.word	0x40023c00

08003f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_IncTick+0x20>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_IncTick+0x24>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4413      	add	r3, r2
 8003f60:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <HAL_IncTick+0x24>)
 8003f62:	6013      	str	r3, [r2, #0]
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000094 	.word	0x20000094
 8003f74:	200072b0 	.word	0x200072b0

08003f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <HAL_GetTick+0x14>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	200072b0 	.word	0x200072b0

08003f90 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8003f9e:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_SetTickFreq+0x48>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	79fa      	ldrb	r2, [r7, #7]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d012      	beq.n	8003fce <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_SetTickFreq+0x48>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <HAL_SetTickFreq+0x48>)
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <HAL_SetTickFreq+0x4c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fd fdc3 	bl	8001b44 <HAL_InitTick>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8003fc8:	4a03      	ldr	r2, [pc, #12]	; (8003fd8 <HAL_SetTickFreq+0x48>)
 8003fca:	7bbb      	ldrb	r3, [r7, #14]
 8003fcc:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000094 	.word	0x20000094
 8003fdc:	20000090 	.word	0x20000090

08003fe0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e033      	b.n	800405e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd fb16 	bl	8001630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	d118      	bne.n	8004050 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004026:	f023 0302 	bic.w	r3, r3, #2
 800402a:	f043 0202 	orr.w	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fbe4 	bl	8004800 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	f043 0201 	orr.w	r2, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40
 800404e:	e001      	b.n	8004054 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800405c:	7bfb      	ldrb	r3, [r7, #15]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b20      	cmp	r3, #32
 8004098:	bf0c      	ite	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	2300      	movne	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d049      	beq.n	800413c <HAL_ADC_IRQHandler+0xd6>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d046      	beq.n	800413c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d105      	bne.n	80040c6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d12b      	bne.n	800412c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d127      	bne.n	800412c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d006      	beq.n	80040f8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d119      	bne.n	800412c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0220 	bic.w	r2, r2, #32
 8004106:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f043 0201 	orr.w	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7fe fc9b 	bl	8002a68 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f06f 0212 	mvn.w	r2, #18
 800413a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b04      	cmp	r3, #4
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d057      	beq.n	800421e <HAL_ADC_IRQHandler+0x1b8>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d054      	beq.n	800421e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d139      	bne.n	800420e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d006      	beq.n	80041b6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d12b      	bne.n	800420e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d124      	bne.n	800420e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d11d      	bne.n	800420e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d119      	bne.n	800420e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fc74 	bl	8004afc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 020c 	mvn.w	r2, #12
 800421c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d017      	beq.n	8004280 <HAL_ADC_IRQHandler+0x21a>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d014      	beq.n	8004280 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10d      	bne.n	8004280 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f97f 	bl	8004574 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f06f 0201 	mvn.w	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b20      	cmp	r3, #32
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a4:	bf0c      	ite	eq
 80042a6:	2301      	moveq	r3, #1
 80042a8:	2300      	movne	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d015      	beq.n	80042e0 <HAL_ADC_IRQHandler+0x27a>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d012      	beq.n	80042e0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	f043 0202 	orr.w	r2, r3, #2
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0220 	mvn.w	r2, #32
 80042ce:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f959 	bl	8004588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f06f 0220 	mvn.w	r2, #32
 80042de:	601a      	str	r2, [r3, #0]
  }
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_ADC_Start_DMA+0x1e>
 8004302:	2302      	movs	r3, #2
 8004304:	e0cc      	b.n	80044a0 <HAL_ADC_Start_DMA+0x1b8>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d018      	beq.n	800434e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800432c:	4b5e      	ldr	r3, [pc, #376]	; (80044a8 <HAL_ADC_Start_DMA+0x1c0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a5e      	ldr	r2, [pc, #376]	; (80044ac <HAL_ADC_Start_DMA+0x1c4>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0c9a      	lsrs	r2, r3, #18
 8004338:	4613      	mov	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004340:	e002      	b.n	8004348 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3b01      	subs	r3, #1
 8004346:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f9      	bne.n	8004342 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	f040 80a0 	bne.w	800449e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004388:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439c:	d106      	bne.n	80043ac <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	f023 0206 	bic.w	r2, r3, #6
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44
 80043aa:	e002      	b.n	80043b2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043ba:	4b3d      	ldr	r3, [pc, #244]	; (80044b0 <HAL_ADC_Start_DMA+0x1c8>)
 80043bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	4a3c      	ldr	r2, [pc, #240]	; (80044b4 <HAL_ADC_Start_DMA+0x1cc>)
 80043c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	4a3b      	ldr	r2, [pc, #236]	; (80044b8 <HAL_ADC_Start_DMA+0x1d0>)
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	4a3a      	ldr	r2, [pc, #232]	; (80044bc <HAL_ADC_Start_DMA+0x1d4>)
 80043d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80043de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80043ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	334c      	adds	r3, #76	; 0x4c
 800440a:	4619      	mov	r1, r3
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f001 fba8 	bl	8005b64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	2b00      	cmp	r3, #0
 800441e:	d12a      	bne.n	8004476 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a26      	ldr	r2, [pc, #152]	; (80044c0 <HAL_ADC_Start_DMA+0x1d8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d015      	beq.n	8004456 <HAL_ADC_Start_DMA+0x16e>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a25      	ldr	r2, [pc, #148]	; (80044c4 <HAL_ADC_Start_DMA+0x1dc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d105      	bne.n	8004440 <HAL_ADC_Start_DMA+0x158>
 8004434:	4b1e      	ldr	r3, [pc, #120]	; (80044b0 <HAL_ADC_Start_DMA+0x1c8>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <HAL_ADC_Start_DMA+0x1e0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d129      	bne.n	800449e <HAL_ADC_Start_DMA+0x1b6>
 800444a:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <HAL_ADC_Start_DMA+0x1c8>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2b0f      	cmp	r3, #15
 8004454:	d823      	bhi.n	800449e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11c      	bne.n	800449e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	e013      	b.n	800449e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <HAL_ADC_Start_DMA+0x1d8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d10e      	bne.n	800449e <HAL_ADC_Start_DMA+0x1b6>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d107      	bne.n	800449e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800449c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20000000 	.word	0x20000000
 80044ac:	431bde83 	.word	0x431bde83
 80044b0:	40012300 	.word	0x40012300
 80044b4:	080049f9 	.word	0x080049f9
 80044b8:	08004ab3 	.word	0x08004ab3
 80044bc:	08004acf 	.word	0x08004acf
 80044c0:	40012000 	.word	0x40012000
 80044c4:	40012100 	.word	0x40012100
 80044c8:	40012200 	.word	0x40012200

080044cc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_ADC_Stop_DMA+0x1a>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e038      	b.n	8004558 <HAL_ADC_Stop_DMA+0x8c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d120      	bne.n	800454e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	4618      	mov	r0, r3
 8004522:	f001 fb77 	bl	8005c14 <HAL_DMA_Abort>
 8004526:	4603      	mov	r3, r0
 8004528:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004538:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	f043 0201 	orr.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x1c>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e113      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x244>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b09      	cmp	r3, #9
 80045c6:	d925      	bls.n	8004614 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68d9      	ldr	r1, [r3, #12]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	4613      	mov	r3, r2
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	4413      	add	r3, r2
 80045dc:	3b1e      	subs	r3, #30
 80045de:	2207      	movs	r2, #7
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43da      	mvns	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	400a      	ands	r2, r1
 80045ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68d9      	ldr	r1, [r3, #12]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	4618      	mov	r0, r3
 8004600:	4603      	mov	r3, r0
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4403      	add	r3, r0
 8004606:	3b1e      	subs	r3, #30
 8004608:	409a      	lsls	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	60da      	str	r2, [r3, #12]
 8004612:	e022      	b.n	800465a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6919      	ldr	r1, [r3, #16]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	2207      	movs	r2, #7
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43da      	mvns	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	400a      	ands	r2, r1
 8004636:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6919      	ldr	r1, [r3, #16]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	4618      	mov	r0, r3
 800464a:	4603      	mov	r3, r0
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	4403      	add	r3, r0
 8004650:	409a      	lsls	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b06      	cmp	r3, #6
 8004660:	d824      	bhi.n	80046ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	3b05      	subs	r3, #5
 8004674:	221f      	movs	r2, #31
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43da      	mvns	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	400a      	ands	r2, r1
 8004682:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	4618      	mov	r0, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	3b05      	subs	r3, #5
 800469e:	fa00 f203 	lsl.w	r2, r0, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	635a      	str	r2, [r3, #52]	; 0x34
 80046aa:	e04c      	b.n	8004746 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b0c      	cmp	r3, #12
 80046b2:	d824      	bhi.n	80046fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	3b23      	subs	r3, #35	; 0x23
 80046c6:	221f      	movs	r2, #31
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43da      	mvns	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	400a      	ands	r2, r1
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	4618      	mov	r0, r3
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	3b23      	subs	r3, #35	; 0x23
 80046f0:	fa00 f203 	lsl.w	r2, r0, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
 80046fc:	e023      	b.n	8004746 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	3b41      	subs	r3, #65	; 0x41
 8004710:	221f      	movs	r2, #31
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43da      	mvns	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	400a      	ands	r2, r1
 800471e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	4618      	mov	r0, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	3b41      	subs	r3, #65	; 0x41
 800473a:	fa00 f203 	lsl.w	r2, r0, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004746:	4b29      	ldr	r3, [pc, #164]	; (80047ec <HAL_ADC_ConfigChannel+0x250>)
 8004748:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a28      	ldr	r2, [pc, #160]	; (80047f0 <HAL_ADC_ConfigChannel+0x254>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d10f      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x1d8>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b12      	cmp	r3, #18
 800475a:	d10b      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <HAL_ADC_ConfigChannel+0x254>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d12b      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x23a>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <HAL_ADC_ConfigChannel+0x258>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <HAL_ADC_ConfigChannel+0x1f4>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b11      	cmp	r3, #17
 800478e:	d122      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a11      	ldr	r2, [pc, #68]	; (80047f4 <HAL_ADC_ConfigChannel+0x258>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d111      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047b2:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <HAL_ADC_ConfigChannel+0x25c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a11      	ldr	r2, [pc, #68]	; (80047fc <HAL_ADC_ConfigChannel+0x260>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	0c9a      	lsrs	r2, r3, #18
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047c8:	e002      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f9      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	40012300 	.word	0x40012300
 80047f0:	40012000 	.word	0x40012000
 80047f4:	10000012 	.word	0x10000012
 80047f8:	20000000 	.word	0x20000000
 80047fc:	431bde83 	.word	0x431bde83

08004800 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004808:	4b79      	ldr	r3, [pc, #484]	; (80049f0 <ADC_Init+0x1f0>)
 800480a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	431a      	orrs	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004834:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	021a      	lsls	r2, r3, #8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004858:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800487a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6899      	ldr	r1, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	4a58      	ldr	r2, [pc, #352]	; (80049f4 <ADC_Init+0x1f4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d022      	beq.n	80048de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6899      	ldr	r1, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6899      	ldr	r1, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	e00f      	b.n	80048fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0202 	bic.w	r2, r2, #2
 800490c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6899      	ldr	r1, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	7e1b      	ldrb	r3, [r3, #24]
 8004918:	005a      	lsls	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01b      	beq.n	8004964 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800493a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800494a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6859      	ldr	r1, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	3b01      	subs	r3, #1
 8004958:	035a      	lsls	r2, r3, #13
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	e007      	b.n	8004974 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004972:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	3b01      	subs	r3, #1
 8004990:	051a      	lsls	r2, r3, #20
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6899      	ldr	r1, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049b6:	025a      	lsls	r2, r3, #9
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6899      	ldr	r1, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	029a      	lsls	r2, r3, #10
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	609a      	str	r2, [r3, #8]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40012300 	.word	0x40012300
 80049f4:	0f000001 	.word	0x0f000001

080049f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d13c      	bne.n	8004a8c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d12b      	bne.n	8004a84 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d127      	bne.n	8004a84 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d006      	beq.n	8004a50 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d119      	bne.n	8004a84 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0220 	bic.w	r2, r2, #32
 8004a5e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d105      	bne.n	8004a84 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	f043 0201 	orr.w	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7fd ffef 	bl	8002a68 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a8a:	e00e      	b.n	8004aaa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff fd75 	bl	8004588 <HAL_ADC_ErrorCallback>
}
 8004a9e:	e004      	b.n	8004aaa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f7ff fd4d 	bl	8004560 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2240      	movs	r2, #64	; 0x40
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	f043 0204 	orr.w	r2, r3, #4
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7ff fd4a 	bl	8004588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e0ed      	b.n	8004cfe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc feda 	bl	80018e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0202 	bic.w	r2, r2, #2
 8004b42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b44:	f7ff fa18 	bl	8003f78 <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b4a:	e012      	b.n	8004b72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b4c:	f7ff fa14 	bl	8003f78 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b0a      	cmp	r3, #10
 8004b58:	d90b      	bls.n	8004b72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2205      	movs	r2, #5
 8004b6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0c5      	b.n	8004cfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e5      	bne.n	8004b4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b90:	f7ff f9f2 	bl	8003f78 <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b96:	e012      	b.n	8004bbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b98:	f7ff f9ee 	bl	8003f78 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b0a      	cmp	r3, #10
 8004ba4:	d90b      	bls.n	8004bbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2205      	movs	r2, #5
 8004bb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e09f      	b.n	8004cfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0e5      	beq.n	8004b98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	7e1b      	ldrb	r3, [r3, #24]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d108      	bne.n	8004be6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e007      	b.n	8004bf6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	7e5b      	ldrb	r3, [r3, #25]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d108      	bne.n	8004c10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e007      	b.n	8004c20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	7e9b      	ldrb	r3, [r3, #26]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d108      	bne.n	8004c3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0220 	orr.w	r2, r2, #32
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e007      	b.n	8004c4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0220 	bic.w	r2, r2, #32
 8004c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	7edb      	ldrb	r3, [r3, #27]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d108      	bne.n	8004c64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0210 	bic.w	r2, r2, #16
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e007      	b.n	8004c74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0210 	orr.w	r2, r2, #16
 8004c72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7f1b      	ldrb	r3, [r3, #28]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d108      	bne.n	8004c8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0208 	orr.w	r2, r2, #8
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e007      	b.n	8004c9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0208 	bic.w	r2, r2, #8
 8004c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	7f5b      	ldrb	r3, [r3, #29]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d108      	bne.n	8004cb8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0204 	orr.w	r2, r2, #4
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e007      	b.n	8004cc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0204 	bic.w	r2, r2, #4
 8004cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	ea42 0103 	orr.w	r1, r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	1e5a      	subs	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d1e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d003      	beq.n	8004d2e <HAL_CAN_ConfigFilter+0x26>
 8004d26:	7cfb      	ldrb	r3, [r7, #19]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	f040 80be 	bne.w	8004eaa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004d2e:	4b65      	ldr	r3, [pc, #404]	; (8004ec4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004d30:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d38:	f043 0201 	orr.w	r2, r3, #1
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	2201      	movs	r2, #1
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	401a      	ands	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d123      	bne.n	8004dd8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004db2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3248      	adds	r2, #72	; 0x48
 8004db8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dcc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dce:	6979      	ldr	r1, [r7, #20]
 8004dd0:	3348      	adds	r3, #72	; 0x48
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	440b      	add	r3, r1
 8004dd6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d122      	bne.n	8004e26 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	3248      	adds	r2, #72	; 0x48
 8004e06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e1c:	6979      	ldr	r1, [r7, #20]
 8004e1e:	3348      	adds	r3, #72	; 0x48
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	440b      	add	r3, r1
 8004e24:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	401a      	ands	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004e40:	e007      	b.n	8004e52 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	401a      	ands	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004e6c:	e007      	b.n	8004e7e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d107      	bne.n	8004e96 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e9c:	f023 0201 	bic.w	r2, r3, #1
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e006      	b.n	8004eb8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40006400 	.word	0x40006400

08004ec8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d12e      	bne.n	8004f3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef4:	f7ff f840 	bl	8003f78 <HAL_GetTick>
 8004ef8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004efa:	e012      	b.n	8004f22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004efc:	f7ff f83c 	bl	8003f78 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b0a      	cmp	r3, #10
 8004f08:	d90b      	bls.n	8004f22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2205      	movs	r2, #5
 8004f1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e012      	b.n	8004f48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e006      	b.n	8004f48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b089      	sub	sp, #36	; 0x24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f64:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f6e:	7ffb      	ldrb	r3, [r7, #31]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d003      	beq.n	8004f7c <HAL_CAN_AddTxMessage+0x2c>
 8004f74:	7ffb      	ldrb	r3, [r7, #31]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	f040 80b8 	bne.w	80050ec <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d105      	bne.n	8004f9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80a0 	beq.w	80050dc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	0e1b      	lsrs	r3, r3, #24
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d907      	bls.n	8004fbc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e09e      	b.n	80050fa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10d      	bne.n	8004fea <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004fd8:	68f9      	ldr	r1, [r7, #12]
 8004fda:	6809      	ldr	r1, [r1, #0]
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	3318      	adds	r3, #24
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	440b      	add	r3, r1
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	e00f      	b.n	800500a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ff4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ffa:	68f9      	ldr	r1, [r7, #12]
 8004ffc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004ffe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	3318      	adds	r3, #24
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	440b      	add	r3, r1
 8005008:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6819      	ldr	r1, [r3, #0]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	3318      	adds	r3, #24
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	440b      	add	r3, r1
 800501a:	3304      	adds	r3, #4
 800501c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	7d1b      	ldrb	r3, [r3, #20]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d111      	bne.n	800504a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	3318      	adds	r3, #24
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	4413      	add	r3, r2
 8005032:	3304      	adds	r3, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	6811      	ldr	r1, [r2, #0]
 800503a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	3318      	adds	r3, #24
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	440b      	add	r3, r1
 8005046:	3304      	adds	r3, #4
 8005048:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3307      	adds	r3, #7
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	061a      	lsls	r2, r3, #24
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3306      	adds	r3, #6
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	041b      	lsls	r3, r3, #16
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3305      	adds	r3, #5
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	4313      	orrs	r3, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	3204      	adds	r2, #4
 800506a:	7812      	ldrb	r2, [r2, #0]
 800506c:	4610      	mov	r0, r2
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	6811      	ldr	r1, [r2, #0]
 8005072:	ea43 0200 	orr.w	r2, r3, r0
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	440b      	add	r3, r1
 800507c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005080:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3303      	adds	r3, #3
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	061a      	lsls	r2, r3, #24
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3302      	adds	r3, #2
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	041b      	lsls	r3, r3, #16
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	4313      	orrs	r3, r2
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	7812      	ldrb	r2, [r2, #0]
 80050a2:	4610      	mov	r0, r2
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	6811      	ldr	r1, [r2, #0]
 80050a8:	ea43 0200 	orr.w	r2, r3, r0
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	440b      	add	r3, r1
 80050b2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80050b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	3318      	adds	r3, #24
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	4413      	add	r3, r2
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	6811      	ldr	r1, [r2, #0]
 80050ca:	f043 0201 	orr.w	r2, r3, #1
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	3318      	adds	r3, #24
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	440b      	add	r3, r1
 80050d6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e00e      	b.n	80050fa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e006      	b.n	80050fa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
  }
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3724      	adds	r7, #36	; 0x24
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8005106:	b480      	push	{r7}
 8005108:	b085      	sub	sp, #20
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005118:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800511a:	7afb      	ldrb	r3, [r7, #11]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d002      	beq.n	8005126 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005120:	7afb      	ldrb	r3, [r7, #11]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d11d      	bne.n	8005162 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3301      	adds	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005162:	68fb      	ldr	r3, [r7, #12]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005184:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d003      	beq.n	8005194 <HAL_CAN_GetRxMessage+0x24>
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	2b02      	cmp	r3, #2
 8005190:	f040 80f3 	bne.w	800537a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10e      	bne.n	80051b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d116      	bne.n	80051d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0e7      	b.n	8005388 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d107      	bne.n	80051d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e0d8      	b.n	8005388 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	331b      	adds	r3, #27
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	4413      	add	r3, r2
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0204 	and.w	r2, r3, #4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10c      	bne.n	800520e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	331b      	adds	r3, #27
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	4413      	add	r3, r2
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	0d5b      	lsrs	r3, r3, #21
 8005204:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e00b      	b.n	8005226 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	331b      	adds	r3, #27
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	4413      	add	r3, r2
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	08db      	lsrs	r3, r3, #3
 800521e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	331b      	adds	r3, #27
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	4413      	add	r3, r2
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0202 	and.w	r2, r3, #2
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	331b      	adds	r3, #27
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	4413      	add	r3, r2
 8005248:	3304      	adds	r3, #4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 020f 	and.w	r2, r3, #15
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	331b      	adds	r3, #27
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	4413      	add	r3, r2
 8005260:	3304      	adds	r3, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	0a1b      	lsrs	r3, r3, #8
 8005266:	b2da      	uxtb	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	331b      	adds	r3, #27
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	4413      	add	r3, r2
 8005278:	3304      	adds	r3, #4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	b29a      	uxth	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	4413      	add	r3, r2
 800528e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	0a1a      	lsrs	r2, r3, #8
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	3301      	adds	r3, #1
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	4413      	add	r3, r2
 80052be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	0c1a      	lsrs	r2, r3, #16
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	3302      	adds	r3, #2
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	0e1a      	lsrs	r2, r3, #24
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	3303      	adds	r3, #3
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	3304      	adds	r3, #4
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	4413      	add	r3, r2
 800530a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	0a1a      	lsrs	r2, r3, #8
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	3305      	adds	r3, #5
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	4413      	add	r3, r2
 8005324:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	0c1a      	lsrs	r2, r3, #16
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	3306      	adds	r3, #6
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	4413      	add	r3, r2
 800533e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	0e1a      	lsrs	r2, r3, #24
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	3307      	adds	r3, #7
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d108      	bne.n	8005366 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0220 	orr.w	r2, r2, #32
 8005362:	60da      	str	r2, [r3, #12]
 8005364:	e007      	b.n	8005376 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0220 	orr.w	r2, r2, #32
 8005374:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e006      	b.n	8005388 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
  }
}
 8005388:	4618      	mov	r0, r3
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053a8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80053aa:	7afb      	ldrb	r3, [r7, #11]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d002      	beq.n	80053b6 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80053b0:	7afb      	ldrb	r3, [r7, #11]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d10f      	bne.n	80053d6 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e005      	b.n	80053d6 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80053d6:	68fb      	ldr	r3, [r7, #12]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d002      	beq.n	8005402 <HAL_CAN_ActivateNotification+0x1e>
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d109      	bne.n	8005416 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6959      	ldr	r1, [r3, #20]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	e006      	b.n	8005424 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005440:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d002      	beq.n	800544e <HAL_CAN_DeactivateNotification+0x1e>
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d10a      	bne.n	8005464 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6959      	ldr	r1, [r3, #20]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	43da      	mvns	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	400a      	ands	r2, r1
 800545e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e006      	b.n	8005472 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
  }
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b08a      	sub	sp, #40	; 0x28
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005486:	2300      	movs	r3, #0
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d07c      	beq.n	80055be <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d023      	beq.n	8005516 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2201      	movs	r2, #1
 80054d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7fe fbe5 	bl	8003cb0 <HAL_CAN_TxMailbox0CompleteCallback>
 80054e6:	e016      	b.n	8005516 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	e00c      	b.n	8005516 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
 800550e:	e002      	b.n	8005516 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fe fbee 	bl	8003cf2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551c:	2b00      	cmp	r3, #0
 800551e:	d024      	beq.n	800556a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005528:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7fe fbc6 	bl	8003cc6 <HAL_CAN_TxMailbox1CompleteCallback>
 800553a:	e016      	b.n	800556a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005542:	2b00      	cmp	r3, #0
 8005544:	d004      	beq.n	8005550 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
 800554e:	e00c      	b.n	800556a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
 8005562:	e002      	b.n	800556a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fe fbcf 	bl	8003d08 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d024      	beq.n	80055be <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800557c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fe fba7 	bl	8003cdc <HAL_CAN_TxMailbox2CompleteCallback>
 800558e:	e016      	b.n	80055be <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
 80055a2:	e00c      	b.n	80055be <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
 80055b6:	e002      	b.n	80055be <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fe fbb0 	bl	8003d1e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00c      	beq.n	80055e2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2210      	movs	r2, #16
 80055e0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2208      	movs	r2, #8
 80055fc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8ee 	bl	80057e0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7fd fe65 	bl	80032ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00c      	beq.n	8005646 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800563c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2210      	movs	r2, #16
 8005644:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00b      	beq.n	8005668 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d006      	beq.n	8005668 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2208      	movs	r2, #8
 8005660:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f8c6 	bl	80057f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7fd fe3f 	bl	8003304 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b00      	cmp	r3, #0
 8005698:	d006      	beq.n	80056a8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2210      	movs	r2, #16
 80056a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8b0 	bl	8005808 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d006      	beq.n	80056ca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2208      	movs	r2, #8
 80056c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f8a9 	bl	800581c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d075      	beq.n	80057c0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d06c      	beq.n	80057b8 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	f043 0304 	orr.w	r3, r3, #4
 8005730:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005738:	2b00      	cmp	r3, #0
 800573a:	d03d      	beq.n	80057b8 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005742:	2b00      	cmp	r3, #0
 8005744:	d038      	beq.n	80057b8 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800574c:	2b30      	cmp	r3, #48	; 0x30
 800574e:	d017      	beq.n	8005780 <HAL_CAN_IRQHandler+0x302>
 8005750:	2b30      	cmp	r3, #48	; 0x30
 8005752:	d804      	bhi.n	800575e <HAL_CAN_IRQHandler+0x2e0>
 8005754:	2b10      	cmp	r3, #16
 8005756:	d009      	beq.n	800576c <HAL_CAN_IRQHandler+0x2ee>
 8005758:	2b20      	cmp	r3, #32
 800575a:	d00c      	beq.n	8005776 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800575c:	e024      	b.n	80057a8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800575e:	2b50      	cmp	r3, #80	; 0x50
 8005760:	d018      	beq.n	8005794 <HAL_CAN_IRQHandler+0x316>
 8005762:	2b60      	cmp	r3, #96	; 0x60
 8005764:	d01b      	beq.n	800579e <HAL_CAN_IRQHandler+0x320>
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d00f      	beq.n	800578a <HAL_CAN_IRQHandler+0x30c>
            break;
 800576a:	e01d      	b.n	80057a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	f043 0308 	orr.w	r3, r3, #8
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005774:	e018      	b.n	80057a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	f043 0310 	orr.w	r3, r3, #16
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800577e:	e013      	b.n	80057a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	f043 0320 	orr.w	r3, r3, #32
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005788:	e00e      	b.n	80057a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005792:	e009      	b.n	80057a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800579c:	e004      	b.n	80057a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057a6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80057b6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2204      	movs	r2, #4
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f82c 	bl	8005830 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80057d8:	bf00      	nop
 80057da:	3728      	adds	r7, #40	; 0x28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <__NVIC_SetPriorityGrouping>:
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <__NVIC_SetPriorityGrouping+0x44>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800586c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005876:	4a04      	ldr	r2, [pc, #16]	; (8005888 <__NVIC_SetPriorityGrouping+0x44>)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	60d3      	str	r3, [r2, #12]
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	e000ed00 	.word	0xe000ed00

0800588c <__NVIC_GetPriorityGrouping>:
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	f003 0307 	and.w	r3, r3, #7
}
 800589a:	4618      	mov	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <__NVIC_EnableIRQ>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	db0b      	blt.n	80058d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	f003 021f 	and.w	r2, r3, #31
 80058c0:	4907      	ldr	r1, [pc, #28]	; (80058e0 <__NVIC_EnableIRQ+0x38>)
 80058c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	2001      	movs	r0, #1
 80058ca:	fa00 f202 	lsl.w	r2, r0, r2
 80058ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	e000e100 	.word	0xe000e100

080058e4 <__NVIC_SetPriority>:
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	6039      	str	r1, [r7, #0]
 80058ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	db0a      	blt.n	800590e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	490c      	ldr	r1, [pc, #48]	; (8005930 <__NVIC_SetPriority+0x4c>)
 80058fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005902:	0112      	lsls	r2, r2, #4
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	440b      	add	r3, r1
 8005908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800590c:	e00a      	b.n	8005924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	b2da      	uxtb	r2, r3
 8005912:	4908      	ldr	r1, [pc, #32]	; (8005934 <__NVIC_SetPriority+0x50>)
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	3b04      	subs	r3, #4
 800591c:	0112      	lsls	r2, r2, #4
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	440b      	add	r3, r1
 8005922:	761a      	strb	r2, [r3, #24]
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	e000e100 	.word	0xe000e100
 8005934:	e000ed00 	.word	0xe000ed00

08005938 <NVIC_EncodePriority>:
{
 8005938:	b480      	push	{r7}
 800593a:	b089      	sub	sp, #36	; 0x24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f1c3 0307 	rsb	r3, r3, #7
 8005952:	2b04      	cmp	r3, #4
 8005954:	bf28      	it	cs
 8005956:	2304      	movcs	r3, #4
 8005958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	3304      	adds	r3, #4
 800595e:	2b06      	cmp	r3, #6
 8005960:	d902      	bls.n	8005968 <NVIC_EncodePriority+0x30>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3b03      	subs	r3, #3
 8005966:	e000      	b.n	800596a <NVIC_EncodePriority+0x32>
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	43da      	mvns	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	401a      	ands	r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005980:	f04f 31ff 	mov.w	r1, #4294967295
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	43d9      	mvns	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005990:	4313      	orrs	r3, r2
}
 8005992:	4618      	mov	r0, r3
 8005994:	3724      	adds	r7, #36	; 0x24
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff ff4c 	bl	8005844 <__NVIC_SetPriorityGrouping>
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059c6:	f7ff ff61 	bl	800588c <__NVIC_GetPriorityGrouping>
 80059ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	6978      	ldr	r0, [r7, #20]
 80059d2:	f7ff ffb1 	bl	8005938 <NVIC_EncodePriority>
 80059d6:	4602      	mov	r2, r0
 80059d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059dc:	4611      	mov	r1, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff ff80 	bl	80058e4 <__NVIC_SetPriority>
}
 80059e4:	bf00      	nop
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff ff54 	bl	80058a8 <__NVIC_EnableIRQ>
}
 8005a00:	bf00      	nop
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a14:	f7fe fab0 	bl	8003f78 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e099      	b.n	8005b58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a44:	e00f      	b.n	8005a66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a46:	f7fe fa97 	bl	8003f78 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	d908      	bls.n	8005a66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e078      	b.n	8005b58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e8      	bne.n	8005a46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4b38      	ldr	r3, [pc, #224]	; (8005b60 <HAL_DMA_Init+0x158>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d107      	bne.n	8005ad0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0307 	bic.w	r3, r3, #7
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d117      	bne.n	8005b2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00e      	beq.n	8005b2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fadf 	bl	80060d0 <DMA_CheckFifoParam>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2240      	movs	r2, #64	; 0x40
 8005b1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b26:	2301      	movs	r3, #1
 8005b28:	e016      	b.n	8005b58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa96 	bl	8006064 <DMA_CalcBaseAndBitshift>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b40:	223f      	movs	r2, #63	; 0x3f
 8005b42:	409a      	lsls	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	f010803f 	.word	0xf010803f

08005b64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_DMA_Start_IT+0x26>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e040      	b.n	8005c0c <HAL_DMA_Start_IT+0xa8>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d12f      	bne.n	8005bfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fa28 	bl	8006008 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bbc:	223f      	movs	r2, #63	; 0x3f
 8005bbe:	409a      	lsls	r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0216 	orr.w	r2, r2, #22
 8005bd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0208 	orr.w	r2, r2, #8
 8005bea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	e005      	b.n	8005c0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c06:	2302      	movs	r3, #2
 8005c08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c22:	f7fe f9a9 	bl	8003f78 <HAL_GetTick>
 8005c26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d008      	beq.n	8005c46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2280      	movs	r2, #128	; 0x80
 8005c38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e052      	b.n	8005cec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0216 	bic.w	r2, r2, #22
 8005c54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695a      	ldr	r2, [r3, #20]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d103      	bne.n	8005c76 <HAL_DMA_Abort+0x62>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0208 	bic.w	r2, r2, #8
 8005c84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c96:	e013      	b.n	8005cc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c98:	f7fe f96e 	bl	8003f78 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b05      	cmp	r3, #5
 8005ca4:	d90c      	bls.n	8005cc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e015      	b.n	8005cec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e4      	bne.n	8005c98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd2:	223f      	movs	r2, #63	; 0x3f
 8005cd4:	409a      	lsls	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d00:	4b92      	ldr	r3, [pc, #584]	; (8005f4c <HAL_DMA_IRQHandler+0x258>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a92      	ldr	r2, [pc, #584]	; (8005f50 <HAL_DMA_IRQHandler+0x25c>)
 8005d06:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0a:	0a9b      	lsrs	r3, r3, #10
 8005d0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1e:	2208      	movs	r2, #8
 8005d20:	409a      	lsls	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01a      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d013      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0204 	bic.w	r2, r2, #4
 8005d46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d58:	f043 0201 	orr.w	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	2201      	movs	r2, #1
 8005d66:	409a      	lsls	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d012      	beq.n	8005d96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d82:	2201      	movs	r2, #1
 8005d84:	409a      	lsls	r2, r3
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8e:	f043 0202 	orr.w	r2, r3, #2
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d012      	beq.n	8005dcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00b      	beq.n	8005dcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db8:	2204      	movs	r2, #4
 8005dba:	409a      	lsls	r2, r3
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc4:	f043 0204 	orr.w	r2, r3, #4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	409a      	lsls	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d043      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d03c      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dee:	2210      	movs	r2, #16
 8005df0:	409a      	lsls	r2, r3
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d018      	beq.n	8005e36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d108      	bne.n	8005e24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d024      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	4798      	blx	r3
 8005e22:	e01f      	b.n	8005e64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01b      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	4798      	blx	r3
 8005e34:	e016      	b.n	8005e64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d107      	bne.n	8005e54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0208 	bic.w	r2, r2, #8
 8005e52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e68:	2220      	movs	r2, #32
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 808e 	beq.w	8005f92 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8086 	beq.w	8005f92 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	409a      	lsls	r2, r3
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d136      	bne.n	8005f0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0216 	bic.w	r2, r2, #22
 8005eac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ebc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d103      	bne.n	8005ece <HAL_DMA_IRQHandler+0x1da>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0208 	bic.w	r2, r2, #8
 8005edc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee2:	223f      	movs	r2, #63	; 0x3f
 8005ee4:	409a      	lsls	r2, r3
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d07d      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
        }
        return;
 8005f0a:	e078      	b.n	8005ffe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d01c      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d108      	bne.n	8005f3a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d030      	beq.n	8005f92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
 8005f38:	e02b      	b.n	8005f92 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d027      	beq.n	8005f92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	4798      	blx	r3
 8005f4a:	e022      	b.n	8005f92 <HAL_DMA_IRQHandler+0x29e>
 8005f4c:	20000000 	.word	0x20000000
 8005f50:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10f      	bne.n	8005f82 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0210 	bic.w	r2, r2, #16
 8005f70:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d032      	beq.n	8006000 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d022      	beq.n	8005fec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2205      	movs	r2, #5
 8005faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0201 	bic.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60bb      	str	r3, [r7, #8]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d307      	bcc.n	8005fda <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1f2      	bne.n	8005fbe <HAL_DMA_IRQHandler+0x2ca>
 8005fd8:	e000      	b.n	8005fdc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005fda:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	4798      	blx	r3
 8005ffc:	e000      	b.n	8006000 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005ffe:	bf00      	nop
    }
  }
}
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop

08006008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006024:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d108      	bne.n	8006048 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006046:	e007      	b.n	8006058 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	60da      	str	r2, [r3, #12]
}
 8006058:	bf00      	nop
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	b2db      	uxtb	r3, r3
 8006072:	3b10      	subs	r3, #16
 8006074:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <DMA_CalcBaseAndBitshift+0x64>)
 8006076:	fba2 2303 	umull	r2, r3, r2, r3
 800607a:	091b      	lsrs	r3, r3, #4
 800607c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800607e:	4a13      	ldr	r2, [pc, #76]	; (80060cc <DMA_CalcBaseAndBitshift+0x68>)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b03      	cmp	r3, #3
 8006090:	d909      	bls.n	80060a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	1d1a      	adds	r2, r3, #4
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	659a      	str	r2, [r3, #88]	; 0x58
 80060a4:	e007      	b.n	80060b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	aaaaaaab 	.word	0xaaaaaaab
 80060cc:	0800a764 	.word	0x0800a764

080060d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d11f      	bne.n	800612a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d855      	bhi.n	800619c <DMA_CheckFifoParam+0xcc>
 80060f0:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <DMA_CheckFifoParam+0x28>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	08006109 	.word	0x08006109
 80060fc:	0800611b 	.word	0x0800611b
 8006100:	08006109 	.word	0x08006109
 8006104:	0800619d 	.word	0x0800619d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d045      	beq.n	80061a0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006118:	e042      	b.n	80061a0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006122:	d13f      	bne.n	80061a4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006128:	e03c      	b.n	80061a4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006132:	d121      	bne.n	8006178 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b03      	cmp	r3, #3
 8006138:	d836      	bhi.n	80061a8 <DMA_CheckFifoParam+0xd8>
 800613a:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <DMA_CheckFifoParam+0x70>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006151 	.word	0x08006151
 8006144:	08006157 	.word	0x08006157
 8006148:	08006151 	.word	0x08006151
 800614c:	08006169 	.word	0x08006169
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]
      break;
 8006154:	e02f      	b.n	80061b6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d024      	beq.n	80061ac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006166:	e021      	b.n	80061ac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006170:	d11e      	bne.n	80061b0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006176:	e01b      	b.n	80061b0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d902      	bls.n	8006184 <DMA_CheckFifoParam+0xb4>
 800617e:	2b03      	cmp	r3, #3
 8006180:	d003      	beq.n	800618a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006182:	e018      	b.n	80061b6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
      break;
 8006188:	e015      	b.n	80061b6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00e      	beq.n	80061b4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]
      break;
 800619a:	e00b      	b.n	80061b4 <DMA_CheckFifoParam+0xe4>
      break;
 800619c:	bf00      	nop
 800619e:	e00a      	b.n	80061b6 <DMA_CheckFifoParam+0xe6>
      break;
 80061a0:	bf00      	nop
 80061a2:	e008      	b.n	80061b6 <DMA_CheckFifoParam+0xe6>
      break;
 80061a4:	bf00      	nop
 80061a6:	e006      	b.n	80061b6 <DMA_CheckFifoParam+0xe6>
      break;
 80061a8:	bf00      	nop
 80061aa:	e004      	b.n	80061b6 <DMA_CheckFifoParam+0xe6>
      break;
 80061ac:	bf00      	nop
 80061ae:	e002      	b.n	80061b6 <DMA_CheckFifoParam+0xe6>
      break;   
 80061b0:	bf00      	nop
 80061b2:	e000      	b.n	80061b6 <DMA_CheckFifoParam+0xe6>
      break;
 80061b4:	bf00      	nop
    }
  } 
  
  return status; 
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b089      	sub	sp, #36	; 0x24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061da:	2300      	movs	r3, #0
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	e177      	b.n	80064d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061e0:	2201      	movs	r2, #1
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4013      	ands	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	f040 8166 	bne.w	80064ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d00b      	beq.n	800621e <HAL_GPIO_Init+0x5a>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d007      	beq.n	800621e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006212:	2b11      	cmp	r3, #17
 8006214:	d003      	beq.n	800621e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b12      	cmp	r3, #18
 800621c:	d130      	bne.n	8006280 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	2203      	movs	r2, #3
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	43db      	mvns	r3, r3
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	4013      	ands	r3, r2
 8006234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	4313      	orrs	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006254:	2201      	movs	r2, #1
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	43db      	mvns	r3, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	4013      	ands	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	091b      	lsrs	r3, r3, #4
 800626a:	f003 0201 	and.w	r2, r3, #1
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4313      	orrs	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	2203      	movs	r2, #3
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	43db      	mvns	r3, r3
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	4013      	ands	r3, r2
 8006296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d003      	beq.n	80062c0 <HAL_GPIO_Init+0xfc>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b12      	cmp	r3, #18
 80062be:	d123      	bne.n	8006308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	08da      	lsrs	r2, r3, #3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3208      	adds	r2, #8
 80062c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	220f      	movs	r2, #15
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	43db      	mvns	r3, r3
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	4013      	ands	r3, r2
 80062e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	08da      	lsrs	r2, r3, #3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3208      	adds	r2, #8
 8006302:	69b9      	ldr	r1, [r7, #24]
 8006304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	2203      	movs	r2, #3
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	43db      	mvns	r3, r3
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	4013      	ands	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 0203 	and.w	r2, r3, #3
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	4313      	orrs	r3, r2
 8006334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80c0 	beq.w	80064ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	4b65      	ldr	r3, [pc, #404]	; (80064e4 <HAL_GPIO_Init+0x320>)
 8006350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006352:	4a64      	ldr	r2, [pc, #400]	; (80064e4 <HAL_GPIO_Init+0x320>)
 8006354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006358:	6453      	str	r3, [r2, #68]	; 0x44
 800635a:	4b62      	ldr	r3, [pc, #392]	; (80064e4 <HAL_GPIO_Init+0x320>)
 800635c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006366:	4a60      	ldr	r2, [pc, #384]	; (80064e8 <HAL_GPIO_Init+0x324>)
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	089b      	lsrs	r3, r3, #2
 800636c:	3302      	adds	r3, #2
 800636e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	220f      	movs	r2, #15
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	43db      	mvns	r3, r3
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	4013      	ands	r3, r2
 8006388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a57      	ldr	r2, [pc, #348]	; (80064ec <HAL_GPIO_Init+0x328>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d037      	beq.n	8006402 <HAL_GPIO_Init+0x23e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a56      	ldr	r2, [pc, #344]	; (80064f0 <HAL_GPIO_Init+0x32c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d031      	beq.n	80063fe <HAL_GPIO_Init+0x23a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a55      	ldr	r2, [pc, #340]	; (80064f4 <HAL_GPIO_Init+0x330>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d02b      	beq.n	80063fa <HAL_GPIO_Init+0x236>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a54      	ldr	r2, [pc, #336]	; (80064f8 <HAL_GPIO_Init+0x334>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d025      	beq.n	80063f6 <HAL_GPIO_Init+0x232>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a53      	ldr	r2, [pc, #332]	; (80064fc <HAL_GPIO_Init+0x338>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d01f      	beq.n	80063f2 <HAL_GPIO_Init+0x22e>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a52      	ldr	r2, [pc, #328]	; (8006500 <HAL_GPIO_Init+0x33c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d019      	beq.n	80063ee <HAL_GPIO_Init+0x22a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a51      	ldr	r2, [pc, #324]	; (8006504 <HAL_GPIO_Init+0x340>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <HAL_GPIO_Init+0x226>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a50      	ldr	r2, [pc, #320]	; (8006508 <HAL_GPIO_Init+0x344>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00d      	beq.n	80063e6 <HAL_GPIO_Init+0x222>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a4f      	ldr	r2, [pc, #316]	; (800650c <HAL_GPIO_Init+0x348>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d007      	beq.n	80063e2 <HAL_GPIO_Init+0x21e>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a4e      	ldr	r2, [pc, #312]	; (8006510 <HAL_GPIO_Init+0x34c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d101      	bne.n	80063de <HAL_GPIO_Init+0x21a>
 80063da:	2309      	movs	r3, #9
 80063dc:	e012      	b.n	8006404 <HAL_GPIO_Init+0x240>
 80063de:	230a      	movs	r3, #10
 80063e0:	e010      	b.n	8006404 <HAL_GPIO_Init+0x240>
 80063e2:	2308      	movs	r3, #8
 80063e4:	e00e      	b.n	8006404 <HAL_GPIO_Init+0x240>
 80063e6:	2307      	movs	r3, #7
 80063e8:	e00c      	b.n	8006404 <HAL_GPIO_Init+0x240>
 80063ea:	2306      	movs	r3, #6
 80063ec:	e00a      	b.n	8006404 <HAL_GPIO_Init+0x240>
 80063ee:	2305      	movs	r3, #5
 80063f0:	e008      	b.n	8006404 <HAL_GPIO_Init+0x240>
 80063f2:	2304      	movs	r3, #4
 80063f4:	e006      	b.n	8006404 <HAL_GPIO_Init+0x240>
 80063f6:	2303      	movs	r3, #3
 80063f8:	e004      	b.n	8006404 <HAL_GPIO_Init+0x240>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e002      	b.n	8006404 <HAL_GPIO_Init+0x240>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <HAL_GPIO_Init+0x240>
 8006402:	2300      	movs	r3, #0
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	f002 0203 	and.w	r2, r2, #3
 800640a:	0092      	lsls	r2, r2, #2
 800640c:	4093      	lsls	r3, r2
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	4313      	orrs	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006414:	4934      	ldr	r1, [pc, #208]	; (80064e8 <HAL_GPIO_Init+0x324>)
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	089b      	lsrs	r3, r3, #2
 800641a:	3302      	adds	r3, #2
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006422:	4b3c      	ldr	r3, [pc, #240]	; (8006514 <HAL_GPIO_Init+0x350>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	43db      	mvns	r3, r3
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	4013      	ands	r3, r2
 8006430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006446:	4a33      	ldr	r2, [pc, #204]	; (8006514 <HAL_GPIO_Init+0x350>)
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800644c:	4b31      	ldr	r3, [pc, #196]	; (8006514 <HAL_GPIO_Init+0x350>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	43db      	mvns	r3, r3
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	4013      	ands	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006470:	4a28      	ldr	r2, [pc, #160]	; (8006514 <HAL_GPIO_Init+0x350>)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006476:	4b27      	ldr	r3, [pc, #156]	; (8006514 <HAL_GPIO_Init+0x350>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	43db      	mvns	r3, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	4013      	ands	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800649a:	4a1e      	ldr	r2, [pc, #120]	; (8006514 <HAL_GPIO_Init+0x350>)
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064a0:	4b1c      	ldr	r3, [pc, #112]	; (8006514 <HAL_GPIO_Init+0x350>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	43db      	mvns	r3, r3
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	4013      	ands	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064c4:	4a13      	ldr	r2, [pc, #76]	; (8006514 <HAL_GPIO_Init+0x350>)
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	3301      	adds	r3, #1
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	f67f ae84 	bls.w	80061e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064d8:	bf00      	nop
 80064da:	3724      	adds	r7, #36	; 0x24
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	40023800 	.word	0x40023800
 80064e8:	40013800 	.word	0x40013800
 80064ec:	40020000 	.word	0x40020000
 80064f0:	40020400 	.word	0x40020400
 80064f4:	40020800 	.word	0x40020800
 80064f8:	40020c00 	.word	0x40020c00
 80064fc:	40021000 	.word	0x40021000
 8006500:	40021400 	.word	0x40021400
 8006504:	40021800 	.word	0x40021800
 8006508:	40021c00 	.word	0x40021c00
 800650c:	40022000 	.word	0x40022000
 8006510:	40022400 	.word	0x40022400
 8006514:	40013c00 	.word	0x40013c00

08006518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e25b      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d075      	beq.n	8006622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006536:	4ba3      	ldr	r3, [pc, #652]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	2b04      	cmp	r3, #4
 8006540:	d00c      	beq.n	800655c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006542:	4ba0      	ldr	r3, [pc, #640]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800654a:	2b08      	cmp	r3, #8
 800654c:	d112      	bne.n	8006574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800654e:	4b9d      	ldr	r3, [pc, #628]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800655a:	d10b      	bne.n	8006574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800655c:	4b99      	ldr	r3, [pc, #612]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05b      	beq.n	8006620 <HAL_RCC_OscConfig+0x108>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d157      	bne.n	8006620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e236      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657c:	d106      	bne.n	800658c <HAL_RCC_OscConfig+0x74>
 800657e:	4b91      	ldr	r3, [pc, #580]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a90      	ldr	r2, [pc, #576]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	e01d      	b.n	80065c8 <HAL_RCC_OscConfig+0xb0>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006594:	d10c      	bne.n	80065b0 <HAL_RCC_OscConfig+0x98>
 8006596:	4b8b      	ldr	r3, [pc, #556]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a8a      	ldr	r2, [pc, #552]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800659c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	4b88      	ldr	r3, [pc, #544]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a87      	ldr	r2, [pc, #540]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e00b      	b.n	80065c8 <HAL_RCC_OscConfig+0xb0>
 80065b0:	4b84      	ldr	r3, [pc, #528]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a83      	ldr	r2, [pc, #524]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	4b81      	ldr	r3, [pc, #516]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a80      	ldr	r2, [pc, #512]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d013      	beq.n	80065f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d0:	f7fd fcd2 	bl	8003f78 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065d8:	f7fd fcce 	bl	8003f78 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b64      	cmp	r3, #100	; 0x64
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e1fb      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ea:	4b76      	ldr	r3, [pc, #472]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HAL_RCC_OscConfig+0xc0>
 80065f6:	e014      	b.n	8006622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f8:	f7fd fcbe 	bl	8003f78 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006600:	f7fd fcba 	bl	8003f78 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b64      	cmp	r3, #100	; 0x64
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e1e7      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006612:	4b6c      	ldr	r3, [pc, #432]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0xe8>
 800661e:	e000      	b.n	8006622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d063      	beq.n	80066f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800662e:	4b65      	ldr	r3, [pc, #404]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 030c 	and.w	r3, r3, #12
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800663a:	4b62      	ldr	r3, [pc, #392]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006642:	2b08      	cmp	r3, #8
 8006644:	d11c      	bne.n	8006680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006646:	4b5f      	ldr	r3, [pc, #380]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d116      	bne.n	8006680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006652:	4b5c      	ldr	r3, [pc, #368]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <HAL_RCC_OscConfig+0x152>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d001      	beq.n	800666a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e1bb      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666a:	4b56      	ldr	r3, [pc, #344]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4952      	ldr	r1, [pc, #328]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800667a:	4313      	orrs	r3, r2
 800667c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800667e:	e03a      	b.n	80066f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d020      	beq.n	80066ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006688:	4b4f      	ldr	r3, [pc, #316]	; (80067c8 <HAL_RCC_OscConfig+0x2b0>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668e:	f7fd fc73 	bl	8003f78 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006696:	f7fd fc6f 	bl	8003f78 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e19c      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a8:	4b46      	ldr	r3, [pc, #280]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b4:	4b43      	ldr	r3, [pc, #268]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	4940      	ldr	r1, [pc, #256]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	600b      	str	r3, [r1, #0]
 80066c8:	e015      	b.n	80066f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ca:	4b3f      	ldr	r3, [pc, #252]	; (80067c8 <HAL_RCC_OscConfig+0x2b0>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d0:	f7fd fc52 	bl	8003f78 <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066d8:	f7fd fc4e 	bl	8003f78 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e17b      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ea:	4b36      	ldr	r3, [pc, #216]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1f0      	bne.n	80066d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d030      	beq.n	8006764 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d016      	beq.n	8006738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800670a:	4b30      	ldr	r3, [pc, #192]	; (80067cc <HAL_RCC_OscConfig+0x2b4>)
 800670c:	2201      	movs	r2, #1
 800670e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006710:	f7fd fc32 	bl	8003f78 <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006718:	f7fd fc2e 	bl	8003f78 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e15b      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800672a:	4b26      	ldr	r3, [pc, #152]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800672c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <HAL_RCC_OscConfig+0x200>
 8006736:	e015      	b.n	8006764 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006738:	4b24      	ldr	r3, [pc, #144]	; (80067cc <HAL_RCC_OscConfig+0x2b4>)
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800673e:	f7fd fc1b 	bl	8003f78 <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006746:	f7fd fc17 	bl	8003f78 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e144      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006758:	4b1a      	ldr	r3, [pc, #104]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800675a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1f0      	bne.n	8006746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80a0 	beq.w	80068b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10f      	bne.n	80067a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006782:	2300      	movs	r3, #0
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	4a0e      	ldr	r2, [pc, #56]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800678c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006790:	6413      	str	r3, [r2, #64]	; 0x40
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679a:	60bb      	str	r3, [r7, #8]
 800679c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800679e:	2301      	movs	r3, #1
 80067a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a2:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <HAL_RCC_OscConfig+0x2b8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d121      	bne.n	80067f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ae:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <HAL_RCC_OscConfig+0x2b8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a07      	ldr	r2, [pc, #28]	; (80067d0 <HAL_RCC_OscConfig+0x2b8>)
 80067b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ba:	f7fd fbdd 	bl	8003f78 <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c0:	e011      	b.n	80067e6 <HAL_RCC_OscConfig+0x2ce>
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800
 80067c8:	42470000 	.word	0x42470000
 80067cc:	42470e80 	.word	0x42470e80
 80067d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d4:	f7fd fbd0 	bl	8003f78 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e0fd      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e6:	4b81      	ldr	r3, [pc, #516]	; (80069ec <HAL_RCC_OscConfig+0x4d4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d106      	bne.n	8006808 <HAL_RCC_OscConfig+0x2f0>
 80067fa:	4b7d      	ldr	r3, [pc, #500]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	4a7c      	ldr	r2, [pc, #496]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	6713      	str	r3, [r2, #112]	; 0x70
 8006806:	e01c      	b.n	8006842 <HAL_RCC_OscConfig+0x32a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b05      	cmp	r3, #5
 800680e:	d10c      	bne.n	800682a <HAL_RCC_OscConfig+0x312>
 8006810:	4b77      	ldr	r3, [pc, #476]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	4a76      	ldr	r2, [pc, #472]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006816:	f043 0304 	orr.w	r3, r3, #4
 800681a:	6713      	str	r3, [r2, #112]	; 0x70
 800681c:	4b74      	ldr	r3, [pc, #464]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	4a73      	ldr	r2, [pc, #460]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	6713      	str	r3, [r2, #112]	; 0x70
 8006828:	e00b      	b.n	8006842 <HAL_RCC_OscConfig+0x32a>
 800682a:	4b71      	ldr	r3, [pc, #452]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	4a70      	ldr	r2, [pc, #448]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006830:	f023 0301 	bic.w	r3, r3, #1
 8006834:	6713      	str	r3, [r2, #112]	; 0x70
 8006836:	4b6e      	ldr	r3, [pc, #440]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	4a6d      	ldr	r2, [pc, #436]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 800683c:	f023 0304 	bic.w	r3, r3, #4
 8006840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d015      	beq.n	8006876 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684a:	f7fd fb95 	bl	8003f78 <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006850:	e00a      	b.n	8006868 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006852:	f7fd fb91 	bl	8003f78 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006860:	4293      	cmp	r3, r2
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e0bc      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006868:	4b61      	ldr	r3, [pc, #388]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0ee      	beq.n	8006852 <HAL_RCC_OscConfig+0x33a>
 8006874:	e014      	b.n	80068a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006876:	f7fd fb7f 	bl	8003f78 <HAL_GetTick>
 800687a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800687c:	e00a      	b.n	8006894 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800687e:	f7fd fb7b 	bl	8003f78 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	f241 3288 	movw	r2, #5000	; 0x1388
 800688c:	4293      	cmp	r3, r2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e0a6      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006894:	4b56      	ldr	r3, [pc, #344]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1ee      	bne.n	800687e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d105      	bne.n	80068b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a6:	4b52      	ldr	r3, [pc, #328]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	4a51      	ldr	r2, [pc, #324]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 80068ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 8092 	beq.w	80069e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068bc:	4b4c      	ldr	r3, [pc, #304]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 030c 	and.w	r3, r3, #12
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d05c      	beq.n	8006982 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d141      	bne.n	8006954 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d0:	4b48      	ldr	r3, [pc, #288]	; (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d6:	f7fd fb4f 	bl	8003f78 <HAL_GetTick>
 80068da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068de:	f7fd fb4b 	bl	8003f78 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e078      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068f0:	4b3f      	ldr	r3, [pc, #252]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1f0      	bne.n	80068de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	019b      	lsls	r3, r3, #6
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	3b01      	subs	r3, #1
 8006916:	041b      	lsls	r3, r3, #16
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	061b      	lsls	r3, r3, #24
 8006920:	4933      	ldr	r1, [pc, #204]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006922:	4313      	orrs	r3, r2
 8006924:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006926:	4b33      	ldr	r3, [pc, #204]	; (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006928:	2201      	movs	r2, #1
 800692a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692c:	f7fd fb24 	bl	8003f78 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006934:	f7fd fb20 	bl	8003f78 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e04d      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006946:	4b2a      	ldr	r3, [pc, #168]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0f0      	beq.n	8006934 <HAL_RCC_OscConfig+0x41c>
 8006952:	e045      	b.n	80069e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006954:	4b27      	ldr	r3, [pc, #156]	; (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695a:	f7fd fb0d 	bl	8003f78 <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006962:	f7fd fb09 	bl	8003f78 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e036      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006974:	4b1e      	ldr	r3, [pc, #120]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f0      	bne.n	8006962 <HAL_RCC_OscConfig+0x44a>
 8006980:	e02e      	b.n	80069e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d101      	bne.n	800698e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e029      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800698e:	4b18      	ldr	r3, [pc, #96]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d11c      	bne.n	80069dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d115      	bne.n	80069dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069b6:	4013      	ands	r3, r2
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069bc:	4293      	cmp	r3, r2
 80069be:	d10d      	bne.n	80069dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d106      	bne.n	80069dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d001      	beq.n	80069e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40007000 	.word	0x40007000
 80069f0:	40023800 	.word	0x40023800
 80069f4:	42470060 	.word	0x42470060

080069f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e0cc      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a0c:	4b68      	ldr	r3, [pc, #416]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d90c      	bls.n	8006a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1a:	4b65      	ldr	r3, [pc, #404]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a22:	4b63      	ldr	r3, [pc, #396]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d001      	beq.n	8006a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0b8      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d020      	beq.n	8006a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a4c:	4b59      	ldr	r3, [pc, #356]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	4a58      	ldr	r2, [pc, #352]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a64:	4b53      	ldr	r3, [pc, #332]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	4a52      	ldr	r2, [pc, #328]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a70:	4b50      	ldr	r3, [pc, #320]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	494d      	ldr	r1, [pc, #308]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d044      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d107      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a96:	4b47      	ldr	r3, [pc, #284]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d119      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e07f      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d003      	beq.n	8006ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab6:	4b3f      	ldr	r3, [pc, #252]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e06f      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac6:	4b3b      	ldr	r3, [pc, #236]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e067      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ad6:	4b37      	ldr	r3, [pc, #220]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f023 0203 	bic.w	r2, r3, #3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	4934      	ldr	r1, [pc, #208]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ae8:	f7fd fa46 	bl	8003f78 <HAL_GetTick>
 8006aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aee:	e00a      	b.n	8006b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af0:	f7fd fa42 	bl	8003f78 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e04f      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b06:	4b2b      	ldr	r3, [pc, #172]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 020c 	and.w	r2, r3, #12
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d1eb      	bne.n	8006af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b18:	4b25      	ldr	r3, [pc, #148]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d20c      	bcs.n	8006b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b26:	4b22      	ldr	r3, [pc, #136]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2e:	4b20      	ldr	r3, [pc, #128]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d001      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e032      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b4c:	4b19      	ldr	r3, [pc, #100]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	4916      	ldr	r1, [pc, #88]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b6a:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	490e      	ldr	r1, [pc, #56]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b7e:	f000 f821 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8006b82:	4601      	mov	r1, r0
 8006b84:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	091b      	lsrs	r3, r3, #4
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	4a0a      	ldr	r2, [pc, #40]	; (8006bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b90:	5cd3      	ldrb	r3, [r2, r3]
 8006b92:	fa21 f303 	lsr.w	r3, r1, r3
 8006b96:	4a09      	ldr	r2, [pc, #36]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b9a:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fa ffd0 	bl	8001b44 <HAL_InitTick>

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	40023c00 	.word	0x40023c00
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	0800a74c 	.word	0x0800a74c
 8006bbc:	20000000 	.word	0x20000000
 8006bc0:	20000090 	.word	0x20000090

08006bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bda:	4b50      	ldr	r3, [pc, #320]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 030c 	and.w	r3, r3, #12
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d007      	beq.n	8006bf6 <HAL_RCC_GetSysClockFreq+0x32>
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d008      	beq.n	8006bfc <HAL_RCC_GetSysClockFreq+0x38>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f040 808d 	bne.w	8006d0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bf0:	4b4b      	ldr	r3, [pc, #300]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006bf2:	60bb      	str	r3, [r7, #8]
       break;
 8006bf4:	e08c      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bf6:	4b4b      	ldr	r3, [pc, #300]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bf8:	60bb      	str	r3, [r7, #8]
      break;
 8006bfa:	e089      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bfc:	4b47      	ldr	r3, [pc, #284]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c06:	4b45      	ldr	r3, [pc, #276]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d023      	beq.n	8006c5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c12:	4b42      	ldr	r3, [pc, #264]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	099b      	lsrs	r3, r3, #6
 8006c18:	f04f 0400 	mov.w	r4, #0
 8006c1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	ea03 0501 	and.w	r5, r3, r1
 8006c28:	ea04 0602 	and.w	r6, r4, r2
 8006c2c:	4a3d      	ldr	r2, [pc, #244]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c2e:	fb02 f106 	mul.w	r1, r2, r6
 8006c32:	2200      	movs	r2, #0
 8006c34:	fb02 f205 	mul.w	r2, r2, r5
 8006c38:	440a      	add	r2, r1
 8006c3a:	493a      	ldr	r1, [pc, #232]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c3c:	fba5 0101 	umull	r0, r1, r5, r1
 8006c40:	1853      	adds	r3, r2, r1
 8006c42:	4619      	mov	r1, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f04f 0400 	mov.w	r4, #0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	4623      	mov	r3, r4
 8006c4e:	f7f9 fb1f 	bl	8000290 <__aeabi_uldivmod>
 8006c52:	4603      	mov	r3, r0
 8006c54:	460c      	mov	r4, r1
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	e049      	b.n	8006cee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c5a:	4b30      	ldr	r3, [pc, #192]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	099b      	lsrs	r3, r3, #6
 8006c60:	f04f 0400 	mov.w	r4, #0
 8006c64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	ea03 0501 	and.w	r5, r3, r1
 8006c70:	ea04 0602 	and.w	r6, r4, r2
 8006c74:	4629      	mov	r1, r5
 8006c76:	4632      	mov	r2, r6
 8006c78:	f04f 0300 	mov.w	r3, #0
 8006c7c:	f04f 0400 	mov.w	r4, #0
 8006c80:	0154      	lsls	r4, r2, #5
 8006c82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c86:	014b      	lsls	r3, r1, #5
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	1b49      	subs	r1, r1, r5
 8006c8e:	eb62 0206 	sbc.w	r2, r2, r6
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	f04f 0400 	mov.w	r4, #0
 8006c9a:	0194      	lsls	r4, r2, #6
 8006c9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ca0:	018b      	lsls	r3, r1, #6
 8006ca2:	1a5b      	subs	r3, r3, r1
 8006ca4:	eb64 0402 	sbc.w	r4, r4, r2
 8006ca8:	f04f 0100 	mov.w	r1, #0
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	00e2      	lsls	r2, r4, #3
 8006cb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006cb6:	00d9      	lsls	r1, r3, #3
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4614      	mov	r4, r2
 8006cbc:	195b      	adds	r3, r3, r5
 8006cbe:	eb44 0406 	adc.w	r4, r4, r6
 8006cc2:	f04f 0100 	mov.w	r1, #0
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	02a2      	lsls	r2, r4, #10
 8006ccc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006cd0:	0299      	lsls	r1, r3, #10
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	4621      	mov	r1, r4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f04f 0400 	mov.w	r4, #0
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4623      	mov	r3, r4
 8006ce4:	f7f9 fad4 	bl	8000290 <__aeabi_uldivmod>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	0c1b      	lsrs	r3, r3, #16
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d06:	60bb      	str	r3, [r7, #8]
      break;
 8006d08:	e002      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d0a:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006d0c:	60bb      	str	r3, [r7, #8]
      break;
 8006d0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d10:	68bb      	ldr	r3, [r7, #8]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	00f42400 	.word	0x00f42400
 8006d24:	017d7840 	.word	0x017d7840

08006d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d2c:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000000 	.word	0x20000000

08006d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d44:	f7ff fff0 	bl	8006d28 <HAL_RCC_GetHCLKFreq>
 8006d48:	4601      	mov	r1, r0
 8006d4a:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	0a9b      	lsrs	r3, r3, #10
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	4a03      	ldr	r2, [pc, #12]	; (8006d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d56:	5cd3      	ldrb	r3, [r2, r3]
 8006d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40023800 	.word	0x40023800
 8006d64:	0800a75c 	.word	0x0800a75c

08006d68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	220f      	movs	r2, #15
 8006d76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d78:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 0203 	and.w	r2, r3, #3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d84:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d90:	4b0c      	ldr	r3, [pc, #48]	; (8006dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006d9c:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	08db      	lsrs	r3, r3, #3
 8006da2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006daa:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <HAL_RCC_GetClockConfig+0x60>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 020f 	and.w	r2, r3, #15
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	601a      	str	r2, [r3, #0]
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	40023c00 	.word	0x40023c00

08006dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e01d      	b.n	8006e1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fa fe42 	bl	8001a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3304      	adds	r3, #4
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	f000 f988 	bl	8007120 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b085      	sub	sp, #20
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b06      	cmp	r3, #6
 8006e4a:	d007      	beq.n	8006e5c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0201 	orr.w	r2, r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68da      	ldr	r2, [r3, #12]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0201 	bic.w	r2, r2, #1
 8006e80:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6a1a      	ldr	r2, [r3, #32]
 8006e88:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10f      	bne.n	8006eb2 <HAL_TIM_Base_Stop_IT+0x48>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6a1a      	ldr	r2, [r3, #32]
 8006e98:	f240 4344 	movw	r3, #1092	; 0x444
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d107      	bne.n	8006eb2 <HAL_TIM_Base_Stop_IT+0x48>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d122      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d11b      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f06f 0202 	mvn.w	r2, #2
 8006eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f8ee 	bl	80070e4 <HAL_TIM_IC_CaptureCallback>
 8006f08:	e005      	b.n	8006f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f8e0 	bl	80070d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f8f1 	bl	80070f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d122      	bne.n	8006f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d11b      	bne.n	8006f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f06f 0204 	mvn.w	r2, #4
 8006f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f8c4 	bl	80070e4 <HAL_TIM_IC_CaptureCallback>
 8006f5c:	e005      	b.n	8006f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f8b6 	bl	80070d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f8c7 	bl	80070f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b08      	cmp	r3, #8
 8006f7c:	d122      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f003 0308 	and.w	r3, r3, #8
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d11b      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f06f 0208 	mvn.w	r2, #8
 8006f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2204      	movs	r2, #4
 8006f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f89a 	bl	80070e4 <HAL_TIM_IC_CaptureCallback>
 8006fb0:	e005      	b.n	8006fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f88c 	bl	80070d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f89d 	bl	80070f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0310 	and.w	r3, r3, #16
 8006fce:	2b10      	cmp	r3, #16
 8006fd0:	d122      	bne.n	8007018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0310 	and.w	r3, r3, #16
 8006fdc:	2b10      	cmp	r3, #16
 8006fde:	d11b      	bne.n	8007018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f06f 0210 	mvn.w	r2, #16
 8006fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2208      	movs	r2, #8
 8006fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f870 	bl	80070e4 <HAL_TIM_IC_CaptureCallback>
 8007004:	e005      	b.n	8007012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f862 	bl	80070d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f873 	bl	80070f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b01      	cmp	r3, #1
 8007024:	d10e      	bne.n	8007044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b01      	cmp	r3, #1
 8007032:	d107      	bne.n	8007044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f06f 0201 	mvn.w	r2, #1
 800703c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fa faac 	bl	800159c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704e:	2b80      	cmp	r3, #128	; 0x80
 8007050:	d10e      	bne.n	8007070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705c:	2b80      	cmp	r3, #128	; 0x80
 800705e:	d107      	bne.n	8007070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f902 	bl	8007274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707a:	2b40      	cmp	r3, #64	; 0x40
 800707c:	d10e      	bne.n	800709c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b40      	cmp	r3, #64	; 0x40
 800708a:	d107      	bne.n	800709c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f838 	bl	800710c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d10e      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f003 0320 	and.w	r3, r3, #32
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d107      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0220 	mvn.w	r2, #32
 80070c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8cc 	bl	8007260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070c8:	bf00      	nop
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a40      	ldr	r2, [pc, #256]	; (8007234 <TIM_Base_SetConfig+0x114>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <TIM_Base_SetConfig+0x40>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713e:	d00f      	beq.n	8007160 <TIM_Base_SetConfig+0x40>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a3d      	ldr	r2, [pc, #244]	; (8007238 <TIM_Base_SetConfig+0x118>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00b      	beq.n	8007160 <TIM_Base_SetConfig+0x40>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a3c      	ldr	r2, [pc, #240]	; (800723c <TIM_Base_SetConfig+0x11c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d007      	beq.n	8007160 <TIM_Base_SetConfig+0x40>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a3b      	ldr	r2, [pc, #236]	; (8007240 <TIM_Base_SetConfig+0x120>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d003      	beq.n	8007160 <TIM_Base_SetConfig+0x40>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a3a      	ldr	r2, [pc, #232]	; (8007244 <TIM_Base_SetConfig+0x124>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d108      	bne.n	8007172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2f      	ldr	r2, [pc, #188]	; (8007234 <TIM_Base_SetConfig+0x114>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d02b      	beq.n	80071d2 <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007180:	d027      	beq.n	80071d2 <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a2c      	ldr	r2, [pc, #176]	; (8007238 <TIM_Base_SetConfig+0x118>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d023      	beq.n	80071d2 <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2b      	ldr	r2, [pc, #172]	; (800723c <TIM_Base_SetConfig+0x11c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d01f      	beq.n	80071d2 <TIM_Base_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a2a      	ldr	r2, [pc, #168]	; (8007240 <TIM_Base_SetConfig+0x120>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d01b      	beq.n	80071d2 <TIM_Base_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a29      	ldr	r2, [pc, #164]	; (8007244 <TIM_Base_SetConfig+0x124>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d017      	beq.n	80071d2 <TIM_Base_SetConfig+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a28      	ldr	r2, [pc, #160]	; (8007248 <TIM_Base_SetConfig+0x128>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d013      	beq.n	80071d2 <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a27      	ldr	r2, [pc, #156]	; (800724c <TIM_Base_SetConfig+0x12c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d00f      	beq.n	80071d2 <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a26      	ldr	r2, [pc, #152]	; (8007250 <TIM_Base_SetConfig+0x130>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00b      	beq.n	80071d2 <TIM_Base_SetConfig+0xb2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a25      	ldr	r2, [pc, #148]	; (8007254 <TIM_Base_SetConfig+0x134>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d007      	beq.n	80071d2 <TIM_Base_SetConfig+0xb2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a24      	ldr	r2, [pc, #144]	; (8007258 <TIM_Base_SetConfig+0x138>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d003      	beq.n	80071d2 <TIM_Base_SetConfig+0xb2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a23      	ldr	r2, [pc, #140]	; (800725c <TIM_Base_SetConfig+0x13c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d108      	bne.n	80071e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a0a      	ldr	r2, [pc, #40]	; (8007234 <TIM_Base_SetConfig+0x114>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d003      	beq.n	8007218 <TIM_Base_SetConfig+0xf8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a0c      	ldr	r2, [pc, #48]	; (8007244 <TIM_Base_SetConfig+0x124>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d103      	bne.n	8007220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	691a      	ldr	r2, [r3, #16]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	615a      	str	r2, [r3, #20]
}
 8007226:	bf00      	nop
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40010000 	.word	0x40010000
 8007238:	40000400 	.word	0x40000400
 800723c:	40000800 	.word	0x40000800
 8007240:	40000c00 	.word	0x40000c00
 8007244:	40010400 	.word	0x40010400
 8007248:	40014000 	.word	0x40014000
 800724c:	40014400 	.word	0x40014400
 8007250:	40014800 	.word	0x40014800
 8007254:	40001800 	.word	0x40001800
 8007258:	40001c00 	.word	0x40001c00
 800725c:	40002000 	.word	0x40002000

08007260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800728c:	bf00      	nop
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
	...

08007298 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800729e:	f3ef 8305 	mrs	r3, IPSR
 80072a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80072a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10f      	bne.n	80072ca <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072aa:	f3ef 8310 	mrs	r3, PRIMASK
 80072ae:	607b      	str	r3, [r7, #4]
  return(result);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d105      	bne.n	80072c2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072b6:	f3ef 8311 	mrs	r3, BASEPRI
 80072ba:	603b      	str	r3, [r7, #0]
  return(result);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d007      	beq.n	80072d2 <osKernelInitialize+0x3a>
 80072c2:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <osKernelInitialize+0x64>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d103      	bne.n	80072d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80072ca:	f06f 0305 	mvn.w	r3, #5
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	e00c      	b.n	80072ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80072d2:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <osKernelInitialize+0x64>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d105      	bne.n	80072e6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072da:	4b08      	ldr	r3, [pc, #32]	; (80072fc <osKernelInitialize+0x64>)
 80072dc:	2201      	movs	r2, #1
 80072de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e002      	b.n	80072ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80072e6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80072ec:	68fb      	ldr	r3, [r7, #12]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	20000140 	.word	0x20000140

08007300 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007306:	f3ef 8305 	mrs	r3, IPSR
 800730a:	60bb      	str	r3, [r7, #8]
  return(result);
 800730c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10f      	bne.n	8007332 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007312:	f3ef 8310 	mrs	r3, PRIMASK
 8007316:	607b      	str	r3, [r7, #4]
  return(result);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800731e:	f3ef 8311 	mrs	r3, BASEPRI
 8007322:	603b      	str	r3, [r7, #0]
  return(result);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d007      	beq.n	800733a <osKernelStart+0x3a>
 800732a:	4b0f      	ldr	r3, [pc, #60]	; (8007368 <osKernelStart+0x68>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b02      	cmp	r3, #2
 8007330:	d103      	bne.n	800733a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007332:	f06f 0305 	mvn.w	r3, #5
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	e010      	b.n	800735c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800733a:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <osKernelStart+0x68>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d109      	bne.n	8007356 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007342:	f7ff ffa1 	bl	8007288 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007346:	4b08      	ldr	r3, [pc, #32]	; (8007368 <osKernelStart+0x68>)
 8007348:	2202      	movs	r2, #2
 800734a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800734c:	f001 f8e2 	bl	8008514 <vTaskStartScheduler>
      stat = osOK;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	e002      	b.n	800735c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007356:	f04f 33ff 	mov.w	r3, #4294967295
 800735a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800735c:	68fb      	ldr	r3, [r7, #12]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000140 	.word	0x20000140

0800736c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800736c:	b580      	push	{r7, lr}
 800736e:	b090      	sub	sp, #64	; 0x40
 8007370:	af04      	add	r7, sp, #16
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007378:	2300      	movs	r3, #0
 800737a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800737c:	f3ef 8305 	mrs	r3, IPSR
 8007380:	61fb      	str	r3, [r7, #28]
  return(result);
 8007382:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007384:	2b00      	cmp	r3, #0
 8007386:	f040 808f 	bne.w	80074a8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800738a:	f3ef 8310 	mrs	r3, PRIMASK
 800738e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d105      	bne.n	80073a2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007396:	f3ef 8311 	mrs	r3, BASEPRI
 800739a:	617b      	str	r3, [r7, #20]
  return(result);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <osThreadNew+0x3e>
 80073a2:	4b44      	ldr	r3, [pc, #272]	; (80074b4 <osThreadNew+0x148>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d07e      	beq.n	80074a8 <osThreadNew+0x13c>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d07b      	beq.n	80074a8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80073b0:	2380      	movs	r3, #128	; 0x80
 80073b2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80073b4:	2318      	movs	r3, #24
 80073b6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80073bc:	f04f 33ff 	mov.w	r3, #4294967295
 80073c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d045      	beq.n	8007454 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <osThreadNew+0x6a>
        name = attr->name;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d008      	beq.n	80073fc <osThreadNew+0x90>
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	2b38      	cmp	r3, #56	; 0x38
 80073ee:	d805      	bhi.n	80073fc <osThreadNew+0x90>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <osThreadNew+0x94>
        return (NULL);
 80073fc:	2300      	movs	r3, #0
 80073fe:	e054      	b.n	80074aa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	089b      	lsrs	r3, r3, #2
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00e      	beq.n	8007436 <osThreadNew+0xca>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b5b      	cmp	r3, #91	; 0x5b
 800741e:	d90a      	bls.n	8007436 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007424:	2b00      	cmp	r3, #0
 8007426:	d006      	beq.n	8007436 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <osThreadNew+0xca>
        mem = 1;
 8007430:	2301      	movs	r3, #1
 8007432:	623b      	str	r3, [r7, #32]
 8007434:	e010      	b.n	8007458 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10c      	bne.n	8007458 <osThreadNew+0xec>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d108      	bne.n	8007458 <osThreadNew+0xec>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <osThreadNew+0xec>
          mem = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	623b      	str	r3, [r7, #32]
 8007452:	e001      	b.n	8007458 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d110      	bne.n	8007480 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007466:	9202      	str	r2, [sp, #8]
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fe09 	bl	800808c <xTaskCreateStatic>
 800747a:	4603      	mov	r3, r0
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	e013      	b.n	80074a8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d110      	bne.n	80074a8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	b29a      	uxth	r2, r3
 800748a:	f107 0310 	add.w	r3, r7, #16
 800748e:	9301      	str	r3, [sp, #4]
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 fe51 	bl	8008140 <xTaskCreate>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d001      	beq.n	80074a8 <osThreadNew+0x13c>
          hTask = NULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074a8:	693b      	ldr	r3, [r7, #16]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3730      	adds	r7, #48	; 0x30
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20000140 	.word	0x20000140

080074b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074c0:	f3ef 8305 	mrs	r3, IPSR
 80074c4:	613b      	str	r3, [r7, #16]
  return(result);
 80074c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10f      	bne.n	80074ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074cc:	f3ef 8310 	mrs	r3, PRIMASK
 80074d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d105      	bne.n	80074e4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074d8:	f3ef 8311 	mrs	r3, BASEPRI
 80074dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d007      	beq.n	80074f4 <osDelay+0x3c>
 80074e4:	4b0a      	ldr	r3, [pc, #40]	; (8007510 <osDelay+0x58>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d103      	bne.n	80074f4 <osDelay+0x3c>
    stat = osErrorISR;
 80074ec:	f06f 0305 	mvn.w	r3, #5
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e007      	b.n	8007504 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <osDelay+0x4c>
      vTaskDelay(ticks);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 ffd4 	bl	80084ac <vTaskDelay>
    }
  }

  return (stat);
 8007504:	697b      	ldr	r3, [r7, #20]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000140 	.word	0x20000140

08007514 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4a07      	ldr	r2, [pc, #28]	; (8007540 <vApplicationGetIdleTaskMemory+0x2c>)
 8007524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4a06      	ldr	r2, [pc, #24]	; (8007544 <vApplicationGetIdleTaskMemory+0x30>)
 800752a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2280      	movs	r2, #128	; 0x80
 8007530:	601a      	str	r2, [r3, #0]
}
 8007532:	bf00      	nop
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	20000144 	.word	0x20000144
 8007544:	200001a0 	.word	0x200001a0

08007548 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4a07      	ldr	r2, [pc, #28]	; (8007574 <vApplicationGetTimerTaskMemory+0x2c>)
 8007558:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	4a06      	ldr	r2, [pc, #24]	; (8007578 <vApplicationGetTimerTaskMemory+0x30>)
 800755e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007566:	601a      	str	r2, [r3, #0]
}
 8007568:	bf00      	nop
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	200003a0 	.word	0x200003a0
 8007578:	200003fc 	.word	0x200003fc

0800757c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f103 0208 	add.w	r2, r3, #8
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f04f 32ff 	mov.w	r2, #4294967295
 8007594:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f103 0208 	add.w	r2, r3, #8
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f103 0208 	add.w	r2, r3, #8
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075d6:	b480      	push	{r7}
 80075d8:	b085      	sub	sp, #20
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	601a      	str	r2, [r3, #0]
}
 8007612:	bf00      	nop
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007634:	d103      	bne.n	800763e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	e00c      	b.n	8007658 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3308      	adds	r3, #8
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	e002      	b.n	800764c <vListInsert+0x2e>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	429a      	cmp	r2, r3
 8007656:	d2f6      	bcs.n	8007646 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	601a      	str	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	6892      	ldr	r2, [r2, #8]
 80076a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6852      	ldr	r2, [r2, #4]
 80076b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d103      	bne.n	80076c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	1e5a      	subs	r2, r3, #1
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d109      	bne.n	800770c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	60bb      	str	r3, [r7, #8]
 800770a:	e7fe      	b.n	800770a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800770c:	f002 f886 	bl	800981c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007718:	68f9      	ldr	r1, [r7, #12]
 800771a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800771c:	fb01 f303 	mul.w	r3, r1, r3
 8007720:	441a      	add	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773c:	3b01      	subs	r3, #1
 800773e:	68f9      	ldr	r1, [r7, #12]
 8007740:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007742:	fb01 f303 	mul.w	r3, r1, r3
 8007746:	441a      	add	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	22ff      	movs	r2, #255	; 0xff
 8007750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	22ff      	movs	r2, #255	; 0xff
 8007758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d114      	bne.n	800778c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d01a      	beq.n	80077a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3310      	adds	r3, #16
 800776e:	4618      	mov	r0, r3
 8007770:	f001 f950 	bl	8008a14 <xTaskRemoveFromEventList>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d012      	beq.n	80077a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800777a:	4b0d      	ldr	r3, [pc, #52]	; (80077b0 <xQueueGenericReset+0xcc>)
 800777c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	e009      	b.n	80077a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3310      	adds	r3, #16
 8007790:	4618      	mov	r0, r3
 8007792:	f7ff fef3 	bl	800757c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3324      	adds	r3, #36	; 0x24
 800779a:	4618      	mov	r0, r3
 800779c:	f7ff feee 	bl	800757c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077a0:	f002 f86a 	bl	8009878 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077a4:	2301      	movs	r3, #1
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08e      	sub	sp, #56	; 0x38
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d109      	bne.n	80077dc <xQueueGenericCreateStatic+0x28>
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077da:	e7fe      	b.n	80077da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <xQueueGenericCreateStatic+0x42>
 80077e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
 80077f4:	e7fe      	b.n	80077f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <xQueueGenericCreateStatic+0x4e>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <xQueueGenericCreateStatic+0x52>
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <xQueueGenericCreateStatic+0x54>
 8007806:	2300      	movs	r3, #0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d109      	bne.n	8007820 <xQueueGenericCreateStatic+0x6c>
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	623b      	str	r3, [r7, #32]
 800781e:	e7fe      	b.n	800781e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d102      	bne.n	800782c <xQueueGenericCreateStatic+0x78>
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <xQueueGenericCreateStatic+0x7c>
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <xQueueGenericCreateStatic+0x7e>
 8007830:	2300      	movs	r3, #0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d109      	bne.n	800784a <xQueueGenericCreateStatic+0x96>
 8007836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	61fb      	str	r3, [r7, #28]
 8007848:	e7fe      	b.n	8007848 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800784a:	2350      	movs	r3, #80	; 0x50
 800784c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b50      	cmp	r3, #80	; 0x50
 8007852:	d009      	beq.n	8007868 <xQueueGenericCreateStatic+0xb4>
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	e7fe      	b.n	8007866 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007868:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00d      	beq.n	8007890 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800787c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	4613      	mov	r3, r2
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f805 	bl	800789a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007892:	4618      	mov	r0, r3
 8007894:	3730      	adds	r7, #48	; 0x30
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	60f8      	str	r0, [r7, #12]
 80078a2:	60b9      	str	r1, [r7, #8]
 80078a4:	607a      	str	r2, [r7, #4]
 80078a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e002      	b.n	80078bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078c8:	2101      	movs	r1, #1
 80078ca:	69b8      	ldr	r0, [r7, #24]
 80078cc:	f7ff ff0a 	bl	80076e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	78fa      	ldrb	r2, [r7, #3]
 80078d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078d8:	bf00      	nop
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08e      	sub	sp, #56	; 0x38
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078ee:	2300      	movs	r3, #0
 80078f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d109      	bne.n	8007910 <xQueueGenericSend+0x30>
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28
 800790e:	e7fe      	b.n	800790e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d103      	bne.n	800791e <xQueueGenericSend+0x3e>
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <xQueueGenericSend+0x42>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <xQueueGenericSend+0x44>
 8007922:	2300      	movs	r3, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d109      	bne.n	800793c <xQueueGenericSend+0x5c>
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
 800793a:	e7fe      	b.n	800793a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d103      	bne.n	800794a <xQueueGenericSend+0x6a>
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007946:	2b01      	cmp	r3, #1
 8007948:	d101      	bne.n	800794e <xQueueGenericSend+0x6e>
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <xQueueGenericSend+0x70>
 800794e:	2300      	movs	r3, #0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <xQueueGenericSend+0x88>
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	623b      	str	r3, [r7, #32]
 8007966:	e7fe      	b.n	8007966 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007968:	f001 fa0a 	bl	8008d80 <xTaskGetSchedulerState>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <xQueueGenericSend+0x98>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <xQueueGenericSend+0x9c>
 8007978:	2301      	movs	r3, #1
 800797a:	e000      	b.n	800797e <xQueueGenericSend+0x9e>
 800797c:	2300      	movs	r3, #0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d109      	bne.n	8007996 <xQueueGenericSend+0xb6>
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	61fb      	str	r3, [r7, #28]
 8007994:	e7fe      	b.n	8007994 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007996:	f001 ff41 	bl	800981c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d302      	bcc.n	80079ac <xQueueGenericSend+0xcc>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d129      	bne.n	8007a00 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b2:	f000 f9ff 	bl	8007db4 <prvCopyDataToQueue>
 80079b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d010      	beq.n	80079e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	3324      	adds	r3, #36	; 0x24
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 f825 	bl	8008a14 <xTaskRemoveFromEventList>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d013      	beq.n	80079f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079d0:	4b3f      	ldr	r3, [pc, #252]	; (8007ad0 <xQueueGenericSend+0x1f0>)
 80079d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	e00a      	b.n	80079f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d007      	beq.n	80079f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80079e8:	4b39      	ldr	r3, [pc, #228]	; (8007ad0 <xQueueGenericSend+0x1f0>)
 80079ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80079f8:	f001 ff3e 	bl	8009878 <vPortExitCritical>
				return pdPASS;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e063      	b.n	8007ac8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a06:	f001 ff37 	bl	8009878 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e05c      	b.n	8007ac8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d106      	bne.n	8007a22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a14:	f107 0314 	add.w	r3, r7, #20
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 f85d 	bl	8008ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a22:	f001 ff29 	bl	8009878 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a26:	f000 fdd9 	bl	80085dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a2a:	f001 fef7 	bl	800981c <vPortEnterCritical>
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a34:	b25b      	sxtb	r3, r3
 8007a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3a:	d103      	bne.n	8007a44 <xQueueGenericSend+0x164>
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a4a:	b25b      	sxtb	r3, r3
 8007a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a50:	d103      	bne.n	8007a5a <xQueueGenericSend+0x17a>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a5a:	f001 ff0d 	bl	8009878 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a5e:	1d3a      	adds	r2, r7, #4
 8007a60:	f107 0314 	add.w	r3, r7, #20
 8007a64:	4611      	mov	r1, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 f84c 	bl	8008b04 <xTaskCheckForTimeOut>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d124      	bne.n	8007abc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a74:	f000 fa96 	bl	8007fa4 <prvIsQueueFull>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d018      	beq.n	8007ab0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	3310      	adds	r3, #16
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4611      	mov	r1, r2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 ff76 	bl	8008978 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a8e:	f000 fa21 	bl	8007ed4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a92:	f000 fdb1 	bl	80085f8 <xTaskResumeAll>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f47f af7c 	bne.w	8007996 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007a9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <xQueueGenericSend+0x1f0>)
 8007aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	e772      	b.n	8007996 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ab2:	f000 fa0f 	bl	8007ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ab6:	f000 fd9f 	bl	80085f8 <xTaskResumeAll>
 8007aba:	e76c      	b.n	8007996 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007abe:	f000 fa09 	bl	8007ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ac2:	f000 fd99 	bl	80085f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ac6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3738      	adds	r7, #56	; 0x38
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08e      	sub	sp, #56	; 0x38
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d109      	bne.n	8007b00 <xQueueGenericSendFromISR+0x2c>
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
 8007afe:	e7fe      	b.n	8007afe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d103      	bne.n	8007b0e <xQueueGenericSendFromISR+0x3a>
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <xQueueGenericSendFromISR+0x3e>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <xQueueGenericSendFromISR+0x40>
 8007b12:	2300      	movs	r3, #0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d109      	bne.n	8007b2c <xQueueGenericSendFromISR+0x58>
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	623b      	str	r3, [r7, #32]
 8007b2a:	e7fe      	b.n	8007b2a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d103      	bne.n	8007b3a <xQueueGenericSendFromISR+0x66>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <xQueueGenericSendFromISR+0x6a>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e000      	b.n	8007b40 <xQueueGenericSendFromISR+0x6c>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d109      	bne.n	8007b58 <xQueueGenericSendFromISR+0x84>
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	61fb      	str	r3, [r7, #28]
 8007b56:	e7fe      	b.n	8007b56 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b58:	f001 ff3c 	bl	80099d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b5c:	f3ef 8211 	mrs	r2, BASEPRI
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	61ba      	str	r2, [r7, #24]
 8007b72:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d302      	bcc.n	8007b8a <xQueueGenericSendFromISR+0xb6>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d12c      	bne.n	8007be4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	68b9      	ldr	r1, [r7, #8]
 8007b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b9a:	f000 f90b 	bl	8007db4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba6:	d112      	bne.n	8007bce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d016      	beq.n	8007bde <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	3324      	adds	r3, #36	; 0x24
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 ff2d 	bl	8008a14 <xTaskRemoveFromEventList>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00e      	beq.n	8007bde <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00b      	beq.n	8007bde <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	e007      	b.n	8007bde <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	b25a      	sxtb	r2, r3
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007bde:	2301      	movs	r3, #1
 8007be0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007be2:	e001      	b.n	8007be8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3738      	adds	r7, #56	; 0x38
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08c      	sub	sp, #48	; 0x30
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <xQueueReceive+0x2e>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	623b      	str	r3, [r7, #32]
 8007c28:	e7fe      	b.n	8007c28 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d103      	bne.n	8007c38 <xQueueReceive+0x3c>
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <xQueueReceive+0x40>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e000      	b.n	8007c3e <xQueueReceive+0x42>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d109      	bne.n	8007c56 <xQueueReceive+0x5a>
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	61fb      	str	r3, [r7, #28]
 8007c54:	e7fe      	b.n	8007c54 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c56:	f001 f893 	bl	8008d80 <xTaskGetSchedulerState>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <xQueueReceive+0x6a>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <xQueueReceive+0x6e>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <xQueueReceive+0x70>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d109      	bne.n	8007c84 <xQueueReceive+0x88>
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	61bb      	str	r3, [r7, #24]
 8007c82:	e7fe      	b.n	8007c82 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c84:	f001 fdca 	bl	800981c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01f      	beq.n	8007cd4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c94:	68b9      	ldr	r1, [r7, #8]
 8007c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c98:	f000 f8f6 	bl	8007e88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	1e5a      	subs	r2, r3, #1
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00f      	beq.n	8007ccc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	3310      	adds	r3, #16
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 feaf 	bl	8008a14 <xTaskRemoveFromEventList>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d007      	beq.n	8007ccc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cbc:	4b3c      	ldr	r3, [pc, #240]	; (8007db0 <xQueueReceive+0x1b4>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ccc:	f001 fdd4 	bl	8009878 <vPortExitCritical>
				return pdPASS;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e069      	b.n	8007da8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d103      	bne.n	8007ce2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cda:	f001 fdcd 	bl	8009878 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e062      	b.n	8007da8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ce8:	f107 0310 	add.w	r3, r7, #16
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fef3 	bl	8008ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cf6:	f001 fdbf 	bl	8009878 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cfa:	f000 fc6f 	bl	80085dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cfe:	f001 fd8d 	bl	800981c <vPortEnterCritical>
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d08:	b25b      	sxtb	r3, r3
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0e:	d103      	bne.n	8007d18 <xQueueReceive+0x11c>
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d1e:	b25b      	sxtb	r3, r3
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d24:	d103      	bne.n	8007d2e <xQueueReceive+0x132>
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d2e:	f001 fda3 	bl	8009878 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d32:	1d3a      	adds	r2, r7, #4
 8007d34:	f107 0310 	add.w	r3, r7, #16
 8007d38:	4611      	mov	r1, r2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fee2 	bl	8008b04 <xTaskCheckForTimeOut>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d123      	bne.n	8007d8e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d48:	f000 f916 	bl	8007f78 <prvIsQueueEmpty>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d017      	beq.n	8007d82 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	3324      	adds	r3, #36	; 0x24
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fe0c 	bl	8008978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d62:	f000 f8b7 	bl	8007ed4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d66:	f000 fc47 	bl	80085f8 <xTaskResumeAll>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d189      	bne.n	8007c84 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007d70:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <xQueueReceive+0x1b4>)
 8007d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	e780      	b.n	8007c84 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d84:	f000 f8a6 	bl	8007ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d88:	f000 fc36 	bl	80085f8 <xTaskResumeAll>
 8007d8c:	e77a      	b.n	8007c84 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d90:	f000 f8a0 	bl	8007ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d94:	f000 fc30 	bl	80085f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d9a:	f000 f8ed 	bl	8007f78 <prvIsQueueEmpty>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f43f af6f 	beq.w	8007c84 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007da6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3730      	adds	r7, #48	; 0x30
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	e000ed04 	.word	0xe000ed04

08007db4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10d      	bne.n	8007dee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d14d      	bne.n	8007e76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 ffec 	bl	8008dbc <xTaskPriorityDisinherit>
 8007de4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	609a      	str	r2, [r3, #8]
 8007dec:	e043      	b.n	8007e76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d119      	bne.n	8007e28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6858      	ldr	r0, [r3, #4]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	68b9      	ldr	r1, [r7, #8]
 8007e00:	f002 f826 	bl	8009e50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	441a      	add	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d32b      	bcc.n	8007e76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	605a      	str	r2, [r3, #4]
 8007e26:	e026      	b.n	8007e76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	68d8      	ldr	r0, [r3, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e30:	461a      	mov	r2, r3
 8007e32:	68b9      	ldr	r1, [r7, #8]
 8007e34:	f002 f80c 	bl	8009e50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	68da      	ldr	r2, [r3, #12]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e40:	425b      	negs	r3, r3
 8007e42:	441a      	add	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d207      	bcs.n	8007e64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	425b      	negs	r3, r3
 8007e5e:	441a      	add	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d105      	bne.n	8007e76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e7e:	697b      	ldr	r3, [r7, #20]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d018      	beq.n	8007ecc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	441a      	add	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d303      	bcc.n	8007ebc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68d9      	ldr	r1, [r3, #12]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6838      	ldr	r0, [r7, #0]
 8007ec8:	f001 ffc2 	bl	8009e50 <memcpy>
	}
}
 8007ecc:	bf00      	nop
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007edc:	f001 fc9e 	bl	800981c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ee6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ee8:	e011      	b.n	8007f0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d012      	beq.n	8007f18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3324      	adds	r3, #36	; 0x24
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fd8c 	bl	8008a14 <xTaskRemoveFromEventList>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f02:	f000 fe5f 	bl	8008bc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dce9      	bgt.n	8007eea <prvUnlockQueue+0x16>
 8007f16:	e000      	b.n	8007f1a <prvUnlockQueue+0x46>
					break;
 8007f18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	22ff      	movs	r2, #255	; 0xff
 8007f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f22:	f001 fca9 	bl	8009878 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f26:	f001 fc79 	bl	800981c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f32:	e011      	b.n	8007f58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d012      	beq.n	8007f62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3310      	adds	r3, #16
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fd67 	bl	8008a14 <xTaskRemoveFromEventList>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f4c:	f000 fe3a 	bl	8008bc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dce9      	bgt.n	8007f34 <prvUnlockQueue+0x60>
 8007f60:	e000      	b.n	8007f64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	22ff      	movs	r2, #255	; 0xff
 8007f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f6c:	f001 fc84 	bl	8009878 <vPortExitCritical>
}
 8007f70:	bf00      	nop
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f80:	f001 fc4c 	bl	800981c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	e001      	b.n	8007f96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f96:	f001 fc6f 	bl	8009878 <vPortExitCritical>

	return xReturn;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fac:	f001 fc36 	bl	800981c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d102      	bne.n	8007fc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	e001      	b.n	8007fc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fc6:	f001 fc57 	bl	8009878 <vPortExitCritical>

	return xReturn;
 8007fca:	68fb      	ldr	r3, [r7, #12]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	e014      	b.n	800800e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007fe4:	4a0e      	ldr	r2, [pc, #56]	; (8008020 <vQueueAddToRegistry+0x4c>)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10b      	bne.n	8008008 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ff0:	490b      	ldr	r1, [pc, #44]	; (8008020 <vQueueAddToRegistry+0x4c>)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ffa:	4a09      	ldr	r2, [pc, #36]	; (8008020 <vQueueAddToRegistry+0x4c>)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	4413      	add	r3, r2
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008006:	e005      	b.n	8008014 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3301      	adds	r3, #1
 800800c:	60fb      	str	r3, [r7, #12]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b07      	cmp	r3, #7
 8008012:	d9e7      	bls.n	8007fe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008014:	bf00      	nop
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	200072b4 	.word	0x200072b4

08008024 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008034:	f001 fbf2 	bl	800981c <vPortEnterCritical>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800803e:	b25b      	sxtb	r3, r3
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008044:	d103      	bne.n	800804e <vQueueWaitForMessageRestricted+0x2a>
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008054:	b25b      	sxtb	r3, r3
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805a:	d103      	bne.n	8008064 <vQueueWaitForMessageRestricted+0x40>
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008064:	f001 fc08 	bl	8009878 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	2b00      	cmp	r3, #0
 800806e:	d106      	bne.n	800807e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	3324      	adds	r3, #36	; 0x24
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	68b9      	ldr	r1, [r7, #8]
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fca1 	bl	80089c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800807e:	6978      	ldr	r0, [r7, #20]
 8008080:	f7ff ff28 	bl	8007ed4 <prvUnlockQueue>
	}
 8008084:	bf00      	nop
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08e      	sub	sp, #56	; 0x38
 8008090:	af04      	add	r7, sp, #16
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800809a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809c:	2b00      	cmp	r3, #0
 800809e:	d109      	bne.n	80080b4 <xTaskCreateStatic+0x28>
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	623b      	str	r3, [r7, #32]
 80080b2:	e7fe      	b.n	80080b2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d109      	bne.n	80080ce <xTaskCreateStatic+0x42>
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	61fb      	str	r3, [r7, #28]
 80080cc:	e7fe      	b.n	80080cc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080ce:	235c      	movs	r3, #92	; 0x5c
 80080d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	2b5c      	cmp	r3, #92	; 0x5c
 80080d6:	d009      	beq.n	80080ec <xTaskCreateStatic+0x60>
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	61bb      	str	r3, [r7, #24]
 80080ea:	e7fe      	b.n	80080ea <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d01e      	beq.n	8008132 <xTaskCreateStatic+0xa6>
 80080f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d01b      	beq.n	8008132 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008102:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	2202      	movs	r2, #2
 8008108:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800810c:	2300      	movs	r3, #0
 800810e:	9303      	str	r3, [sp, #12]
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	9302      	str	r3, [sp, #8]
 8008114:	f107 0314 	add.w	r3, r7, #20
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	68b9      	ldr	r1, [r7, #8]
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 f850 	bl	80081ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800812a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800812c:	f000 f8dc 	bl	80082e8 <prvAddNewTaskToReadyList>
 8008130:	e001      	b.n	8008136 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008132:	2300      	movs	r3, #0
 8008134:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008136:	697b      	ldr	r3, [r7, #20]
	}
 8008138:	4618      	mov	r0, r3
 800813a:	3728      	adds	r7, #40	; 0x28
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08c      	sub	sp, #48	; 0x30
 8008144:	af04      	add	r7, sp, #16
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	4613      	mov	r3, r2
 800814e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4618      	mov	r0, r3
 8008156:	f001 fc7b 	bl	8009a50 <pvPortMalloc>
 800815a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00e      	beq.n	8008180 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008162:	205c      	movs	r0, #92	; 0x5c
 8008164:	f001 fc74 	bl	8009a50 <pvPortMalloc>
 8008168:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	631a      	str	r2, [r3, #48]	; 0x30
 8008176:	e005      	b.n	8008184 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008178:	6978      	ldr	r0, [r7, #20]
 800817a:	f001 fd2b 	bl	8009bd4 <vPortFree>
 800817e:	e001      	b.n	8008184 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008180:	2300      	movs	r3, #0
 8008182:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d017      	beq.n	80081ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008192:	88fa      	ldrh	r2, [r7, #6]
 8008194:	2300      	movs	r3, #0
 8008196:	9303      	str	r3, [sp, #12]
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	9302      	str	r3, [sp, #8]
 800819c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 f80e 	bl	80081ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081ae:	69f8      	ldr	r0, [r7, #28]
 80081b0:	f000 f89a 	bl	80082e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081b4:	2301      	movs	r3, #1
 80081b6:	61bb      	str	r3, [r7, #24]
 80081b8:	e002      	b.n	80081c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081ba:	f04f 33ff 	mov.w	r3, #4294967295
 80081be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081c0:	69bb      	ldr	r3, [r7, #24]
	}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3720      	adds	r7, #32
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b088      	sub	sp, #32
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	60f8      	str	r0, [r7, #12]
 80081d2:	60b9      	str	r1, [r7, #8]
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	461a      	mov	r2, r3
 80081e2:	21a5      	movs	r1, #165	; 0xa5
 80081e4:	f001 fe3f 	bl	8009e66 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081f2:	3b01      	subs	r3, #1
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	f023 0307 	bic.w	r3, r3, #7
 8008200:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	f003 0307 	and.w	r3, r3, #7
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <prvInitialiseNewTask+0x56>
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	e7fe      	b.n	800821e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d01f      	beq.n	8008266 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008226:	2300      	movs	r3, #0
 8008228:	61fb      	str	r3, [r7, #28]
 800822a:	e012      	b.n	8008252 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	4413      	add	r3, r2
 8008232:	7819      	ldrb	r1, [r3, #0]
 8008234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	3334      	adds	r3, #52	; 0x34
 800823c:	460a      	mov	r2, r1
 800823e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	4413      	add	r3, r2
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d006      	beq.n	800825a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	3301      	adds	r3, #1
 8008250:	61fb      	str	r3, [r7, #28]
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	2b0f      	cmp	r3, #15
 8008256:	d9e9      	bls.n	800822c <prvInitialiseNewTask+0x62>
 8008258:	e000      	b.n	800825c <prvInitialiseNewTask+0x92>
			{
				break;
 800825a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008264:	e003      	b.n	800826e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	2b37      	cmp	r3, #55	; 0x37
 8008272:	d901      	bls.n	8008278 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008274:	2337      	movs	r3, #55	; 0x37
 8008276:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800827c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008282:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	2200      	movs	r2, #0
 8008288:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	3304      	adds	r3, #4
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff f994 	bl	80075bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	3318      	adds	r3, #24
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff f98f 	bl	80075bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	2200      	movs	r2, #0
 80082b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	68f9      	ldr	r1, [r7, #12]
 80082c6:	69b8      	ldr	r0, [r7, #24]
 80082c8:	f001 f97e 	bl	80095c8 <pxPortInitialiseStack>
 80082cc:	4602      	mov	r2, r0
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082de:	bf00      	nop
 80082e0:	3720      	adds	r7, #32
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082f0:	f001 fa94 	bl	800981c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082f4:	4b2d      	ldr	r3, [pc, #180]	; (80083ac <prvAddNewTaskToReadyList+0xc4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3301      	adds	r3, #1
 80082fa:	4a2c      	ldr	r2, [pc, #176]	; (80083ac <prvAddNewTaskToReadyList+0xc4>)
 80082fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082fe:	4b2c      	ldr	r3, [pc, #176]	; (80083b0 <prvAddNewTaskToReadyList+0xc8>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d109      	bne.n	800831a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008306:	4a2a      	ldr	r2, [pc, #168]	; (80083b0 <prvAddNewTaskToReadyList+0xc8>)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800830c:	4b27      	ldr	r3, [pc, #156]	; (80083ac <prvAddNewTaskToReadyList+0xc4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d110      	bne.n	8008336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008314:	f000 fc7a 	bl	8008c0c <prvInitialiseTaskLists>
 8008318:	e00d      	b.n	8008336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800831a:	4b26      	ldr	r3, [pc, #152]	; (80083b4 <prvAddNewTaskToReadyList+0xcc>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d109      	bne.n	8008336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008322:	4b23      	ldr	r3, [pc, #140]	; (80083b0 <prvAddNewTaskToReadyList+0xc8>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	429a      	cmp	r2, r3
 800832e:	d802      	bhi.n	8008336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008330:	4a1f      	ldr	r2, [pc, #124]	; (80083b0 <prvAddNewTaskToReadyList+0xc8>)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008336:	4b20      	ldr	r3, [pc, #128]	; (80083b8 <prvAddNewTaskToReadyList+0xd0>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3301      	adds	r3, #1
 800833c:	4a1e      	ldr	r2, [pc, #120]	; (80083b8 <prvAddNewTaskToReadyList+0xd0>)
 800833e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008340:	4b1d      	ldr	r3, [pc, #116]	; (80083b8 <prvAddNewTaskToReadyList+0xd0>)
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834c:	4b1b      	ldr	r3, [pc, #108]	; (80083bc <prvAddNewTaskToReadyList+0xd4>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d903      	bls.n	800835c <prvAddNewTaskToReadyList+0x74>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	4a18      	ldr	r2, [pc, #96]	; (80083bc <prvAddNewTaskToReadyList+0xd4>)
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008360:	4613      	mov	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4a15      	ldr	r2, [pc, #84]	; (80083c0 <prvAddNewTaskToReadyList+0xd8>)
 800836a:	441a      	add	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3304      	adds	r3, #4
 8008370:	4619      	mov	r1, r3
 8008372:	4610      	mov	r0, r2
 8008374:	f7ff f92f 	bl	80075d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008378:	f001 fa7e 	bl	8009878 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800837c:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <prvAddNewTaskToReadyList+0xcc>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00e      	beq.n	80083a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008384:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <prvAddNewTaskToReadyList+0xc8>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	429a      	cmp	r2, r3
 8008390:	d207      	bcs.n	80083a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008392:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <prvAddNewTaskToReadyList+0xdc>)
 8008394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083a2:	bf00      	nop
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000cd0 	.word	0x20000cd0
 80083b0:	200007fc 	.word	0x200007fc
 80083b4:	20000cdc 	.word	0x20000cdc
 80083b8:	20000cec 	.word	0x20000cec
 80083bc:	20000cd8 	.word	0x20000cd8
 80083c0:	20000800 	.word	0x20000800
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80083d0:	f001 fa24 	bl	800981c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <vTaskDelete+0x18>
 80083da:	4b2c      	ldr	r3, [pc, #176]	; (800848c <vTaskDelete+0xc4>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	e000      	b.n	80083e2 <vTaskDelete+0x1a>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff f951 	bl	8007690 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d004      	beq.n	8008400 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3318      	adds	r3, #24
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff f948 	bl	8007690 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008400:	4b23      	ldr	r3, [pc, #140]	; (8008490 <vTaskDelete+0xc8>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3301      	adds	r3, #1
 8008406:	4a22      	ldr	r2, [pc, #136]	; (8008490 <vTaskDelete+0xc8>)
 8008408:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800840a:	4b20      	ldr	r3, [pc, #128]	; (800848c <vTaskDelete+0xc4>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	429a      	cmp	r2, r3
 8008412:	d10b      	bne.n	800842c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3304      	adds	r3, #4
 8008418:	4619      	mov	r1, r3
 800841a:	481e      	ldr	r0, [pc, #120]	; (8008494 <vTaskDelete+0xcc>)
 800841c:	f7ff f8db 	bl	80075d6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008420:	4b1d      	ldr	r3, [pc, #116]	; (8008498 <vTaskDelete+0xd0>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	4a1c      	ldr	r2, [pc, #112]	; (8008498 <vTaskDelete+0xd0>)
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	e009      	b.n	8008440 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800842c:	4b1b      	ldr	r3, [pc, #108]	; (800849c <vTaskDelete+0xd4>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3b01      	subs	r3, #1
 8008432:	4a1a      	ldr	r2, [pc, #104]	; (800849c <vTaskDelete+0xd4>)
 8008434:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 fc54 	bl	8008ce4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800843c:	f000 fc80 	bl	8008d40 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8008440:	f001 fa1a 	bl	8009878 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008444:	4b16      	ldr	r3, [pc, #88]	; (80084a0 <vTaskDelete+0xd8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01a      	beq.n	8008482 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 800844c:	4b0f      	ldr	r3, [pc, #60]	; (800848c <vTaskDelete+0xc4>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	429a      	cmp	r2, r3
 8008454:	d115      	bne.n	8008482 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008456:	4b13      	ldr	r3, [pc, #76]	; (80084a4 <vTaskDelete+0xdc>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d009      	beq.n	8008472 <vTaskDelete+0xaa>
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	60bb      	str	r3, [r7, #8]
 8008470:	e7fe      	b.n	8008470 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8008472:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <vTaskDelete+0xe0>)
 8008474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008482:	bf00      	nop
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	200007fc 	.word	0x200007fc
 8008490:	20000cec 	.word	0x20000cec
 8008494:	20000ca4 	.word	0x20000ca4
 8008498:	20000cb8 	.word	0x20000cb8
 800849c:	20000cd0 	.word	0x20000cd0
 80084a0:	20000cdc 	.word	0x20000cdc
 80084a4:	20000cf8 	.word	0x20000cf8
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d016      	beq.n	80084ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084be:	4b13      	ldr	r3, [pc, #76]	; (800850c <vTaskDelay+0x60>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d009      	beq.n	80084da <vTaskDelay+0x2e>
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60bb      	str	r3, [r7, #8]
 80084d8:	e7fe      	b.n	80084d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80084da:	f000 f87f 	bl	80085dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80084de:	2100      	movs	r1, #0
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fcd7 	bl	8008e94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80084e6:	f000 f887 	bl	80085f8 <xTaskResumeAll>
 80084ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d107      	bne.n	8008502 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <vTaskDelay+0x64>)
 80084f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008502:	bf00      	nop
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	20000cf8 	.word	0x20000cf8
 8008510:	e000ed04 	.word	0xe000ed04

08008514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08a      	sub	sp, #40	; 0x28
 8008518:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800851a:	2300      	movs	r3, #0
 800851c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800851e:	2300      	movs	r3, #0
 8008520:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008522:	463a      	mov	r2, r7
 8008524:	1d39      	adds	r1, r7, #4
 8008526:	f107 0308 	add.w	r3, r7, #8
 800852a:	4618      	mov	r0, r3
 800852c:	f7fe fff2 	bl	8007514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	9202      	str	r2, [sp, #8]
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	2300      	movs	r3, #0
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	2300      	movs	r3, #0
 8008540:	460a      	mov	r2, r1
 8008542:	4920      	ldr	r1, [pc, #128]	; (80085c4 <vTaskStartScheduler+0xb0>)
 8008544:	4820      	ldr	r0, [pc, #128]	; (80085c8 <vTaskStartScheduler+0xb4>)
 8008546:	f7ff fda1 	bl	800808c <xTaskCreateStatic>
 800854a:	4602      	mov	r2, r0
 800854c:	4b1f      	ldr	r3, [pc, #124]	; (80085cc <vTaskStartScheduler+0xb8>)
 800854e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008550:	4b1e      	ldr	r3, [pc, #120]	; (80085cc <vTaskStartScheduler+0xb8>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008558:	2301      	movs	r3, #1
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	e001      	b.n	8008562 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800855e:	2300      	movs	r3, #0
 8008560:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d102      	bne.n	800856e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008568:	f000 fce8 	bl	8008f3c <xTimerCreateTimerTask>
 800856c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d115      	bne.n	80085a0 <vTaskStartScheduler+0x8c>
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008586:	4b12      	ldr	r3, [pc, #72]	; (80085d0 <vTaskStartScheduler+0xbc>)
 8008588:	f04f 32ff 	mov.w	r2, #4294967295
 800858c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800858e:	4b11      	ldr	r3, [pc, #68]	; (80085d4 <vTaskStartScheduler+0xc0>)
 8008590:	2201      	movs	r2, #1
 8008592:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008594:	4b10      	ldr	r3, [pc, #64]	; (80085d8 <vTaskStartScheduler+0xc4>)
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800859a:	f001 f8a1 	bl	80096e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800859e:	e00d      	b.n	80085bc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a6:	d109      	bne.n	80085bc <vTaskStartScheduler+0xa8>
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	e7fe      	b.n	80085ba <vTaskStartScheduler+0xa6>
}
 80085bc:	bf00      	nop
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	0800a6c8 	.word	0x0800a6c8
 80085c8:	08008bdd 	.word	0x08008bdd
 80085cc:	20000cf4 	.word	0x20000cf4
 80085d0:	20000cf0 	.word	0x20000cf0
 80085d4:	20000cdc 	.word	0x20000cdc
 80085d8:	20000cd4 	.word	0x20000cd4

080085dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80085e0:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <vTaskSuspendAll+0x18>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3301      	adds	r3, #1
 80085e6:	4a03      	ldr	r2, [pc, #12]	; (80085f4 <vTaskSuspendAll+0x18>)
 80085e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80085ea:	bf00      	nop
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	20000cf8 	.word	0x20000cf8

080085f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085fe:	2300      	movs	r3, #0
 8008600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008602:	2300      	movs	r3, #0
 8008604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008606:	4b41      	ldr	r3, [pc, #260]	; (800870c <xTaskResumeAll+0x114>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d109      	bne.n	8008622 <xTaskResumeAll+0x2a>
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	603b      	str	r3, [r7, #0]
 8008620:	e7fe      	b.n	8008620 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008622:	f001 f8fb 	bl	800981c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008626:	4b39      	ldr	r3, [pc, #228]	; (800870c <xTaskResumeAll+0x114>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3b01      	subs	r3, #1
 800862c:	4a37      	ldr	r2, [pc, #220]	; (800870c <xTaskResumeAll+0x114>)
 800862e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008630:	4b36      	ldr	r3, [pc, #216]	; (800870c <xTaskResumeAll+0x114>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d162      	bne.n	80086fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008638:	4b35      	ldr	r3, [pc, #212]	; (8008710 <xTaskResumeAll+0x118>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d05e      	beq.n	80086fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008640:	e02f      	b.n	80086a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008642:	4b34      	ldr	r3, [pc, #208]	; (8008714 <xTaskResumeAll+0x11c>)
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3318      	adds	r3, #24
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff f81e 	bl	8007690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3304      	adds	r3, #4
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff f819 	bl	8007690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008662:	4b2d      	ldr	r3, [pc, #180]	; (8008718 <xTaskResumeAll+0x120>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d903      	bls.n	8008672 <xTaskResumeAll+0x7a>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866e:	4a2a      	ldr	r2, [pc, #168]	; (8008718 <xTaskResumeAll+0x120>)
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008676:	4613      	mov	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4a27      	ldr	r2, [pc, #156]	; (800871c <xTaskResumeAll+0x124>)
 8008680:	441a      	add	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3304      	adds	r3, #4
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f7fe ffa4 	bl	80075d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008692:	4b23      	ldr	r3, [pc, #140]	; (8008720 <xTaskResumeAll+0x128>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	429a      	cmp	r2, r3
 800869a:	d302      	bcc.n	80086a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800869c:	4b21      	ldr	r3, [pc, #132]	; (8008724 <xTaskResumeAll+0x12c>)
 800869e:	2201      	movs	r2, #1
 80086a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086a2:	4b1c      	ldr	r3, [pc, #112]	; (8008714 <xTaskResumeAll+0x11c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1cb      	bne.n	8008642 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086b0:	f000 fb46 	bl	8008d40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80086b4:	4b1c      	ldr	r3, [pc, #112]	; (8008728 <xTaskResumeAll+0x130>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d010      	beq.n	80086e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086c0:	f000 f846 	bl	8008750 <xTaskIncrementTick>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80086ca:	4b16      	ldr	r3, [pc, #88]	; (8008724 <xTaskResumeAll+0x12c>)
 80086cc:	2201      	movs	r2, #1
 80086ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1f1      	bne.n	80086c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80086dc:	4b12      	ldr	r3, [pc, #72]	; (8008728 <xTaskResumeAll+0x130>)
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086e2:	4b10      	ldr	r3, [pc, #64]	; (8008724 <xTaskResumeAll+0x12c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086ea:	2301      	movs	r3, #1
 80086ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086ee:	4b0f      	ldr	r3, [pc, #60]	; (800872c <xTaskResumeAll+0x134>)
 80086f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086fe:	f001 f8bb 	bl	8009878 <vPortExitCritical>

	return xAlreadyYielded;
 8008702:	68bb      	ldr	r3, [r7, #8]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000cf8 	.word	0x20000cf8
 8008710:	20000cd0 	.word	0x20000cd0
 8008714:	20000c90 	.word	0x20000c90
 8008718:	20000cd8 	.word	0x20000cd8
 800871c:	20000800 	.word	0x20000800
 8008720:	200007fc 	.word	0x200007fc
 8008724:	20000ce4 	.word	0x20000ce4
 8008728:	20000ce0 	.word	0x20000ce0
 800872c:	e000ed04 	.word	0xe000ed04

08008730 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008736:	4b05      	ldr	r3, [pc, #20]	; (800874c <xTaskGetTickCount+0x1c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800873c:	687b      	ldr	r3, [r7, #4]
}
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	20000cd4 	.word	0x20000cd4

08008750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800875a:	4b4e      	ldr	r3, [pc, #312]	; (8008894 <xTaskIncrementTick+0x144>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f040 8088 	bne.w	8008874 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008764:	4b4c      	ldr	r3, [pc, #304]	; (8008898 <xTaskIncrementTick+0x148>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3301      	adds	r3, #1
 800876a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800876c:	4a4a      	ldr	r2, [pc, #296]	; (8008898 <xTaskIncrementTick+0x148>)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d11f      	bne.n	80087b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008778:	4b48      	ldr	r3, [pc, #288]	; (800889c <xTaskIncrementTick+0x14c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d009      	beq.n	8008796 <xTaskIncrementTick+0x46>
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	e7fe      	b.n	8008794 <xTaskIncrementTick+0x44>
 8008796:	4b41      	ldr	r3, [pc, #260]	; (800889c <xTaskIncrementTick+0x14c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	4b40      	ldr	r3, [pc, #256]	; (80088a0 <xTaskIncrementTick+0x150>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a3e      	ldr	r2, [pc, #248]	; (800889c <xTaskIncrementTick+0x14c>)
 80087a2:	6013      	str	r3, [r2, #0]
 80087a4:	4a3e      	ldr	r2, [pc, #248]	; (80088a0 <xTaskIncrementTick+0x150>)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	4b3e      	ldr	r3, [pc, #248]	; (80088a4 <xTaskIncrementTick+0x154>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3301      	adds	r3, #1
 80087b0:	4a3c      	ldr	r2, [pc, #240]	; (80088a4 <xTaskIncrementTick+0x154>)
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	f000 fac4 	bl	8008d40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087b8:	4b3b      	ldr	r3, [pc, #236]	; (80088a8 <xTaskIncrementTick+0x158>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d349      	bcc.n	8008856 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087c2:	4b36      	ldr	r3, [pc, #216]	; (800889c <xTaskIncrementTick+0x14c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d104      	bne.n	80087d6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087cc:	4b36      	ldr	r3, [pc, #216]	; (80088a8 <xTaskIncrementTick+0x158>)
 80087ce:	f04f 32ff 	mov.w	r2, #4294967295
 80087d2:	601a      	str	r2, [r3, #0]
					break;
 80087d4:	e03f      	b.n	8008856 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d6:	4b31      	ldr	r3, [pc, #196]	; (800889c <xTaskIncrementTick+0x14c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d203      	bcs.n	80087f6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087ee:	4a2e      	ldr	r2, [pc, #184]	; (80088a8 <xTaskIncrementTick+0x158>)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087f4:	e02f      	b.n	8008856 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	3304      	adds	r3, #4
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe ff48 	bl	8007690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008804:	2b00      	cmp	r3, #0
 8008806:	d004      	beq.n	8008812 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	3318      	adds	r3, #24
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe ff3f 	bl	8007690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008816:	4b25      	ldr	r3, [pc, #148]	; (80088ac <xTaskIncrementTick+0x15c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d903      	bls.n	8008826 <xTaskIncrementTick+0xd6>
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008822:	4a22      	ldr	r2, [pc, #136]	; (80088ac <xTaskIncrementTick+0x15c>)
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800882a:	4613      	mov	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4a1f      	ldr	r2, [pc, #124]	; (80088b0 <xTaskIncrementTick+0x160>)
 8008834:	441a      	add	r2, r3
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	3304      	adds	r3, #4
 800883a:	4619      	mov	r1, r3
 800883c:	4610      	mov	r0, r2
 800883e:	f7fe feca 	bl	80075d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008846:	4b1b      	ldr	r3, [pc, #108]	; (80088b4 <xTaskIncrementTick+0x164>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	429a      	cmp	r2, r3
 800884e:	d3b8      	bcc.n	80087c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008850:	2301      	movs	r3, #1
 8008852:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008854:	e7b5      	b.n	80087c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008856:	4b17      	ldr	r3, [pc, #92]	; (80088b4 <xTaskIncrementTick+0x164>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885c:	4914      	ldr	r1, [pc, #80]	; (80088b0 <xTaskIncrementTick+0x160>)
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d907      	bls.n	800887e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800886e:	2301      	movs	r3, #1
 8008870:	617b      	str	r3, [r7, #20]
 8008872:	e004      	b.n	800887e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008874:	4b10      	ldr	r3, [pc, #64]	; (80088b8 <xTaskIncrementTick+0x168>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3301      	adds	r3, #1
 800887a:	4a0f      	ldr	r2, [pc, #60]	; (80088b8 <xTaskIncrementTick+0x168>)
 800887c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800887e:	4b0f      	ldr	r3, [pc, #60]	; (80088bc <xTaskIncrementTick+0x16c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8008886:	2301      	movs	r3, #1
 8008888:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800888a:	697b      	ldr	r3, [r7, #20]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	20000cf8 	.word	0x20000cf8
 8008898:	20000cd4 	.word	0x20000cd4
 800889c:	20000c88 	.word	0x20000c88
 80088a0:	20000c8c 	.word	0x20000c8c
 80088a4:	20000ce8 	.word	0x20000ce8
 80088a8:	20000cf0 	.word	0x20000cf0
 80088ac:	20000cd8 	.word	0x20000cd8
 80088b0:	20000800 	.word	0x20000800
 80088b4:	200007fc 	.word	0x200007fc
 80088b8:	20000ce0 	.word	0x20000ce0
 80088bc:	20000ce4 	.word	0x20000ce4

080088c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088c6:	4b27      	ldr	r3, [pc, #156]	; (8008964 <vTaskSwitchContext+0xa4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d003      	beq.n	80088d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088ce:	4b26      	ldr	r3, [pc, #152]	; (8008968 <vTaskSwitchContext+0xa8>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088d4:	e040      	b.n	8008958 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80088d6:	4b24      	ldr	r3, [pc, #144]	; (8008968 <vTaskSwitchContext+0xa8>)
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088dc:	4b23      	ldr	r3, [pc, #140]	; (800896c <vTaskSwitchContext+0xac>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	e00f      	b.n	8008904 <vTaskSwitchContext+0x44>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d109      	bne.n	80088fe <vTaskSwitchContext+0x3e>
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	607b      	str	r3, [r7, #4]
 80088fc:	e7fe      	b.n	80088fc <vTaskSwitchContext+0x3c>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3b01      	subs	r3, #1
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	491a      	ldr	r1, [pc, #104]	; (8008970 <vTaskSwitchContext+0xb0>)
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	4613      	mov	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	440b      	add	r3, r1
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d0e5      	beq.n	80088e4 <vTaskSwitchContext+0x24>
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4a13      	ldr	r2, [pc, #76]	; (8008970 <vTaskSwitchContext+0xb0>)
 8008924:	4413      	add	r3, r2
 8008926:	60bb      	str	r3, [r7, #8]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	605a      	str	r2, [r3, #4]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	3308      	adds	r3, #8
 800893a:	429a      	cmp	r2, r3
 800893c:	d104      	bne.n	8008948 <vTaskSwitchContext+0x88>
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	605a      	str	r2, [r3, #4]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	4a09      	ldr	r2, [pc, #36]	; (8008974 <vTaskSwitchContext+0xb4>)
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	4a06      	ldr	r2, [pc, #24]	; (800896c <vTaskSwitchContext+0xac>)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6013      	str	r3, [r2, #0]
}
 8008958:	bf00      	nop
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	20000cf8 	.word	0x20000cf8
 8008968:	20000ce4 	.word	0x20000ce4
 800896c:	20000cd8 	.word	0x20000cd8
 8008970:	20000800 	.word	0x20000800
 8008974:	200007fc 	.word	0x200007fc

08008978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d109      	bne.n	800899c <vTaskPlaceOnEventList+0x24>
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	e7fe      	b.n	800899a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800899c:	4b07      	ldr	r3, [pc, #28]	; (80089bc <vTaskPlaceOnEventList+0x44>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3318      	adds	r3, #24
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7fe fe3a 	bl	800761e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089aa:	2101      	movs	r1, #1
 80089ac:	6838      	ldr	r0, [r7, #0]
 80089ae:	f000 fa71 	bl	8008e94 <prvAddCurrentTaskToDelayedList>
}
 80089b2:	bf00      	nop
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	200007fc 	.word	0x200007fc

080089c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d109      	bne.n	80089e6 <vTaskPlaceOnEventListRestricted+0x26>
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	e7fe      	b.n	80089e4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089e6:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <vTaskPlaceOnEventListRestricted+0x50>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3318      	adds	r3, #24
 80089ec:	4619      	mov	r1, r3
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7fe fdf1 	bl	80075d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80089fa:	f04f 33ff 	mov.w	r3, #4294967295
 80089fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	68b8      	ldr	r0, [r7, #8]
 8008a04:	f000 fa46 	bl	8008e94 <prvAddCurrentTaskToDelayedList>
	}
 8008a08:	bf00      	nop
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	200007fc 	.word	0x200007fc

08008a14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <xTaskRemoveFromEventList+0x2a>
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	e7fe      	b.n	8008a3c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	3318      	adds	r3, #24
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fe fe24 	bl	8007690 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a48:	4b1d      	ldr	r3, [pc, #116]	; (8008ac0 <xTaskRemoveFromEventList+0xac>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d11d      	bne.n	8008a8c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	3304      	adds	r3, #4
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe fe1b 	bl	8007690 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5e:	4b19      	ldr	r3, [pc, #100]	; (8008ac4 <xTaskRemoveFromEventList+0xb0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d903      	bls.n	8008a6e <xTaskRemoveFromEventList+0x5a>
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6a:	4a16      	ldr	r2, [pc, #88]	; (8008ac4 <xTaskRemoveFromEventList+0xb0>)
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4a13      	ldr	r2, [pc, #76]	; (8008ac8 <xTaskRemoveFromEventList+0xb4>)
 8008a7c:	441a      	add	r2, r3
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f7fe fda6 	bl	80075d6 <vListInsertEnd>
 8008a8a:	e005      	b.n	8008a98 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	3318      	adds	r3, #24
 8008a90:	4619      	mov	r1, r3
 8008a92:	480e      	ldr	r0, [pc, #56]	; (8008acc <xTaskRemoveFromEventList+0xb8>)
 8008a94:	f7fe fd9f 	bl	80075d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ad0 <xTaskRemoveFromEventList+0xbc>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d905      	bls.n	8008ab2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <xTaskRemoveFromEventList+0xc0>)
 8008aac:	2201      	movs	r2, #1
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	e001      	b.n	8008ab6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ab6:	697b      	ldr	r3, [r7, #20]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20000cf8 	.word	0x20000cf8
 8008ac4:	20000cd8 	.word	0x20000cd8
 8008ac8:	20000800 	.word	0x20000800
 8008acc:	20000c90 	.word	0x20000c90
 8008ad0:	200007fc 	.word	0x200007fc
 8008ad4:	20000ce4 	.word	0x20000ce4

08008ad8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ae0:	4b06      	ldr	r3, [pc, #24]	; (8008afc <vTaskInternalSetTimeOutState+0x24>)
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ae8:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <vTaskInternalSetTimeOutState+0x28>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	605a      	str	r2, [r3, #4]
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	20000ce8 	.word	0x20000ce8
 8008b00:	20000cd4 	.word	0x20000cd4

08008b04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d109      	bne.n	8008b28 <xTaskCheckForTimeOut+0x24>
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	613b      	str	r3, [r7, #16]
 8008b26:	e7fe      	b.n	8008b26 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d109      	bne.n	8008b42 <xTaskCheckForTimeOut+0x3e>
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	e7fe      	b.n	8008b40 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008b42:	f000 fe6b 	bl	800981c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b46:	4b1d      	ldr	r3, [pc, #116]	; (8008bbc <xTaskCheckForTimeOut+0xb8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5e:	d102      	bne.n	8008b66 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b60:	2300      	movs	r3, #0
 8008b62:	61fb      	str	r3, [r7, #28]
 8008b64:	e023      	b.n	8008bae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	4b15      	ldr	r3, [pc, #84]	; (8008bc0 <xTaskCheckForTimeOut+0xbc>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d007      	beq.n	8008b82 <xTaskCheckForTimeOut+0x7e>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d302      	bcc.n	8008b82 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	61fb      	str	r3, [r7, #28]
 8008b80:	e015      	b.n	8008bae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d20b      	bcs.n	8008ba4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	1ad2      	subs	r2, r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff ff9d 	bl	8008ad8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	61fb      	str	r3, [r7, #28]
 8008ba2:	e004      	b.n	8008bae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008baa:	2301      	movs	r3, #1
 8008bac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008bae:	f000 fe63 	bl	8009878 <vPortExitCritical>

	return xReturn;
 8008bb2:	69fb      	ldr	r3, [r7, #28]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3720      	adds	r7, #32
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20000cd4 	.word	0x20000cd4
 8008bc0:	20000ce8 	.word	0x20000ce8

08008bc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008bc8:	4b03      	ldr	r3, [pc, #12]	; (8008bd8 <vTaskMissedYield+0x14>)
 8008bca:	2201      	movs	r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]
}
 8008bce:	bf00      	nop
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	20000ce4 	.word	0x20000ce4

08008bdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008be4:	f000 f852 	bl	8008c8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008be8:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <prvIdleTask+0x28>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d9f9      	bls.n	8008be4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <prvIdleTask+0x2c>)
 8008bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c00:	e7f0      	b.n	8008be4 <prvIdleTask+0x8>
 8008c02:	bf00      	nop
 8008c04:	20000800 	.word	0x20000800
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c12:	2300      	movs	r3, #0
 8008c14:	607b      	str	r3, [r7, #4]
 8008c16:	e00c      	b.n	8008c32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4a12      	ldr	r2, [pc, #72]	; (8008c6c <prvInitialiseTaskLists+0x60>)
 8008c24:	4413      	add	r3, r2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fca8 	bl	800757c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	607b      	str	r3, [r7, #4]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b37      	cmp	r3, #55	; 0x37
 8008c36:	d9ef      	bls.n	8008c18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c38:	480d      	ldr	r0, [pc, #52]	; (8008c70 <prvInitialiseTaskLists+0x64>)
 8008c3a:	f7fe fc9f 	bl	800757c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c3e:	480d      	ldr	r0, [pc, #52]	; (8008c74 <prvInitialiseTaskLists+0x68>)
 8008c40:	f7fe fc9c 	bl	800757c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c44:	480c      	ldr	r0, [pc, #48]	; (8008c78 <prvInitialiseTaskLists+0x6c>)
 8008c46:	f7fe fc99 	bl	800757c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c4a:	480c      	ldr	r0, [pc, #48]	; (8008c7c <prvInitialiseTaskLists+0x70>)
 8008c4c:	f7fe fc96 	bl	800757c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c50:	480b      	ldr	r0, [pc, #44]	; (8008c80 <prvInitialiseTaskLists+0x74>)
 8008c52:	f7fe fc93 	bl	800757c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c56:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <prvInitialiseTaskLists+0x78>)
 8008c58:	4a05      	ldr	r2, [pc, #20]	; (8008c70 <prvInitialiseTaskLists+0x64>)
 8008c5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	; (8008c88 <prvInitialiseTaskLists+0x7c>)
 8008c5e:	4a05      	ldr	r2, [pc, #20]	; (8008c74 <prvInitialiseTaskLists+0x68>)
 8008c60:	601a      	str	r2, [r3, #0]
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000800 	.word	0x20000800
 8008c70:	20000c60 	.word	0x20000c60
 8008c74:	20000c74 	.word	0x20000c74
 8008c78:	20000c90 	.word	0x20000c90
 8008c7c:	20000ca4 	.word	0x20000ca4
 8008c80:	20000cbc 	.word	0x20000cbc
 8008c84:	20000c88 	.word	0x20000c88
 8008c88:	20000c8c 	.word	0x20000c8c

08008c8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c92:	e019      	b.n	8008cc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c94:	f000 fdc2 	bl	800981c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c98:	4b0f      	ldr	r3, [pc, #60]	; (8008cd8 <prvCheckTasksWaitingTermination+0x4c>)
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fe fcf3 	bl	8007690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008caa:	4b0c      	ldr	r3, [pc, #48]	; (8008cdc <prvCheckTasksWaitingTermination+0x50>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	4a0a      	ldr	r2, [pc, #40]	; (8008cdc <prvCheckTasksWaitingTermination+0x50>)
 8008cb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cb4:	4b0a      	ldr	r3, [pc, #40]	; (8008ce0 <prvCheckTasksWaitingTermination+0x54>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	4a09      	ldr	r2, [pc, #36]	; (8008ce0 <prvCheckTasksWaitingTermination+0x54>)
 8008cbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cbe:	f000 fddb 	bl	8009878 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f80e 	bl	8008ce4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <prvCheckTasksWaitingTermination+0x54>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1e1      	bne.n	8008c94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	20000ca4 	.word	0x20000ca4
 8008cdc:	20000cd0 	.word	0x20000cd0
 8008ce0:	20000cb8 	.word	0x20000cb8

08008ce4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d108      	bne.n	8008d08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 ff6a 	bl	8009bd4 <vPortFree>
				vPortFree( pxTCB );
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 ff67 	bl	8009bd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d06:	e017      	b.n	8008d38 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d103      	bne.n	8008d1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 ff5e 	bl	8009bd4 <vPortFree>
	}
 8008d18:	e00e      	b.n	8008d38 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d009      	beq.n	8008d38 <prvDeleteTCB+0x54>
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	e7fe      	b.n	8008d36 <prvDeleteTCB+0x52>
	}
 8008d38:	bf00      	nop
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <prvResetNextTaskUnblockTime+0x38>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d104      	bne.n	8008d5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <prvResetNextTaskUnblockTime+0x3c>)
 8008d52:	f04f 32ff 	mov.w	r2, #4294967295
 8008d56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d58:	e008      	b.n	8008d6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d5a:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <prvResetNextTaskUnblockTime+0x38>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	4a04      	ldr	r2, [pc, #16]	; (8008d7c <prvResetNextTaskUnblockTime+0x3c>)
 8008d6a:	6013      	str	r3, [r2, #0]
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	20000c88 	.word	0x20000c88
 8008d7c:	20000cf0 	.word	0x20000cf0

08008d80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <xTaskGetSchedulerState+0x34>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	607b      	str	r3, [r7, #4]
 8008d92:	e008      	b.n	8008da6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d94:	4b08      	ldr	r3, [pc, #32]	; (8008db8 <xTaskGetSchedulerState+0x38>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d102      	bne.n	8008da2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	607b      	str	r3, [r7, #4]
 8008da0:	e001      	b.n	8008da6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008da2:	2300      	movs	r3, #0
 8008da4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008da6:	687b      	ldr	r3, [r7, #4]
	}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	20000cdc 	.word	0x20000cdc
 8008db8:	20000cf8 	.word	0x20000cf8

08008dbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d054      	beq.n	8008e7c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008dd2:	4b2d      	ldr	r3, [pc, #180]	; (8008e88 <xTaskPriorityDisinherit+0xcc>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d009      	beq.n	8008df0 <xTaskPriorityDisinherit+0x34>
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	e7fe      	b.n	8008dee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <xTaskPriorityDisinherit+0x50>
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	60bb      	str	r3, [r7, #8]
 8008e0a:	e7fe      	b.n	8008e0a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e10:	1e5a      	subs	r2, r3, #1
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d02c      	beq.n	8008e7c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d128      	bne.n	8008e7c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fc2e 	bl	8007690 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4c:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <xTaskPriorityDisinherit+0xd0>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d903      	bls.n	8008e5c <xTaskPriorityDisinherit+0xa0>
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	4a0c      	ldr	r2, [pc, #48]	; (8008e8c <xTaskPriorityDisinherit+0xd0>)
 8008e5a:	6013      	str	r3, [r2, #0]
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4a09      	ldr	r2, [pc, #36]	; (8008e90 <xTaskPriorityDisinherit+0xd4>)
 8008e6a:	441a      	add	r2, r3
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	3304      	adds	r3, #4
 8008e70:	4619      	mov	r1, r3
 8008e72:	4610      	mov	r0, r2
 8008e74:	f7fe fbaf 	bl	80075d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e7c:	697b      	ldr	r3, [r7, #20]
	}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	200007fc 	.word	0x200007fc
 8008e8c:	20000cd8 	.word	0x20000cd8
 8008e90:	20000800 	.word	0x20000800

08008e94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e9e:	4b21      	ldr	r3, [pc, #132]	; (8008f24 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ea4:	4b20      	ldr	r3, [pc, #128]	; (8008f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe fbf0 	bl	8007690 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d10a      	bne.n	8008ece <prvAddCurrentTaskToDelayedList+0x3a>
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d007      	beq.n	8008ece <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ebe:	4b1a      	ldr	r3, [pc, #104]	; (8008f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4819      	ldr	r0, [pc, #100]	; (8008f2c <prvAddCurrentTaskToDelayedList+0x98>)
 8008ec8:	f7fe fb85 	bl	80075d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ecc:	e026      	b.n	8008f1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ed6:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d209      	bcs.n	8008efa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee6:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	4b0f      	ldr	r3, [pc, #60]	; (8008f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	f7fe fb93 	bl	800761e <vListInsert>
}
 8008ef8:	e010      	b.n	8008f1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008efa:	4b0e      	ldr	r3, [pc, #56]	; (8008f34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3304      	adds	r3, #4
 8008f04:	4619      	mov	r1, r3
 8008f06:	4610      	mov	r0, r2
 8008f08:	f7fe fb89 	bl	800761e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f0c:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d202      	bcs.n	8008f1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f16:	4a08      	ldr	r2, [pc, #32]	; (8008f38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	6013      	str	r3, [r2, #0]
}
 8008f1c:	bf00      	nop
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000cd4 	.word	0x20000cd4
 8008f28:	200007fc 	.word	0x200007fc
 8008f2c:	20000cbc 	.word	0x20000cbc
 8008f30:	20000c8c 	.word	0x20000c8c
 8008f34:	20000c88 	.word	0x20000c88
 8008f38:	20000cf0 	.word	0x20000cf0

08008f3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08a      	sub	sp, #40	; 0x28
 8008f40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f46:	f000 faff 	bl	8009548 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f4a:	4b1c      	ldr	r3, [pc, #112]	; (8008fbc <xTimerCreateTimerTask+0x80>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d021      	beq.n	8008f96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f5a:	1d3a      	adds	r2, r7, #4
 8008f5c:	f107 0108 	add.w	r1, r7, #8
 8008f60:	f107 030c 	add.w	r3, r7, #12
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe faef 	bl	8007548 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	9202      	str	r2, [sp, #8]
 8008f72:	9301      	str	r3, [sp, #4]
 8008f74:	2302      	movs	r3, #2
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	460a      	mov	r2, r1
 8008f7c:	4910      	ldr	r1, [pc, #64]	; (8008fc0 <xTimerCreateTimerTask+0x84>)
 8008f7e:	4811      	ldr	r0, [pc, #68]	; (8008fc4 <xTimerCreateTimerTask+0x88>)
 8008f80:	f7ff f884 	bl	800808c <xTaskCreateStatic>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <xTimerCreateTimerTask+0x8c>)
 8008f88:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f8a:	4b0f      	ldr	r3, [pc, #60]	; (8008fc8 <xTimerCreateTimerTask+0x8c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f92:	2301      	movs	r3, #1
 8008f94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d109      	bne.n	8008fb0 <xTimerCreateTimerTask+0x74>
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	613b      	str	r3, [r7, #16]
 8008fae:	e7fe      	b.n	8008fae <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008fb0:	697b      	ldr	r3, [r7, #20]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000d2c 	.word	0x20000d2c
 8008fc0:	0800a6d0 	.word	0x0800a6d0
 8008fc4:	080090fd 	.word	0x080090fd
 8008fc8:	20000d30 	.word	0x20000d30

08008fcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08a      	sub	sp, #40	; 0x28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d109      	bne.n	8008ff8 <xTimerGenericCommand+0x2c>
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	623b      	str	r3, [r7, #32]
 8008ff6:	e7fe      	b.n	8008ff6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ff8:	4b19      	ldr	r3, [pc, #100]	; (8009060 <xTimerGenericCommand+0x94>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d02a      	beq.n	8009056 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2b05      	cmp	r3, #5
 8009010:	dc18      	bgt.n	8009044 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009012:	f7ff feb5 	bl	8008d80 <xTaskGetSchedulerState>
 8009016:	4603      	mov	r3, r0
 8009018:	2b02      	cmp	r3, #2
 800901a:	d109      	bne.n	8009030 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800901c:	4b10      	ldr	r3, [pc, #64]	; (8009060 <xTimerGenericCommand+0x94>)
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	f107 0110 	add.w	r1, r7, #16
 8009024:	2300      	movs	r3, #0
 8009026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009028:	f7fe fc5a 	bl	80078e0 <xQueueGenericSend>
 800902c:	6278      	str	r0, [r7, #36]	; 0x24
 800902e:	e012      	b.n	8009056 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009030:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <xTimerGenericCommand+0x94>)
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	f107 0110 	add.w	r1, r7, #16
 8009038:	2300      	movs	r3, #0
 800903a:	2200      	movs	r2, #0
 800903c:	f7fe fc50 	bl	80078e0 <xQueueGenericSend>
 8009040:	6278      	str	r0, [r7, #36]	; 0x24
 8009042:	e008      	b.n	8009056 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009044:	4b06      	ldr	r3, [pc, #24]	; (8009060 <xTimerGenericCommand+0x94>)
 8009046:	6818      	ldr	r0, [r3, #0]
 8009048:	f107 0110 	add.w	r1, r7, #16
 800904c:	2300      	movs	r3, #0
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	f7fe fd40 	bl	8007ad4 <xQueueGenericSendFromISR>
 8009054:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009058:	4618      	mov	r0, r3
 800905a:	3728      	adds	r7, #40	; 0x28
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	20000d2c 	.word	0x20000d2c

08009064 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af02      	add	r7, sp, #8
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906e:	4b22      	ldr	r3, [pc, #136]	; (80090f8 <prvProcessExpiredTimer+0x94>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	3304      	adds	r3, #4
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe fb07 	bl	8007690 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d021      	beq.n	80090d4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	699a      	ldr	r2, [r3, #24]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	18d1      	adds	r1, r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	6978      	ldr	r0, [r7, #20]
 800909e:	f000 f8d1 	bl	8009244 <prvInsertTimerInActiveList>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d01e      	beq.n	80090e6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090a8:	2300      	movs	r3, #0
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	2300      	movs	r3, #0
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	2100      	movs	r1, #0
 80090b2:	6978      	ldr	r0, [r7, #20]
 80090b4:	f7ff ff8a 	bl	8008fcc <xTimerGenericCommand>
 80090b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d112      	bne.n	80090e6 <prvProcessExpiredTimer+0x82>
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	e7fe      	b.n	80090d2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090da:	f023 0301 	bic.w	r3, r3, #1
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	6978      	ldr	r0, [r7, #20]
 80090ec:	4798      	blx	r3
}
 80090ee:	bf00      	nop
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20000d24 	.word	0x20000d24

080090fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009104:	f107 0308 	add.w	r3, r7, #8
 8009108:	4618      	mov	r0, r3
 800910a:	f000 f857 	bl	80091bc <prvGetNextExpireTime>
 800910e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4619      	mov	r1, r3
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f803 	bl	8009120 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800911a:	f000 f8d5 	bl	80092c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800911e:	e7f1      	b.n	8009104 <prvTimerTask+0x8>

08009120 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800912a:	f7ff fa57 	bl	80085dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800912e:	f107 0308 	add.w	r3, r7, #8
 8009132:	4618      	mov	r0, r3
 8009134:	f000 f866 	bl	8009204 <prvSampleTimeNow>
 8009138:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d130      	bne.n	80091a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10a      	bne.n	800915c <prvProcessTimerOrBlockTask+0x3c>
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	429a      	cmp	r2, r3
 800914c:	d806      	bhi.n	800915c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800914e:	f7ff fa53 	bl	80085f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009152:	68f9      	ldr	r1, [r7, #12]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff ff85 	bl	8009064 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800915a:	e024      	b.n	80091a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d008      	beq.n	8009174 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009162:	4b13      	ldr	r3, [pc, #76]	; (80091b0 <prvProcessTimerOrBlockTask+0x90>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <prvProcessTimerOrBlockTask+0x50>
 800916c:	2301      	movs	r3, #1
 800916e:	e000      	b.n	8009172 <prvProcessTimerOrBlockTask+0x52>
 8009170:	2300      	movs	r3, #0
 8009172:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009174:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <prvProcessTimerOrBlockTask+0x94>)
 8009176:	6818      	ldr	r0, [r3, #0]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	4619      	mov	r1, r3
 8009182:	f7fe ff4f 	bl	8008024 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009186:	f7ff fa37 	bl	80085f8 <xTaskResumeAll>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10a      	bne.n	80091a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009190:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <prvProcessTimerOrBlockTask+0x98>)
 8009192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	f3bf 8f6f 	isb	sy
}
 80091a0:	e001      	b.n	80091a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091a2:	f7ff fa29 	bl	80085f8 <xTaskResumeAll>
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000d28 	.word	0x20000d28
 80091b4:	20000d2c 	.word	0x20000d2c
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091c4:	4b0e      	ldr	r3, [pc, #56]	; (8009200 <prvGetNextExpireTime+0x44>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <prvGetNextExpireTime+0x16>
 80091ce:	2201      	movs	r2, #1
 80091d0:	e000      	b.n	80091d4 <prvGetNextExpireTime+0x18>
 80091d2:	2200      	movs	r2, #0
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d105      	bne.n	80091ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091e0:	4b07      	ldr	r3, [pc, #28]	; (8009200 <prvGetNextExpireTime+0x44>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60fb      	str	r3, [r7, #12]
 80091ea:	e001      	b.n	80091f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091f0:	68fb      	ldr	r3, [r7, #12]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	20000d24 	.word	0x20000d24

08009204 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800920c:	f7ff fa90 	bl	8008730 <xTaskGetTickCount>
 8009210:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009212:	4b0b      	ldr	r3, [pc, #44]	; (8009240 <prvSampleTimeNow+0x3c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	429a      	cmp	r2, r3
 800921a:	d205      	bcs.n	8009228 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800921c:	f000 f930 	bl	8009480 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	e002      	b.n	800922e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800922e:	4a04      	ldr	r2, [pc, #16]	; (8009240 <prvSampleTimeNow+0x3c>)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009234:	68fb      	ldr	r3, [r7, #12]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	20000d34 	.word	0x20000d34

08009244 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
 8009250:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	429a      	cmp	r2, r3
 8009268:	d812      	bhi.n	8009290 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	1ad2      	subs	r2, r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	429a      	cmp	r2, r3
 8009276:	d302      	bcc.n	800927e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009278:	2301      	movs	r3, #1
 800927a:	617b      	str	r3, [r7, #20]
 800927c:	e01b      	b.n	80092b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800927e:	4b10      	ldr	r3, [pc, #64]	; (80092c0 <prvInsertTimerInActiveList+0x7c>)
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	3304      	adds	r3, #4
 8009286:	4619      	mov	r1, r3
 8009288:	4610      	mov	r0, r2
 800928a:	f7fe f9c8 	bl	800761e <vListInsert>
 800928e:	e012      	b.n	80092b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	429a      	cmp	r2, r3
 8009296:	d206      	bcs.n	80092a6 <prvInsertTimerInActiveList+0x62>
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	429a      	cmp	r2, r3
 800929e:	d302      	bcc.n	80092a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092a0:	2301      	movs	r3, #1
 80092a2:	617b      	str	r3, [r7, #20]
 80092a4:	e007      	b.n	80092b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092a6:	4b07      	ldr	r3, [pc, #28]	; (80092c4 <prvInsertTimerInActiveList+0x80>)
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3304      	adds	r3, #4
 80092ae:	4619      	mov	r1, r3
 80092b0:	4610      	mov	r0, r2
 80092b2:	f7fe f9b4 	bl	800761e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092b6:	697b      	ldr	r3, [r7, #20]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20000d28 	.word	0x20000d28
 80092c4:	20000d24 	.word	0x20000d24

080092c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b08e      	sub	sp, #56	; 0x38
 80092cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092ce:	e0c6      	b.n	800945e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	da17      	bge.n	8009306 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092d6:	1d3b      	adds	r3, r7, #4
 80092d8:	3304      	adds	r3, #4
 80092da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d109      	bne.n	80092f6 <prvProcessReceivedCommands+0x2e>
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	61fb      	str	r3, [r7, #28]
 80092f4:	e7fe      	b.n	80092f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092fc:	6850      	ldr	r0, [r2, #4]
 80092fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009300:	6892      	ldr	r2, [r2, #8]
 8009302:	4611      	mov	r1, r2
 8009304:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	f2c0 80a7 	blt.w	800945c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d004      	beq.n	8009324 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	3304      	adds	r3, #4
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe f9b6 	bl	8007690 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009324:	463b      	mov	r3, r7
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff ff6c 	bl	8009204 <prvSampleTimeNow>
 800932c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b09      	cmp	r3, #9
 8009332:	f200 8094 	bhi.w	800945e <prvProcessReceivedCommands+0x196>
 8009336:	a201      	add	r2, pc, #4	; (adr r2, 800933c <prvProcessReceivedCommands+0x74>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	08009365 	.word	0x08009365
 8009340:	08009365 	.word	0x08009365
 8009344:	08009365 	.word	0x08009365
 8009348:	080093d7 	.word	0x080093d7
 800934c:	080093eb 	.word	0x080093eb
 8009350:	08009433 	.word	0x08009433
 8009354:	08009365 	.word	0x08009365
 8009358:	08009365 	.word	0x08009365
 800935c:	080093d7 	.word	0x080093d7
 8009360:	080093eb 	.word	0x080093eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800936a:	f043 0301 	orr.w	r3, r3, #1
 800936e:	b2da      	uxtb	r2, r3
 8009370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	18d1      	adds	r1, r2, r3
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009384:	f7ff ff5e 	bl	8009244 <prvInsertTimerInActiveList>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d067      	beq.n	800945e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009394:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d05c      	beq.n	800945e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	441a      	add	r2, r3
 80093ac:	2300      	movs	r3, #0
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	2300      	movs	r3, #0
 80093b2:	2100      	movs	r1, #0
 80093b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b6:	f7ff fe09 	bl	8008fcc <xTimerGenericCommand>
 80093ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d14d      	bne.n	800945e <prvProcessReceivedCommands+0x196>
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	61bb      	str	r3, [r7, #24]
 80093d4:	e7fe      	b.n	80093d4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093dc:	f023 0301 	bic.w	r3, r3, #1
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80093e8:	e039      	b.n	800945e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093f0:	f043 0301 	orr.w	r3, r3, #1
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009400:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d109      	bne.n	800941e <prvProcessReceivedCommands+0x156>
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	e7fe      	b.n	800941c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	699a      	ldr	r2, [r3, #24]
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	18d1      	adds	r1, r2, r3
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800942c:	f7ff ff0a 	bl	8009244 <prvInsertTimerInActiveList>
					break;
 8009430:	e015      	b.n	800945e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8009440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009442:	f000 fbc7 	bl	8009bd4 <vPortFree>
 8009446:	e00a      	b.n	800945e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800944e:	f023 0301 	bic.w	r3, r3, #1
 8009452:	b2da      	uxtb	r2, r3
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800945a:	e000      	b.n	800945e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800945c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800945e:	4b07      	ldr	r3, [pc, #28]	; (800947c <prvProcessReceivedCommands+0x1b4>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	1d39      	adds	r1, r7, #4
 8009464:	2200      	movs	r2, #0
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe fbc8 	bl	8007bfc <xQueueReceive>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	f47f af2e 	bne.w	80092d0 <prvProcessReceivedCommands+0x8>
	}
}
 8009474:	bf00      	nop
 8009476:	3730      	adds	r7, #48	; 0x30
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	20000d2c 	.word	0x20000d2c

08009480 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b088      	sub	sp, #32
 8009484:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009486:	e047      	b.n	8009518 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009488:	4b2d      	ldr	r3, [pc, #180]	; (8009540 <prvSwitchTimerLists+0xc0>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009492:	4b2b      	ldr	r3, [pc, #172]	; (8009540 <prvSwitchTimerLists+0xc0>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3304      	adds	r3, #4
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe f8f5 	bl	8007690 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d02d      	beq.n	8009518 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	4413      	add	r3, r2
 80094c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d90e      	bls.n	80094ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094da:	4b19      	ldr	r3, [pc, #100]	; (8009540 <prvSwitchTimerLists+0xc0>)
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7fe f89a 	bl	800761e <vListInsert>
 80094ea:	e015      	b.n	8009518 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094ec:	2300      	movs	r3, #0
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	2300      	movs	r3, #0
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	2100      	movs	r1, #0
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7ff fd68 	bl	8008fcc <xTimerGenericCommand>
 80094fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d109      	bne.n	8009518 <prvSwitchTimerLists+0x98>
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	603b      	str	r3, [r7, #0]
 8009516:	e7fe      	b.n	8009516 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009518:	4b09      	ldr	r3, [pc, #36]	; (8009540 <prvSwitchTimerLists+0xc0>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1b2      	bne.n	8009488 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009522:	4b07      	ldr	r3, [pc, #28]	; (8009540 <prvSwitchTimerLists+0xc0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009528:	4b06      	ldr	r3, [pc, #24]	; (8009544 <prvSwitchTimerLists+0xc4>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a04      	ldr	r2, [pc, #16]	; (8009540 <prvSwitchTimerLists+0xc0>)
 800952e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009530:	4a04      	ldr	r2, [pc, #16]	; (8009544 <prvSwitchTimerLists+0xc4>)
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	6013      	str	r3, [r2, #0]
}
 8009536:	bf00      	nop
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000d24 	.word	0x20000d24
 8009544:	20000d28 	.word	0x20000d28

08009548 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800954e:	f000 f965 	bl	800981c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009552:	4b15      	ldr	r3, [pc, #84]	; (80095a8 <prvCheckForValidListAndQueue+0x60>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d120      	bne.n	800959c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800955a:	4814      	ldr	r0, [pc, #80]	; (80095ac <prvCheckForValidListAndQueue+0x64>)
 800955c:	f7fe f80e 	bl	800757c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009560:	4813      	ldr	r0, [pc, #76]	; (80095b0 <prvCheckForValidListAndQueue+0x68>)
 8009562:	f7fe f80b 	bl	800757c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009566:	4b13      	ldr	r3, [pc, #76]	; (80095b4 <prvCheckForValidListAndQueue+0x6c>)
 8009568:	4a10      	ldr	r2, [pc, #64]	; (80095ac <prvCheckForValidListAndQueue+0x64>)
 800956a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800956c:	4b12      	ldr	r3, [pc, #72]	; (80095b8 <prvCheckForValidListAndQueue+0x70>)
 800956e:	4a10      	ldr	r2, [pc, #64]	; (80095b0 <prvCheckForValidListAndQueue+0x68>)
 8009570:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009572:	2300      	movs	r3, #0
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	4b11      	ldr	r3, [pc, #68]	; (80095bc <prvCheckForValidListAndQueue+0x74>)
 8009578:	4a11      	ldr	r2, [pc, #68]	; (80095c0 <prvCheckForValidListAndQueue+0x78>)
 800957a:	2110      	movs	r1, #16
 800957c:	200a      	movs	r0, #10
 800957e:	f7fe f919 	bl	80077b4 <xQueueGenericCreateStatic>
 8009582:	4602      	mov	r2, r0
 8009584:	4b08      	ldr	r3, [pc, #32]	; (80095a8 <prvCheckForValidListAndQueue+0x60>)
 8009586:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009588:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <prvCheckForValidListAndQueue+0x60>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d005      	beq.n	800959c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009590:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <prvCheckForValidListAndQueue+0x60>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	490b      	ldr	r1, [pc, #44]	; (80095c4 <prvCheckForValidListAndQueue+0x7c>)
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe fd1c 	bl	8007fd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800959c:	f000 f96c 	bl	8009878 <vPortExitCritical>
}
 80095a0:	bf00      	nop
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20000d2c 	.word	0x20000d2c
 80095ac:	20000cfc 	.word	0x20000cfc
 80095b0:	20000d10 	.word	0x20000d10
 80095b4:	20000d24 	.word	0x20000d24
 80095b8:	20000d28 	.word	0x20000d28
 80095bc:	20000dd8 	.word	0x20000dd8
 80095c0:	20000d38 	.word	0x20000d38
 80095c4:	0800a6d8 	.word	0x0800a6d8

080095c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	3b04      	subs	r3, #4
 80095d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3b04      	subs	r3, #4
 80095e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	f023 0201 	bic.w	r2, r3, #1
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	3b04      	subs	r3, #4
 80095f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095f8:	4a0c      	ldr	r2, [pc, #48]	; (800962c <pxPortInitialiseStack+0x64>)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3b14      	subs	r3, #20
 8009602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3b04      	subs	r3, #4
 800960e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f06f 0202 	mvn.w	r2, #2
 8009616:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3b20      	subs	r3, #32
 800961c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800961e:	68fb      	ldr	r3, [r7, #12]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	08009631 	.word	0x08009631

08009630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800963a:	4b11      	ldr	r3, [pc, #68]	; (8009680 <prvTaskExitError+0x50>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009642:	d009      	beq.n	8009658 <prvTaskExitError+0x28>
 8009644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	e7fe      	b.n	8009656 <prvTaskExitError+0x26>
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800966a:	bf00      	nop
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0fc      	beq.n	800966c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009672:	bf00      	nop
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	20000098 	.word	0x20000098
	...

08009690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009690:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <pxCurrentTCBConst2>)
 8009692:	6819      	ldr	r1, [r3, #0]
 8009694:	6808      	ldr	r0, [r1, #0]
 8009696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969a:	f380 8809 	msr	PSP, r0
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8811 	msr	BASEPRI, r0
 80096aa:	4770      	bx	lr
 80096ac:	f3af 8000 	nop.w

080096b0 <pxCurrentTCBConst2>:
 80096b0:	200007fc 	.word	0x200007fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop

080096b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096b8:	4808      	ldr	r0, [pc, #32]	; (80096dc <prvPortStartFirstTask+0x24>)
 80096ba:	6800      	ldr	r0, [r0, #0]
 80096bc:	6800      	ldr	r0, [r0, #0]
 80096be:	f380 8808 	msr	MSP, r0
 80096c2:	f04f 0000 	mov.w	r0, #0
 80096c6:	f380 8814 	msr	CONTROL, r0
 80096ca:	b662      	cpsie	i
 80096cc:	b661      	cpsie	f
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	df00      	svc	0
 80096d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096da:	bf00      	nop
 80096dc:	e000ed08 	.word	0xe000ed08

080096e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096e6:	4b44      	ldr	r3, [pc, #272]	; (80097f8 <xPortStartScheduler+0x118>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a44      	ldr	r2, [pc, #272]	; (80097fc <xPortStartScheduler+0x11c>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d109      	bne.n	8009704 <xPortStartScheduler+0x24>
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	613b      	str	r3, [r7, #16]
 8009702:	e7fe      	b.n	8009702 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009704:	4b3c      	ldr	r3, [pc, #240]	; (80097f8 <xPortStartScheduler+0x118>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a3d      	ldr	r2, [pc, #244]	; (8009800 <xPortStartScheduler+0x120>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d109      	bne.n	8009722 <xPortStartScheduler+0x42>
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	e7fe      	b.n	8009720 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009722:	4b38      	ldr	r3, [pc, #224]	; (8009804 <xPortStartScheduler+0x124>)
 8009724:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	b2db      	uxtb	r3, r3
 800972c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	22ff      	movs	r2, #255	; 0xff
 8009732:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	b2db      	uxtb	r3, r3
 800973a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800973c:	78fb      	ldrb	r3, [r7, #3]
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009744:	b2da      	uxtb	r2, r3
 8009746:	4b30      	ldr	r3, [pc, #192]	; (8009808 <xPortStartScheduler+0x128>)
 8009748:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800974a:	4b30      	ldr	r3, [pc, #192]	; (800980c <xPortStartScheduler+0x12c>)
 800974c:	2207      	movs	r2, #7
 800974e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009750:	e009      	b.n	8009766 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009752:	4b2e      	ldr	r3, [pc, #184]	; (800980c <xPortStartScheduler+0x12c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3b01      	subs	r3, #1
 8009758:	4a2c      	ldr	r2, [pc, #176]	; (800980c <xPortStartScheduler+0x12c>)
 800975a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800975c:	78fb      	ldrb	r3, [r7, #3]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	005b      	lsls	r3, r3, #1
 8009762:	b2db      	uxtb	r3, r3
 8009764:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009766:	78fb      	ldrb	r3, [r7, #3]
 8009768:	b2db      	uxtb	r3, r3
 800976a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976e:	2b80      	cmp	r3, #128	; 0x80
 8009770:	d0ef      	beq.n	8009752 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009772:	4b26      	ldr	r3, [pc, #152]	; (800980c <xPortStartScheduler+0x12c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f1c3 0307 	rsb	r3, r3, #7
 800977a:	2b04      	cmp	r3, #4
 800977c:	d009      	beq.n	8009792 <xPortStartScheduler+0xb2>
 800977e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	60bb      	str	r3, [r7, #8]
 8009790:	e7fe      	b.n	8009790 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009792:	4b1e      	ldr	r3, [pc, #120]	; (800980c <xPortStartScheduler+0x12c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	021b      	lsls	r3, r3, #8
 8009798:	4a1c      	ldr	r2, [pc, #112]	; (800980c <xPortStartScheduler+0x12c>)
 800979a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800979c:	4b1b      	ldr	r3, [pc, #108]	; (800980c <xPortStartScheduler+0x12c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097a4:	4a19      	ldr	r2, [pc, #100]	; (800980c <xPortStartScheduler+0x12c>)
 80097a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097b0:	4b17      	ldr	r3, [pc, #92]	; (8009810 <xPortStartScheduler+0x130>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a16      	ldr	r2, [pc, #88]	; (8009810 <xPortStartScheduler+0x130>)
 80097b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097bc:	4b14      	ldr	r3, [pc, #80]	; (8009810 <xPortStartScheduler+0x130>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a13      	ldr	r2, [pc, #76]	; (8009810 <xPortStartScheduler+0x130>)
 80097c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097c8:	f000 f8d6 	bl	8009978 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097cc:	4b11      	ldr	r3, [pc, #68]	; (8009814 <xPortStartScheduler+0x134>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097d2:	f000 f8f5 	bl	80099c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097d6:	4b10      	ldr	r3, [pc, #64]	; (8009818 <xPortStartScheduler+0x138>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a0f      	ldr	r2, [pc, #60]	; (8009818 <xPortStartScheduler+0x138>)
 80097dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097e2:	f7ff ff69 	bl	80096b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097e6:	f7ff f86b 	bl	80088c0 <vTaskSwitchContext>
	prvTaskExitError();
 80097ea:	f7ff ff21 	bl	8009630 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	e000ed00 	.word	0xe000ed00
 80097fc:	410fc271 	.word	0x410fc271
 8009800:	410fc270 	.word	0x410fc270
 8009804:	e000e400 	.word	0xe000e400
 8009808:	20000e28 	.word	0x20000e28
 800980c:	20000e2c 	.word	0x20000e2c
 8009810:	e000ed20 	.word	0xe000ed20
 8009814:	20000098 	.word	0x20000098
 8009818:	e000ef34 	.word	0xe000ef34

0800981c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009834:	4b0e      	ldr	r3, [pc, #56]	; (8009870 <vPortEnterCritical+0x54>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3301      	adds	r3, #1
 800983a:	4a0d      	ldr	r2, [pc, #52]	; (8009870 <vPortEnterCritical+0x54>)
 800983c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800983e:	4b0c      	ldr	r3, [pc, #48]	; (8009870 <vPortEnterCritical+0x54>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d10e      	bne.n	8009864 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009846:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <vPortEnterCritical+0x58>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d009      	beq.n	8009864 <vPortEnterCritical+0x48>
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	603b      	str	r3, [r7, #0]
 8009862:	e7fe      	b.n	8009862 <vPortEnterCritical+0x46>
	}
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	20000098 	.word	0x20000098
 8009874:	e000ed04 	.word	0xe000ed04

08009878 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800987e:	4b11      	ldr	r3, [pc, #68]	; (80098c4 <vPortExitCritical+0x4c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d109      	bne.n	800989a <vPortExitCritical+0x22>
 8009886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	607b      	str	r3, [r7, #4]
 8009898:	e7fe      	b.n	8009898 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800989a:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <vPortExitCritical+0x4c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3b01      	subs	r3, #1
 80098a0:	4a08      	ldr	r2, [pc, #32]	; (80098c4 <vPortExitCritical+0x4c>)
 80098a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098a4:	4b07      	ldr	r3, [pc, #28]	; (80098c4 <vPortExitCritical+0x4c>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d104      	bne.n	80098b6 <vPortExitCritical+0x3e>
 80098ac:	2300      	movs	r3, #0
 80098ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	20000098 	.word	0x20000098
	...

080098d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098d0:	f3ef 8009 	mrs	r0, PSP
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	4b15      	ldr	r3, [pc, #84]	; (8009930 <pxCurrentTCBConst>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	f01e 0f10 	tst.w	lr, #16
 80098e0:	bf08      	it	eq
 80098e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	6010      	str	r0, [r2, #0]
 80098ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098f4:	f380 8811 	msr	BASEPRI, r0
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f7fe ffde 	bl	80088c0 <vTaskSwitchContext>
 8009904:	f04f 0000 	mov.w	r0, #0
 8009908:	f380 8811 	msr	BASEPRI, r0
 800990c:	bc09      	pop	{r0, r3}
 800990e:	6819      	ldr	r1, [r3, #0]
 8009910:	6808      	ldr	r0, [r1, #0]
 8009912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009916:	f01e 0f10 	tst.w	lr, #16
 800991a:	bf08      	it	eq
 800991c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009920:	f380 8809 	msr	PSP, r0
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	f3af 8000 	nop.w

08009930 <pxCurrentTCBConst>:
 8009930:	200007fc 	.word	0x200007fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop

08009938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009950:	f7fe fefe 	bl	8008750 <xTaskIncrementTick>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800995a:	4b06      	ldr	r3, [pc, #24]	; (8009974 <SysTick_Handler+0x3c>)
 800995c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	2300      	movs	r3, #0
 8009964:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	e000ed04 	.word	0xe000ed04

08009978 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009978:	b480      	push	{r7}
 800997a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800997c:	4b0b      	ldr	r3, [pc, #44]	; (80099ac <vPortSetupTimerInterrupt+0x34>)
 800997e:	2200      	movs	r2, #0
 8009980:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009982:	4b0b      	ldr	r3, [pc, #44]	; (80099b0 <vPortSetupTimerInterrupt+0x38>)
 8009984:	2200      	movs	r2, #0
 8009986:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009988:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <vPortSetupTimerInterrupt+0x3c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a0a      	ldr	r2, [pc, #40]	; (80099b8 <vPortSetupTimerInterrupt+0x40>)
 800998e:	fba2 2303 	umull	r2, r3, r2, r3
 8009992:	099b      	lsrs	r3, r3, #6
 8009994:	4a09      	ldr	r2, [pc, #36]	; (80099bc <vPortSetupTimerInterrupt+0x44>)
 8009996:	3b01      	subs	r3, #1
 8009998:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800999a:	4b04      	ldr	r3, [pc, #16]	; (80099ac <vPortSetupTimerInterrupt+0x34>)
 800999c:	2207      	movs	r2, #7
 800999e:	601a      	str	r2, [r3, #0]
}
 80099a0:	bf00      	nop
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	e000e010 	.word	0xe000e010
 80099b0:	e000e018 	.word	0xe000e018
 80099b4:	20000000 	.word	0x20000000
 80099b8:	10624dd3 	.word	0x10624dd3
 80099bc:	e000e014 	.word	0xe000e014

080099c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099d0 <vPortEnableVFP+0x10>
 80099c4:	6801      	ldr	r1, [r0, #0]
 80099c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099ca:	6001      	str	r1, [r0, #0]
 80099cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099ce:	bf00      	nop
 80099d0:	e000ed88 	.word	0xe000ed88

080099d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099da:	f3ef 8305 	mrs	r3, IPSR
 80099de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b0f      	cmp	r3, #15
 80099e4:	d913      	bls.n	8009a0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099e6:	4a16      	ldr	r2, [pc, #88]	; (8009a40 <vPortValidateInterruptPriority+0x6c>)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4413      	add	r3, r2
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099f0:	4b14      	ldr	r3, [pc, #80]	; (8009a44 <vPortValidateInterruptPriority+0x70>)
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	7afa      	ldrb	r2, [r7, #11]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d209      	bcs.n	8009a0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	607b      	str	r3, [r7, #4]
 8009a0c:	e7fe      	b.n	8009a0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a0e:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <vPortValidateInterruptPriority+0x74>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a16:	4b0d      	ldr	r3, [pc, #52]	; (8009a4c <vPortValidateInterruptPriority+0x78>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d909      	bls.n	8009a32 <vPortValidateInterruptPriority+0x5e>
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	603b      	str	r3, [r7, #0]
 8009a30:	e7fe      	b.n	8009a30 <vPortValidateInterruptPriority+0x5c>
	}
 8009a32:	bf00      	nop
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	e000e3f0 	.word	0xe000e3f0
 8009a44:	20000e28 	.word	0x20000e28
 8009a48:	e000ed0c 	.word	0xe000ed0c
 8009a4c:	20000e2c 	.word	0x20000e2c

08009a50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	; 0x28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a5c:	f7fe fdbe 	bl	80085dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a60:	4b57      	ldr	r3, [pc, #348]	; (8009bc0 <pvPortMalloc+0x170>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a68:	f000 f90c 	bl	8009c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a6c:	4b55      	ldr	r3, [pc, #340]	; (8009bc4 <pvPortMalloc+0x174>)
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4013      	ands	r3, r2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f040 808c 	bne.w	8009b92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d01c      	beq.n	8009aba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009a80:	2208      	movs	r2, #8
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4413      	add	r3, r2
 8009a86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d013      	beq.n	8009aba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f023 0307 	bic.w	r3, r3, #7
 8009a98:	3308      	adds	r3, #8
 8009a9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d009      	beq.n	8009aba <pvPortMalloc+0x6a>
 8009aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	e7fe      	b.n	8009ab8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d068      	beq.n	8009b92 <pvPortMalloc+0x142>
 8009ac0:	4b41      	ldr	r3, [pc, #260]	; (8009bc8 <pvPortMalloc+0x178>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d863      	bhi.n	8009b92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009aca:	4b40      	ldr	r3, [pc, #256]	; (8009bcc <pvPortMalloc+0x17c>)
 8009acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ace:	4b3f      	ldr	r3, [pc, #252]	; (8009bcc <pvPortMalloc+0x17c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ad4:	e004      	b.n	8009ae0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d903      	bls.n	8009af2 <pvPortMalloc+0xa2>
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1f1      	bne.n	8009ad6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009af2:	4b33      	ldr	r3, [pc, #204]	; (8009bc0 <pvPortMalloc+0x170>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d04a      	beq.n	8009b92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2208      	movs	r2, #8
 8009b02:	4413      	add	r3, r2
 8009b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	1ad2      	subs	r2, r2, r3
 8009b16:	2308      	movs	r3, #8
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d91e      	bls.n	8009b5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4413      	add	r3, r2
 8009b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d009      	beq.n	8009b44 <pvPortMalloc+0xf4>
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	613b      	str	r3, [r7, #16]
 8009b42:	e7fe      	b.n	8009b42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	1ad2      	subs	r2, r2, r3
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b56:	69b8      	ldr	r0, [r7, #24]
 8009b58:	f000 f8f6 	bl	8009d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b5c:	4b1a      	ldr	r3, [pc, #104]	; (8009bc8 <pvPortMalloc+0x178>)
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	4a18      	ldr	r2, [pc, #96]	; (8009bc8 <pvPortMalloc+0x178>)
 8009b68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b6a:	4b17      	ldr	r3, [pc, #92]	; (8009bc8 <pvPortMalloc+0x178>)
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	4b18      	ldr	r3, [pc, #96]	; (8009bd0 <pvPortMalloc+0x180>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d203      	bcs.n	8009b7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b76:	4b14      	ldr	r3, [pc, #80]	; (8009bc8 <pvPortMalloc+0x178>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a15      	ldr	r2, [pc, #84]	; (8009bd0 <pvPortMalloc+0x180>)
 8009b7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	4b10      	ldr	r3, [pc, #64]	; (8009bc4 <pvPortMalloc+0x174>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	431a      	orrs	r2, r3
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b92:	f7fe fd31 	bl	80085f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	f003 0307 	and.w	r3, r3, #7
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d009      	beq.n	8009bb4 <pvPortMalloc+0x164>
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	e7fe      	b.n	8009bb2 <pvPortMalloc+0x162>
	return pvReturn;
 8009bb4:	69fb      	ldr	r3, [r7, #28]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3728      	adds	r7, #40	; 0x28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20004a38 	.word	0x20004a38
 8009bc4:	20004a44 	.word	0x20004a44
 8009bc8:	20004a3c 	.word	0x20004a3c
 8009bcc:	20004a30 	.word	0x20004a30
 8009bd0:	20004a40 	.word	0x20004a40

08009bd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d046      	beq.n	8009c74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009be6:	2308      	movs	r3, #8
 8009be8:	425b      	negs	r3, r3
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	4413      	add	r3, r2
 8009bee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	4b20      	ldr	r3, [pc, #128]	; (8009c7c <vPortFree+0xa8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d109      	bne.n	8009c16 <vPortFree+0x42>
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	60fb      	str	r3, [r7, #12]
 8009c14:	e7fe      	b.n	8009c14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d009      	beq.n	8009c32 <vPortFree+0x5e>
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	60bb      	str	r3, [r7, #8]
 8009c30:	e7fe      	b.n	8009c30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	4b11      	ldr	r3, [pc, #68]	; (8009c7c <vPortFree+0xa8>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d019      	beq.n	8009c74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d115      	bne.n	8009c74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	4b0b      	ldr	r3, [pc, #44]	; (8009c7c <vPortFree+0xa8>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	43db      	mvns	r3, r3
 8009c52:	401a      	ands	r2, r3
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c58:	f7fe fcc0 	bl	80085dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	4b07      	ldr	r3, [pc, #28]	; (8009c80 <vPortFree+0xac>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4413      	add	r3, r2
 8009c66:	4a06      	ldr	r2, [pc, #24]	; (8009c80 <vPortFree+0xac>)
 8009c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c6a:	6938      	ldr	r0, [r7, #16]
 8009c6c:	f000 f86c 	bl	8009d48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c70:	f7fe fcc2 	bl	80085f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c74:	bf00      	nop
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	20004a44 	.word	0x20004a44
 8009c80:	20004a3c 	.word	0x20004a3c

08009c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c90:	4b27      	ldr	r3, [pc, #156]	; (8009d30 <prvHeapInit+0xac>)
 8009c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00c      	beq.n	8009cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3307      	adds	r3, #7
 8009ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f023 0307 	bic.w	r3, r3, #7
 8009caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	4a1f      	ldr	r2, [pc, #124]	; (8009d30 <prvHeapInit+0xac>)
 8009cb4:	4413      	add	r3, r2
 8009cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cbc:	4a1d      	ldr	r2, [pc, #116]	; (8009d34 <prvHeapInit+0xb0>)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cc2:	4b1c      	ldr	r3, [pc, #112]	; (8009d34 <prvHeapInit+0xb0>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	4413      	add	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cd0:	2208      	movs	r2, #8
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	1a9b      	subs	r3, r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f023 0307 	bic.w	r3, r3, #7
 8009cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4a15      	ldr	r2, [pc, #84]	; (8009d38 <prvHeapInit+0xb4>)
 8009ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ce6:	4b14      	ldr	r3, [pc, #80]	; (8009d38 <prvHeapInit+0xb4>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2200      	movs	r2, #0
 8009cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cee:	4b12      	ldr	r3, [pc, #72]	; (8009d38 <prvHeapInit+0xb4>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d04:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <prvHeapInit+0xb4>)
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <prvHeapInit+0xb8>)
 8009d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	4a09      	ldr	r2, [pc, #36]	; (8009d40 <prvHeapInit+0xbc>)
 8009d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d1c:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <prvHeapInit+0xc0>)
 8009d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d22:	601a      	str	r2, [r3, #0]
}
 8009d24:	bf00      	nop
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	20000e30 	.word	0x20000e30
 8009d34:	20004a30 	.word	0x20004a30
 8009d38:	20004a38 	.word	0x20004a38
 8009d3c:	20004a40 	.word	0x20004a40
 8009d40:	20004a3c 	.word	0x20004a3c
 8009d44:	20004a44 	.word	0x20004a44

08009d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d50:	4b28      	ldr	r3, [pc, #160]	; (8009df4 <prvInsertBlockIntoFreeList+0xac>)
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	e002      	b.n	8009d5c <prvInsertBlockIntoFreeList+0x14>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d8f7      	bhi.n	8009d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	4413      	add	r3, r2
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d108      	bne.n	8009d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	441a      	add	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	441a      	add	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d118      	bne.n	8009dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	4b15      	ldr	r3, [pc, #84]	; (8009df8 <prvInsertBlockIntoFreeList+0xb0>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d00d      	beq.n	8009dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685a      	ldr	r2, [r3, #4]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	441a      	add	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	601a      	str	r2, [r3, #0]
 8009dc4:	e008      	b.n	8009dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dc6:	4b0c      	ldr	r3, [pc, #48]	; (8009df8 <prvInsertBlockIntoFreeList+0xb0>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	e003      	b.n	8009dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d002      	beq.n	8009de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009de6:	bf00      	nop
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	20004a30 	.word	0x20004a30
 8009df8:	20004a38 	.word	0x20004a38

08009dfc <__errno>:
 8009dfc:	4b01      	ldr	r3, [pc, #4]	; (8009e04 <__errno+0x8>)
 8009dfe:	6818      	ldr	r0, [r3, #0]
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	2000009c 	.word	0x2000009c

08009e08 <__libc_init_array>:
 8009e08:	b570      	push	{r4, r5, r6, lr}
 8009e0a:	4e0d      	ldr	r6, [pc, #52]	; (8009e40 <__libc_init_array+0x38>)
 8009e0c:	4c0d      	ldr	r4, [pc, #52]	; (8009e44 <__libc_init_array+0x3c>)
 8009e0e:	1ba4      	subs	r4, r4, r6
 8009e10:	10a4      	asrs	r4, r4, #2
 8009e12:	2500      	movs	r5, #0
 8009e14:	42a5      	cmp	r5, r4
 8009e16:	d109      	bne.n	8009e2c <__libc_init_array+0x24>
 8009e18:	4e0b      	ldr	r6, [pc, #44]	; (8009e48 <__libc_init_array+0x40>)
 8009e1a:	4c0c      	ldr	r4, [pc, #48]	; (8009e4c <__libc_init_array+0x44>)
 8009e1c:	f000 fc28 	bl	800a670 <_init>
 8009e20:	1ba4      	subs	r4, r4, r6
 8009e22:	10a4      	asrs	r4, r4, #2
 8009e24:	2500      	movs	r5, #0
 8009e26:	42a5      	cmp	r5, r4
 8009e28:	d105      	bne.n	8009e36 <__libc_init_array+0x2e>
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e30:	4798      	blx	r3
 8009e32:	3501      	adds	r5, #1
 8009e34:	e7ee      	b.n	8009e14 <__libc_init_array+0xc>
 8009e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e3a:	4798      	blx	r3
 8009e3c:	3501      	adds	r5, #1
 8009e3e:	e7f2      	b.n	8009e26 <__libc_init_array+0x1e>
 8009e40:	0800a7a8 	.word	0x0800a7a8
 8009e44:	0800a7a8 	.word	0x0800a7a8
 8009e48:	0800a7a8 	.word	0x0800a7a8
 8009e4c:	0800a7ac 	.word	0x0800a7ac

08009e50 <memcpy>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	1e43      	subs	r3, r0, #1
 8009e54:	440a      	add	r2, r1
 8009e56:	4291      	cmp	r1, r2
 8009e58:	d100      	bne.n	8009e5c <memcpy+0xc>
 8009e5a:	bd10      	pop	{r4, pc}
 8009e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e64:	e7f7      	b.n	8009e56 <memcpy+0x6>

08009e66 <memset>:
 8009e66:	4402      	add	r2, r0
 8009e68:	4603      	mov	r3, r0
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d100      	bne.n	8009e70 <memset+0xa>
 8009e6e:	4770      	bx	lr
 8009e70:	f803 1b01 	strb.w	r1, [r3], #1
 8009e74:	e7f9      	b.n	8009e6a <memset+0x4>
	...

08009e78 <siprintf>:
 8009e78:	b40e      	push	{r1, r2, r3}
 8009e7a:	b500      	push	{lr}
 8009e7c:	b09c      	sub	sp, #112	; 0x70
 8009e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8009e80:	9002      	str	r0, [sp, #8]
 8009e82:	9006      	str	r0, [sp, #24]
 8009e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e88:	4809      	ldr	r0, [pc, #36]	; (8009eb0 <siprintf+0x38>)
 8009e8a:	9107      	str	r1, [sp, #28]
 8009e8c:	9104      	str	r1, [sp, #16]
 8009e8e:	4909      	ldr	r1, [pc, #36]	; (8009eb4 <siprintf+0x3c>)
 8009e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e94:	9105      	str	r1, [sp, #20]
 8009e96:	6800      	ldr	r0, [r0, #0]
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	a902      	add	r1, sp, #8
 8009e9c:	f000 f866 	bl	8009f6c <_svfiprintf_r>
 8009ea0:	9b02      	ldr	r3, [sp, #8]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	701a      	strb	r2, [r3, #0]
 8009ea6:	b01c      	add	sp, #112	; 0x70
 8009ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eac:	b003      	add	sp, #12
 8009eae:	4770      	bx	lr
 8009eb0:	2000009c 	.word	0x2000009c
 8009eb4:	ffff0208 	.word	0xffff0208

08009eb8 <__ssputs_r>:
 8009eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ebc:	688e      	ldr	r6, [r1, #8]
 8009ebe:	429e      	cmp	r6, r3
 8009ec0:	4682      	mov	sl, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	4690      	mov	r8, r2
 8009ec6:	4699      	mov	r9, r3
 8009ec8:	d837      	bhi.n	8009f3a <__ssputs_r+0x82>
 8009eca:	898a      	ldrh	r2, [r1, #12]
 8009ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ed0:	d031      	beq.n	8009f36 <__ssputs_r+0x7e>
 8009ed2:	6825      	ldr	r5, [r4, #0]
 8009ed4:	6909      	ldr	r1, [r1, #16]
 8009ed6:	1a6f      	subs	r7, r5, r1
 8009ed8:	6965      	ldr	r5, [r4, #20]
 8009eda:	2302      	movs	r3, #2
 8009edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ee0:	fb95 f5f3 	sdiv	r5, r5, r3
 8009ee4:	f109 0301 	add.w	r3, r9, #1
 8009ee8:	443b      	add	r3, r7
 8009eea:	429d      	cmp	r5, r3
 8009eec:	bf38      	it	cc
 8009eee:	461d      	movcc	r5, r3
 8009ef0:	0553      	lsls	r3, r2, #21
 8009ef2:	d530      	bpl.n	8009f56 <__ssputs_r+0x9e>
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	f000 fb21 	bl	800a53c <_malloc_r>
 8009efa:	4606      	mov	r6, r0
 8009efc:	b950      	cbnz	r0, 8009f14 <__ssputs_r+0x5c>
 8009efe:	230c      	movs	r3, #12
 8009f00:	f8ca 3000 	str.w	r3, [sl]
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f14:	463a      	mov	r2, r7
 8009f16:	6921      	ldr	r1, [r4, #16]
 8009f18:	f7ff ff9a 	bl	8009e50 <memcpy>
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f26:	81a3      	strh	r3, [r4, #12]
 8009f28:	6126      	str	r6, [r4, #16]
 8009f2a:	6165      	str	r5, [r4, #20]
 8009f2c:	443e      	add	r6, r7
 8009f2e:	1bed      	subs	r5, r5, r7
 8009f30:	6026      	str	r6, [r4, #0]
 8009f32:	60a5      	str	r5, [r4, #8]
 8009f34:	464e      	mov	r6, r9
 8009f36:	454e      	cmp	r6, r9
 8009f38:	d900      	bls.n	8009f3c <__ssputs_r+0x84>
 8009f3a:	464e      	mov	r6, r9
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	4641      	mov	r1, r8
 8009f40:	6820      	ldr	r0, [r4, #0]
 8009f42:	f000 fa93 	bl	800a46c <memmove>
 8009f46:	68a3      	ldr	r3, [r4, #8]
 8009f48:	1b9b      	subs	r3, r3, r6
 8009f4a:	60a3      	str	r3, [r4, #8]
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	441e      	add	r6, r3
 8009f50:	6026      	str	r6, [r4, #0]
 8009f52:	2000      	movs	r0, #0
 8009f54:	e7dc      	b.n	8009f10 <__ssputs_r+0x58>
 8009f56:	462a      	mov	r2, r5
 8009f58:	f000 fb4a 	bl	800a5f0 <_realloc_r>
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d1e2      	bne.n	8009f28 <__ssputs_r+0x70>
 8009f62:	6921      	ldr	r1, [r4, #16]
 8009f64:	4650      	mov	r0, sl
 8009f66:	f000 fa9b 	bl	800a4a0 <_free_r>
 8009f6a:	e7c8      	b.n	8009efe <__ssputs_r+0x46>

08009f6c <_svfiprintf_r>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	461d      	mov	r5, r3
 8009f72:	898b      	ldrh	r3, [r1, #12]
 8009f74:	061f      	lsls	r7, r3, #24
 8009f76:	b09d      	sub	sp, #116	; 0x74
 8009f78:	4680      	mov	r8, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	4616      	mov	r6, r2
 8009f7e:	d50f      	bpl.n	8009fa0 <_svfiprintf_r+0x34>
 8009f80:	690b      	ldr	r3, [r1, #16]
 8009f82:	b96b      	cbnz	r3, 8009fa0 <_svfiprintf_r+0x34>
 8009f84:	2140      	movs	r1, #64	; 0x40
 8009f86:	f000 fad9 	bl	800a53c <_malloc_r>
 8009f8a:	6020      	str	r0, [r4, #0]
 8009f8c:	6120      	str	r0, [r4, #16]
 8009f8e:	b928      	cbnz	r0, 8009f9c <_svfiprintf_r+0x30>
 8009f90:	230c      	movs	r3, #12
 8009f92:	f8c8 3000 	str.w	r3, [r8]
 8009f96:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9a:	e0c8      	b.n	800a12e <_svfiprintf_r+0x1c2>
 8009f9c:	2340      	movs	r3, #64	; 0x40
 8009f9e:	6163      	str	r3, [r4, #20]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa4:	2320      	movs	r3, #32
 8009fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009faa:	2330      	movs	r3, #48	; 0x30
 8009fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fb0:	9503      	str	r5, [sp, #12]
 8009fb2:	f04f 0b01 	mov.w	fp, #1
 8009fb6:	4637      	mov	r7, r6
 8009fb8:	463d      	mov	r5, r7
 8009fba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009fbe:	b10b      	cbz	r3, 8009fc4 <_svfiprintf_r+0x58>
 8009fc0:	2b25      	cmp	r3, #37	; 0x25
 8009fc2:	d13e      	bne.n	800a042 <_svfiprintf_r+0xd6>
 8009fc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8009fc8:	d00b      	beq.n	8009fe2 <_svfiprintf_r+0x76>
 8009fca:	4653      	mov	r3, sl
 8009fcc:	4632      	mov	r2, r6
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	f7ff ff71 	bl	8009eb8 <__ssputs_r>
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	f000 80a4 	beq.w	800a124 <_svfiprintf_r+0x1b8>
 8009fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fde:	4453      	add	r3, sl
 8009fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fe2:	783b      	ldrb	r3, [r7, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 809d 	beq.w	800a124 <_svfiprintf_r+0x1b8>
 8009fea:	2300      	movs	r3, #0
 8009fec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	9307      	str	r3, [sp, #28]
 8009ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8009ffe:	462f      	mov	r7, r5
 800a000:	2205      	movs	r2, #5
 800a002:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a006:	4850      	ldr	r0, [pc, #320]	; (800a148 <_svfiprintf_r+0x1dc>)
 800a008:	f7f6 f8f2 	bl	80001f0 <memchr>
 800a00c:	9b04      	ldr	r3, [sp, #16]
 800a00e:	b9d0      	cbnz	r0, 800a046 <_svfiprintf_r+0xda>
 800a010:	06d9      	lsls	r1, r3, #27
 800a012:	bf44      	itt	mi
 800a014:	2220      	movmi	r2, #32
 800a016:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a01a:	071a      	lsls	r2, r3, #28
 800a01c:	bf44      	itt	mi
 800a01e:	222b      	movmi	r2, #43	; 0x2b
 800a020:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a024:	782a      	ldrb	r2, [r5, #0]
 800a026:	2a2a      	cmp	r2, #42	; 0x2a
 800a028:	d015      	beq.n	800a056 <_svfiprintf_r+0xea>
 800a02a:	9a07      	ldr	r2, [sp, #28]
 800a02c:	462f      	mov	r7, r5
 800a02e:	2000      	movs	r0, #0
 800a030:	250a      	movs	r5, #10
 800a032:	4639      	mov	r1, r7
 800a034:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a038:	3b30      	subs	r3, #48	; 0x30
 800a03a:	2b09      	cmp	r3, #9
 800a03c:	d94d      	bls.n	800a0da <_svfiprintf_r+0x16e>
 800a03e:	b1b8      	cbz	r0, 800a070 <_svfiprintf_r+0x104>
 800a040:	e00f      	b.n	800a062 <_svfiprintf_r+0xf6>
 800a042:	462f      	mov	r7, r5
 800a044:	e7b8      	b.n	8009fb8 <_svfiprintf_r+0x4c>
 800a046:	4a40      	ldr	r2, [pc, #256]	; (800a148 <_svfiprintf_r+0x1dc>)
 800a048:	1a80      	subs	r0, r0, r2
 800a04a:	fa0b f000 	lsl.w	r0, fp, r0
 800a04e:	4318      	orrs	r0, r3
 800a050:	9004      	str	r0, [sp, #16]
 800a052:	463d      	mov	r5, r7
 800a054:	e7d3      	b.n	8009ffe <_svfiprintf_r+0x92>
 800a056:	9a03      	ldr	r2, [sp, #12]
 800a058:	1d11      	adds	r1, r2, #4
 800a05a:	6812      	ldr	r2, [r2, #0]
 800a05c:	9103      	str	r1, [sp, #12]
 800a05e:	2a00      	cmp	r2, #0
 800a060:	db01      	blt.n	800a066 <_svfiprintf_r+0xfa>
 800a062:	9207      	str	r2, [sp, #28]
 800a064:	e004      	b.n	800a070 <_svfiprintf_r+0x104>
 800a066:	4252      	negs	r2, r2
 800a068:	f043 0302 	orr.w	r3, r3, #2
 800a06c:	9207      	str	r2, [sp, #28]
 800a06e:	9304      	str	r3, [sp, #16]
 800a070:	783b      	ldrb	r3, [r7, #0]
 800a072:	2b2e      	cmp	r3, #46	; 0x2e
 800a074:	d10c      	bne.n	800a090 <_svfiprintf_r+0x124>
 800a076:	787b      	ldrb	r3, [r7, #1]
 800a078:	2b2a      	cmp	r3, #42	; 0x2a
 800a07a:	d133      	bne.n	800a0e4 <_svfiprintf_r+0x178>
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	1d1a      	adds	r2, r3, #4
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	9203      	str	r2, [sp, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	bfb8      	it	lt
 800a088:	f04f 33ff 	movlt.w	r3, #4294967295
 800a08c:	3702      	adds	r7, #2
 800a08e:	9305      	str	r3, [sp, #20]
 800a090:	4d2e      	ldr	r5, [pc, #184]	; (800a14c <_svfiprintf_r+0x1e0>)
 800a092:	7839      	ldrb	r1, [r7, #0]
 800a094:	2203      	movs	r2, #3
 800a096:	4628      	mov	r0, r5
 800a098:	f7f6 f8aa 	bl	80001f0 <memchr>
 800a09c:	b138      	cbz	r0, 800a0ae <_svfiprintf_r+0x142>
 800a09e:	2340      	movs	r3, #64	; 0x40
 800a0a0:	1b40      	subs	r0, r0, r5
 800a0a2:	fa03 f000 	lsl.w	r0, r3, r0
 800a0a6:	9b04      	ldr	r3, [sp, #16]
 800a0a8:	4303      	orrs	r3, r0
 800a0aa:	3701      	adds	r7, #1
 800a0ac:	9304      	str	r3, [sp, #16]
 800a0ae:	7839      	ldrb	r1, [r7, #0]
 800a0b0:	4827      	ldr	r0, [pc, #156]	; (800a150 <_svfiprintf_r+0x1e4>)
 800a0b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0b6:	2206      	movs	r2, #6
 800a0b8:	1c7e      	adds	r6, r7, #1
 800a0ba:	f7f6 f899 	bl	80001f0 <memchr>
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d038      	beq.n	800a134 <_svfiprintf_r+0x1c8>
 800a0c2:	4b24      	ldr	r3, [pc, #144]	; (800a154 <_svfiprintf_r+0x1e8>)
 800a0c4:	bb13      	cbnz	r3, 800a10c <_svfiprintf_r+0x1a0>
 800a0c6:	9b03      	ldr	r3, [sp, #12]
 800a0c8:	3307      	adds	r3, #7
 800a0ca:	f023 0307 	bic.w	r3, r3, #7
 800a0ce:	3308      	adds	r3, #8
 800a0d0:	9303      	str	r3, [sp, #12]
 800a0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d4:	444b      	add	r3, r9
 800a0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d8:	e76d      	b.n	8009fb6 <_svfiprintf_r+0x4a>
 800a0da:	fb05 3202 	mla	r2, r5, r2, r3
 800a0de:	2001      	movs	r0, #1
 800a0e0:	460f      	mov	r7, r1
 800a0e2:	e7a6      	b.n	800a032 <_svfiprintf_r+0xc6>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	3701      	adds	r7, #1
 800a0e8:	9305      	str	r3, [sp, #20]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	250a      	movs	r5, #10
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0f4:	3a30      	subs	r2, #48	; 0x30
 800a0f6:	2a09      	cmp	r2, #9
 800a0f8:	d903      	bls.n	800a102 <_svfiprintf_r+0x196>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0c8      	beq.n	800a090 <_svfiprintf_r+0x124>
 800a0fe:	9105      	str	r1, [sp, #20]
 800a100:	e7c6      	b.n	800a090 <_svfiprintf_r+0x124>
 800a102:	fb05 2101 	mla	r1, r5, r1, r2
 800a106:	2301      	movs	r3, #1
 800a108:	4607      	mov	r7, r0
 800a10a:	e7f0      	b.n	800a0ee <_svfiprintf_r+0x182>
 800a10c:	ab03      	add	r3, sp, #12
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	4622      	mov	r2, r4
 800a112:	4b11      	ldr	r3, [pc, #68]	; (800a158 <_svfiprintf_r+0x1ec>)
 800a114:	a904      	add	r1, sp, #16
 800a116:	4640      	mov	r0, r8
 800a118:	f3af 8000 	nop.w
 800a11c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a120:	4681      	mov	r9, r0
 800a122:	d1d6      	bne.n	800a0d2 <_svfiprintf_r+0x166>
 800a124:	89a3      	ldrh	r3, [r4, #12]
 800a126:	065b      	lsls	r3, r3, #25
 800a128:	f53f af35 	bmi.w	8009f96 <_svfiprintf_r+0x2a>
 800a12c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a12e:	b01d      	add	sp, #116	; 0x74
 800a130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a134:	ab03      	add	r3, sp, #12
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	4622      	mov	r2, r4
 800a13a:	4b07      	ldr	r3, [pc, #28]	; (800a158 <_svfiprintf_r+0x1ec>)
 800a13c:	a904      	add	r1, sp, #16
 800a13e:	4640      	mov	r0, r8
 800a140:	f000 f882 	bl	800a248 <_printf_i>
 800a144:	e7ea      	b.n	800a11c <_svfiprintf_r+0x1b0>
 800a146:	bf00      	nop
 800a148:	0800a76c 	.word	0x0800a76c
 800a14c:	0800a772 	.word	0x0800a772
 800a150:	0800a776 	.word	0x0800a776
 800a154:	00000000 	.word	0x00000000
 800a158:	08009eb9 	.word	0x08009eb9

0800a15c <_printf_common>:
 800a15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a160:	4691      	mov	r9, r2
 800a162:	461f      	mov	r7, r3
 800a164:	688a      	ldr	r2, [r1, #8]
 800a166:	690b      	ldr	r3, [r1, #16]
 800a168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a16c:	4293      	cmp	r3, r2
 800a16e:	bfb8      	it	lt
 800a170:	4613      	movlt	r3, r2
 800a172:	f8c9 3000 	str.w	r3, [r9]
 800a176:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a17a:	4606      	mov	r6, r0
 800a17c:	460c      	mov	r4, r1
 800a17e:	b112      	cbz	r2, 800a186 <_printf_common+0x2a>
 800a180:	3301      	adds	r3, #1
 800a182:	f8c9 3000 	str.w	r3, [r9]
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	0699      	lsls	r1, r3, #26
 800a18a:	bf42      	ittt	mi
 800a18c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a190:	3302      	addmi	r3, #2
 800a192:	f8c9 3000 	strmi.w	r3, [r9]
 800a196:	6825      	ldr	r5, [r4, #0]
 800a198:	f015 0506 	ands.w	r5, r5, #6
 800a19c:	d107      	bne.n	800a1ae <_printf_common+0x52>
 800a19e:	f104 0a19 	add.w	sl, r4, #25
 800a1a2:	68e3      	ldr	r3, [r4, #12]
 800a1a4:	f8d9 2000 	ldr.w	r2, [r9]
 800a1a8:	1a9b      	subs	r3, r3, r2
 800a1aa:	42ab      	cmp	r3, r5
 800a1ac:	dc28      	bgt.n	800a200 <_printf_common+0xa4>
 800a1ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a1b2:	6822      	ldr	r2, [r4, #0]
 800a1b4:	3300      	adds	r3, #0
 800a1b6:	bf18      	it	ne
 800a1b8:	2301      	movne	r3, #1
 800a1ba:	0692      	lsls	r2, r2, #26
 800a1bc:	d42d      	bmi.n	800a21a <_printf_common+0xbe>
 800a1be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	47c0      	blx	r8
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d020      	beq.n	800a20e <_printf_common+0xb2>
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	68e5      	ldr	r5, [r4, #12]
 800a1d0:	f8d9 2000 	ldr.w	r2, [r9]
 800a1d4:	f003 0306 	and.w	r3, r3, #6
 800a1d8:	2b04      	cmp	r3, #4
 800a1da:	bf08      	it	eq
 800a1dc:	1aad      	subeq	r5, r5, r2
 800a1de:	68a3      	ldr	r3, [r4, #8]
 800a1e0:	6922      	ldr	r2, [r4, #16]
 800a1e2:	bf0c      	ite	eq
 800a1e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1e8:	2500      	movne	r5, #0
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	bfc4      	itt	gt
 800a1ee:	1a9b      	subgt	r3, r3, r2
 800a1f0:	18ed      	addgt	r5, r5, r3
 800a1f2:	f04f 0900 	mov.w	r9, #0
 800a1f6:	341a      	adds	r4, #26
 800a1f8:	454d      	cmp	r5, r9
 800a1fa:	d11a      	bne.n	800a232 <_printf_common+0xd6>
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	e008      	b.n	800a212 <_printf_common+0xb6>
 800a200:	2301      	movs	r3, #1
 800a202:	4652      	mov	r2, sl
 800a204:	4639      	mov	r1, r7
 800a206:	4630      	mov	r0, r6
 800a208:	47c0      	blx	r8
 800a20a:	3001      	adds	r0, #1
 800a20c:	d103      	bne.n	800a216 <_printf_common+0xba>
 800a20e:	f04f 30ff 	mov.w	r0, #4294967295
 800a212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a216:	3501      	adds	r5, #1
 800a218:	e7c3      	b.n	800a1a2 <_printf_common+0x46>
 800a21a:	18e1      	adds	r1, r4, r3
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	2030      	movs	r0, #48	; 0x30
 800a220:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a224:	4422      	add	r2, r4
 800a226:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a22a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a22e:	3302      	adds	r3, #2
 800a230:	e7c5      	b.n	800a1be <_printf_common+0x62>
 800a232:	2301      	movs	r3, #1
 800a234:	4622      	mov	r2, r4
 800a236:	4639      	mov	r1, r7
 800a238:	4630      	mov	r0, r6
 800a23a:	47c0      	blx	r8
 800a23c:	3001      	adds	r0, #1
 800a23e:	d0e6      	beq.n	800a20e <_printf_common+0xb2>
 800a240:	f109 0901 	add.w	r9, r9, #1
 800a244:	e7d8      	b.n	800a1f8 <_printf_common+0x9c>
	...

0800a248 <_printf_i>:
 800a248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a24c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a250:	460c      	mov	r4, r1
 800a252:	7e09      	ldrb	r1, [r1, #24]
 800a254:	b085      	sub	sp, #20
 800a256:	296e      	cmp	r1, #110	; 0x6e
 800a258:	4617      	mov	r7, r2
 800a25a:	4606      	mov	r6, r0
 800a25c:	4698      	mov	r8, r3
 800a25e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a260:	f000 80b3 	beq.w	800a3ca <_printf_i+0x182>
 800a264:	d822      	bhi.n	800a2ac <_printf_i+0x64>
 800a266:	2963      	cmp	r1, #99	; 0x63
 800a268:	d036      	beq.n	800a2d8 <_printf_i+0x90>
 800a26a:	d80a      	bhi.n	800a282 <_printf_i+0x3a>
 800a26c:	2900      	cmp	r1, #0
 800a26e:	f000 80b9 	beq.w	800a3e4 <_printf_i+0x19c>
 800a272:	2958      	cmp	r1, #88	; 0x58
 800a274:	f000 8083 	beq.w	800a37e <_printf_i+0x136>
 800a278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a27c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a280:	e032      	b.n	800a2e8 <_printf_i+0xa0>
 800a282:	2964      	cmp	r1, #100	; 0x64
 800a284:	d001      	beq.n	800a28a <_printf_i+0x42>
 800a286:	2969      	cmp	r1, #105	; 0x69
 800a288:	d1f6      	bne.n	800a278 <_printf_i+0x30>
 800a28a:	6820      	ldr	r0, [r4, #0]
 800a28c:	6813      	ldr	r3, [r2, #0]
 800a28e:	0605      	lsls	r5, r0, #24
 800a290:	f103 0104 	add.w	r1, r3, #4
 800a294:	d52a      	bpl.n	800a2ec <_printf_i+0xa4>
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6011      	str	r1, [r2, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	da03      	bge.n	800a2a6 <_printf_i+0x5e>
 800a29e:	222d      	movs	r2, #45	; 0x2d
 800a2a0:	425b      	negs	r3, r3
 800a2a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a2a6:	486f      	ldr	r0, [pc, #444]	; (800a464 <_printf_i+0x21c>)
 800a2a8:	220a      	movs	r2, #10
 800a2aa:	e039      	b.n	800a320 <_printf_i+0xd8>
 800a2ac:	2973      	cmp	r1, #115	; 0x73
 800a2ae:	f000 809d 	beq.w	800a3ec <_printf_i+0x1a4>
 800a2b2:	d808      	bhi.n	800a2c6 <_printf_i+0x7e>
 800a2b4:	296f      	cmp	r1, #111	; 0x6f
 800a2b6:	d020      	beq.n	800a2fa <_printf_i+0xb2>
 800a2b8:	2970      	cmp	r1, #112	; 0x70
 800a2ba:	d1dd      	bne.n	800a278 <_printf_i+0x30>
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	f043 0320 	orr.w	r3, r3, #32
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	e003      	b.n	800a2ce <_printf_i+0x86>
 800a2c6:	2975      	cmp	r1, #117	; 0x75
 800a2c8:	d017      	beq.n	800a2fa <_printf_i+0xb2>
 800a2ca:	2978      	cmp	r1, #120	; 0x78
 800a2cc:	d1d4      	bne.n	800a278 <_printf_i+0x30>
 800a2ce:	2378      	movs	r3, #120	; 0x78
 800a2d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2d4:	4864      	ldr	r0, [pc, #400]	; (800a468 <_printf_i+0x220>)
 800a2d6:	e055      	b.n	800a384 <_printf_i+0x13c>
 800a2d8:	6813      	ldr	r3, [r2, #0]
 800a2da:	1d19      	adds	r1, r3, #4
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6011      	str	r1, [r2, #0]
 800a2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e08c      	b.n	800a406 <_printf_i+0x1be>
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6011      	str	r1, [r2, #0]
 800a2f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2f4:	bf18      	it	ne
 800a2f6:	b21b      	sxthne	r3, r3
 800a2f8:	e7cf      	b.n	800a29a <_printf_i+0x52>
 800a2fa:	6813      	ldr	r3, [r2, #0]
 800a2fc:	6825      	ldr	r5, [r4, #0]
 800a2fe:	1d18      	adds	r0, r3, #4
 800a300:	6010      	str	r0, [r2, #0]
 800a302:	0628      	lsls	r0, r5, #24
 800a304:	d501      	bpl.n	800a30a <_printf_i+0xc2>
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	e002      	b.n	800a310 <_printf_i+0xc8>
 800a30a:	0668      	lsls	r0, r5, #25
 800a30c:	d5fb      	bpl.n	800a306 <_printf_i+0xbe>
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	4854      	ldr	r0, [pc, #336]	; (800a464 <_printf_i+0x21c>)
 800a312:	296f      	cmp	r1, #111	; 0x6f
 800a314:	bf14      	ite	ne
 800a316:	220a      	movne	r2, #10
 800a318:	2208      	moveq	r2, #8
 800a31a:	2100      	movs	r1, #0
 800a31c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a320:	6865      	ldr	r5, [r4, #4]
 800a322:	60a5      	str	r5, [r4, #8]
 800a324:	2d00      	cmp	r5, #0
 800a326:	f2c0 8095 	blt.w	800a454 <_printf_i+0x20c>
 800a32a:	6821      	ldr	r1, [r4, #0]
 800a32c:	f021 0104 	bic.w	r1, r1, #4
 800a330:	6021      	str	r1, [r4, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d13d      	bne.n	800a3b2 <_printf_i+0x16a>
 800a336:	2d00      	cmp	r5, #0
 800a338:	f040 808e 	bne.w	800a458 <_printf_i+0x210>
 800a33c:	4665      	mov	r5, ip
 800a33e:	2a08      	cmp	r2, #8
 800a340:	d10b      	bne.n	800a35a <_printf_i+0x112>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	07db      	lsls	r3, r3, #31
 800a346:	d508      	bpl.n	800a35a <_printf_i+0x112>
 800a348:	6923      	ldr	r3, [r4, #16]
 800a34a:	6862      	ldr	r2, [r4, #4]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	bfde      	ittt	le
 800a350:	2330      	movle	r3, #48	; 0x30
 800a352:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a356:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a35a:	ebac 0305 	sub.w	r3, ip, r5
 800a35e:	6123      	str	r3, [r4, #16]
 800a360:	f8cd 8000 	str.w	r8, [sp]
 800a364:	463b      	mov	r3, r7
 800a366:	aa03      	add	r2, sp, #12
 800a368:	4621      	mov	r1, r4
 800a36a:	4630      	mov	r0, r6
 800a36c:	f7ff fef6 	bl	800a15c <_printf_common>
 800a370:	3001      	adds	r0, #1
 800a372:	d14d      	bne.n	800a410 <_printf_i+0x1c8>
 800a374:	f04f 30ff 	mov.w	r0, #4294967295
 800a378:	b005      	add	sp, #20
 800a37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a37e:	4839      	ldr	r0, [pc, #228]	; (800a464 <_printf_i+0x21c>)
 800a380:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a384:	6813      	ldr	r3, [r2, #0]
 800a386:	6821      	ldr	r1, [r4, #0]
 800a388:	1d1d      	adds	r5, r3, #4
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6015      	str	r5, [r2, #0]
 800a38e:	060a      	lsls	r2, r1, #24
 800a390:	d50b      	bpl.n	800a3aa <_printf_i+0x162>
 800a392:	07ca      	lsls	r2, r1, #31
 800a394:	bf44      	itt	mi
 800a396:	f041 0120 	orrmi.w	r1, r1, #32
 800a39a:	6021      	strmi	r1, [r4, #0]
 800a39c:	b91b      	cbnz	r3, 800a3a6 <_printf_i+0x15e>
 800a39e:	6822      	ldr	r2, [r4, #0]
 800a3a0:	f022 0220 	bic.w	r2, r2, #32
 800a3a4:	6022      	str	r2, [r4, #0]
 800a3a6:	2210      	movs	r2, #16
 800a3a8:	e7b7      	b.n	800a31a <_printf_i+0xd2>
 800a3aa:	064d      	lsls	r5, r1, #25
 800a3ac:	bf48      	it	mi
 800a3ae:	b29b      	uxthmi	r3, r3
 800a3b0:	e7ef      	b.n	800a392 <_printf_i+0x14a>
 800a3b2:	4665      	mov	r5, ip
 800a3b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3b8:	fb02 3311 	mls	r3, r2, r1, r3
 800a3bc:	5cc3      	ldrb	r3, [r0, r3]
 800a3be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	2900      	cmp	r1, #0
 800a3c6:	d1f5      	bne.n	800a3b4 <_printf_i+0x16c>
 800a3c8:	e7b9      	b.n	800a33e <_printf_i+0xf6>
 800a3ca:	6813      	ldr	r3, [r2, #0]
 800a3cc:	6825      	ldr	r5, [r4, #0]
 800a3ce:	6961      	ldr	r1, [r4, #20]
 800a3d0:	1d18      	adds	r0, r3, #4
 800a3d2:	6010      	str	r0, [r2, #0]
 800a3d4:	0628      	lsls	r0, r5, #24
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	d501      	bpl.n	800a3de <_printf_i+0x196>
 800a3da:	6019      	str	r1, [r3, #0]
 800a3dc:	e002      	b.n	800a3e4 <_printf_i+0x19c>
 800a3de:	066a      	lsls	r2, r5, #25
 800a3e0:	d5fb      	bpl.n	800a3da <_printf_i+0x192>
 800a3e2:	8019      	strh	r1, [r3, #0]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	6123      	str	r3, [r4, #16]
 800a3e8:	4665      	mov	r5, ip
 800a3ea:	e7b9      	b.n	800a360 <_printf_i+0x118>
 800a3ec:	6813      	ldr	r3, [r2, #0]
 800a3ee:	1d19      	adds	r1, r3, #4
 800a3f0:	6011      	str	r1, [r2, #0]
 800a3f2:	681d      	ldr	r5, [r3, #0]
 800a3f4:	6862      	ldr	r2, [r4, #4]
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f7f5 fef9 	bl	80001f0 <memchr>
 800a3fe:	b108      	cbz	r0, 800a404 <_printf_i+0x1bc>
 800a400:	1b40      	subs	r0, r0, r5
 800a402:	6060      	str	r0, [r4, #4]
 800a404:	6863      	ldr	r3, [r4, #4]
 800a406:	6123      	str	r3, [r4, #16]
 800a408:	2300      	movs	r3, #0
 800a40a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a40e:	e7a7      	b.n	800a360 <_printf_i+0x118>
 800a410:	6923      	ldr	r3, [r4, #16]
 800a412:	462a      	mov	r2, r5
 800a414:	4639      	mov	r1, r7
 800a416:	4630      	mov	r0, r6
 800a418:	47c0      	blx	r8
 800a41a:	3001      	adds	r0, #1
 800a41c:	d0aa      	beq.n	800a374 <_printf_i+0x12c>
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	079b      	lsls	r3, r3, #30
 800a422:	d413      	bmi.n	800a44c <_printf_i+0x204>
 800a424:	68e0      	ldr	r0, [r4, #12]
 800a426:	9b03      	ldr	r3, [sp, #12]
 800a428:	4298      	cmp	r0, r3
 800a42a:	bfb8      	it	lt
 800a42c:	4618      	movlt	r0, r3
 800a42e:	e7a3      	b.n	800a378 <_printf_i+0x130>
 800a430:	2301      	movs	r3, #1
 800a432:	464a      	mov	r2, r9
 800a434:	4639      	mov	r1, r7
 800a436:	4630      	mov	r0, r6
 800a438:	47c0      	blx	r8
 800a43a:	3001      	adds	r0, #1
 800a43c:	d09a      	beq.n	800a374 <_printf_i+0x12c>
 800a43e:	3501      	adds	r5, #1
 800a440:	68e3      	ldr	r3, [r4, #12]
 800a442:	9a03      	ldr	r2, [sp, #12]
 800a444:	1a9b      	subs	r3, r3, r2
 800a446:	42ab      	cmp	r3, r5
 800a448:	dcf2      	bgt.n	800a430 <_printf_i+0x1e8>
 800a44a:	e7eb      	b.n	800a424 <_printf_i+0x1dc>
 800a44c:	2500      	movs	r5, #0
 800a44e:	f104 0919 	add.w	r9, r4, #25
 800a452:	e7f5      	b.n	800a440 <_printf_i+0x1f8>
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1ac      	bne.n	800a3b2 <_printf_i+0x16a>
 800a458:	7803      	ldrb	r3, [r0, #0]
 800a45a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a45e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a462:	e76c      	b.n	800a33e <_printf_i+0xf6>
 800a464:	0800a77d 	.word	0x0800a77d
 800a468:	0800a78e 	.word	0x0800a78e

0800a46c <memmove>:
 800a46c:	4288      	cmp	r0, r1
 800a46e:	b510      	push	{r4, lr}
 800a470:	eb01 0302 	add.w	r3, r1, r2
 800a474:	d807      	bhi.n	800a486 <memmove+0x1a>
 800a476:	1e42      	subs	r2, r0, #1
 800a478:	4299      	cmp	r1, r3
 800a47a:	d00a      	beq.n	800a492 <memmove+0x26>
 800a47c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a480:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a484:	e7f8      	b.n	800a478 <memmove+0xc>
 800a486:	4283      	cmp	r3, r0
 800a488:	d9f5      	bls.n	800a476 <memmove+0xa>
 800a48a:	1881      	adds	r1, r0, r2
 800a48c:	1ad2      	subs	r2, r2, r3
 800a48e:	42d3      	cmn	r3, r2
 800a490:	d100      	bne.n	800a494 <memmove+0x28>
 800a492:	bd10      	pop	{r4, pc}
 800a494:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a498:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a49c:	e7f7      	b.n	800a48e <memmove+0x22>
	...

0800a4a0 <_free_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	d045      	beq.n	800a534 <_free_r+0x94>
 800a4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ac:	1f0c      	subs	r4, r1, #4
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	bfb8      	it	lt
 800a4b2:	18e4      	addlt	r4, r4, r3
 800a4b4:	f000 f8d2 	bl	800a65c <__malloc_lock>
 800a4b8:	4a1f      	ldr	r2, [pc, #124]	; (800a538 <_free_r+0x98>)
 800a4ba:	6813      	ldr	r3, [r2, #0]
 800a4bc:	4610      	mov	r0, r2
 800a4be:	b933      	cbnz	r3, 800a4ce <_free_r+0x2e>
 800a4c0:	6063      	str	r3, [r4, #4]
 800a4c2:	6014      	str	r4, [r2, #0]
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ca:	f000 b8c8 	b.w	800a65e <__malloc_unlock>
 800a4ce:	42a3      	cmp	r3, r4
 800a4d0:	d90c      	bls.n	800a4ec <_free_r+0x4c>
 800a4d2:	6821      	ldr	r1, [r4, #0]
 800a4d4:	1862      	adds	r2, r4, r1
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	bf04      	itt	eq
 800a4da:	681a      	ldreq	r2, [r3, #0]
 800a4dc:	685b      	ldreq	r3, [r3, #4]
 800a4de:	6063      	str	r3, [r4, #4]
 800a4e0:	bf04      	itt	eq
 800a4e2:	1852      	addeq	r2, r2, r1
 800a4e4:	6022      	streq	r2, [r4, #0]
 800a4e6:	6004      	str	r4, [r0, #0]
 800a4e8:	e7ec      	b.n	800a4c4 <_free_r+0x24>
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	b10a      	cbz	r2, 800a4f4 <_free_r+0x54>
 800a4f0:	42a2      	cmp	r2, r4
 800a4f2:	d9fa      	bls.n	800a4ea <_free_r+0x4a>
 800a4f4:	6819      	ldr	r1, [r3, #0]
 800a4f6:	1858      	adds	r0, r3, r1
 800a4f8:	42a0      	cmp	r0, r4
 800a4fa:	d10b      	bne.n	800a514 <_free_r+0x74>
 800a4fc:	6820      	ldr	r0, [r4, #0]
 800a4fe:	4401      	add	r1, r0
 800a500:	1858      	adds	r0, r3, r1
 800a502:	4282      	cmp	r2, r0
 800a504:	6019      	str	r1, [r3, #0]
 800a506:	d1dd      	bne.n	800a4c4 <_free_r+0x24>
 800a508:	6810      	ldr	r0, [r2, #0]
 800a50a:	6852      	ldr	r2, [r2, #4]
 800a50c:	605a      	str	r2, [r3, #4]
 800a50e:	4401      	add	r1, r0
 800a510:	6019      	str	r1, [r3, #0]
 800a512:	e7d7      	b.n	800a4c4 <_free_r+0x24>
 800a514:	d902      	bls.n	800a51c <_free_r+0x7c>
 800a516:	230c      	movs	r3, #12
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	e7d3      	b.n	800a4c4 <_free_r+0x24>
 800a51c:	6820      	ldr	r0, [r4, #0]
 800a51e:	1821      	adds	r1, r4, r0
 800a520:	428a      	cmp	r2, r1
 800a522:	bf04      	itt	eq
 800a524:	6811      	ldreq	r1, [r2, #0]
 800a526:	6852      	ldreq	r2, [r2, #4]
 800a528:	6062      	str	r2, [r4, #4]
 800a52a:	bf04      	itt	eq
 800a52c:	1809      	addeq	r1, r1, r0
 800a52e:	6021      	streq	r1, [r4, #0]
 800a530:	605c      	str	r4, [r3, #4]
 800a532:	e7c7      	b.n	800a4c4 <_free_r+0x24>
 800a534:	bd38      	pop	{r3, r4, r5, pc}
 800a536:	bf00      	nop
 800a538:	20004a48 	.word	0x20004a48

0800a53c <_malloc_r>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	1ccd      	adds	r5, r1, #3
 800a540:	f025 0503 	bic.w	r5, r5, #3
 800a544:	3508      	adds	r5, #8
 800a546:	2d0c      	cmp	r5, #12
 800a548:	bf38      	it	cc
 800a54a:	250c      	movcc	r5, #12
 800a54c:	2d00      	cmp	r5, #0
 800a54e:	4606      	mov	r6, r0
 800a550:	db01      	blt.n	800a556 <_malloc_r+0x1a>
 800a552:	42a9      	cmp	r1, r5
 800a554:	d903      	bls.n	800a55e <_malloc_r+0x22>
 800a556:	230c      	movs	r3, #12
 800a558:	6033      	str	r3, [r6, #0]
 800a55a:	2000      	movs	r0, #0
 800a55c:	bd70      	pop	{r4, r5, r6, pc}
 800a55e:	f000 f87d 	bl	800a65c <__malloc_lock>
 800a562:	4a21      	ldr	r2, [pc, #132]	; (800a5e8 <_malloc_r+0xac>)
 800a564:	6814      	ldr	r4, [r2, #0]
 800a566:	4621      	mov	r1, r4
 800a568:	b991      	cbnz	r1, 800a590 <_malloc_r+0x54>
 800a56a:	4c20      	ldr	r4, [pc, #128]	; (800a5ec <_malloc_r+0xb0>)
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	b91b      	cbnz	r3, 800a578 <_malloc_r+0x3c>
 800a570:	4630      	mov	r0, r6
 800a572:	f000 f863 	bl	800a63c <_sbrk_r>
 800a576:	6020      	str	r0, [r4, #0]
 800a578:	4629      	mov	r1, r5
 800a57a:	4630      	mov	r0, r6
 800a57c:	f000 f85e 	bl	800a63c <_sbrk_r>
 800a580:	1c43      	adds	r3, r0, #1
 800a582:	d124      	bne.n	800a5ce <_malloc_r+0x92>
 800a584:	230c      	movs	r3, #12
 800a586:	6033      	str	r3, [r6, #0]
 800a588:	4630      	mov	r0, r6
 800a58a:	f000 f868 	bl	800a65e <__malloc_unlock>
 800a58e:	e7e4      	b.n	800a55a <_malloc_r+0x1e>
 800a590:	680b      	ldr	r3, [r1, #0]
 800a592:	1b5b      	subs	r3, r3, r5
 800a594:	d418      	bmi.n	800a5c8 <_malloc_r+0x8c>
 800a596:	2b0b      	cmp	r3, #11
 800a598:	d90f      	bls.n	800a5ba <_malloc_r+0x7e>
 800a59a:	600b      	str	r3, [r1, #0]
 800a59c:	50cd      	str	r5, [r1, r3]
 800a59e:	18cc      	adds	r4, r1, r3
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f000 f85c 	bl	800a65e <__malloc_unlock>
 800a5a6:	f104 000b 	add.w	r0, r4, #11
 800a5aa:	1d23      	adds	r3, r4, #4
 800a5ac:	f020 0007 	bic.w	r0, r0, #7
 800a5b0:	1ac3      	subs	r3, r0, r3
 800a5b2:	d0d3      	beq.n	800a55c <_malloc_r+0x20>
 800a5b4:	425a      	negs	r2, r3
 800a5b6:	50e2      	str	r2, [r4, r3]
 800a5b8:	e7d0      	b.n	800a55c <_malloc_r+0x20>
 800a5ba:	428c      	cmp	r4, r1
 800a5bc:	684b      	ldr	r3, [r1, #4]
 800a5be:	bf16      	itet	ne
 800a5c0:	6063      	strne	r3, [r4, #4]
 800a5c2:	6013      	streq	r3, [r2, #0]
 800a5c4:	460c      	movne	r4, r1
 800a5c6:	e7eb      	b.n	800a5a0 <_malloc_r+0x64>
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	6849      	ldr	r1, [r1, #4]
 800a5cc:	e7cc      	b.n	800a568 <_malloc_r+0x2c>
 800a5ce:	1cc4      	adds	r4, r0, #3
 800a5d0:	f024 0403 	bic.w	r4, r4, #3
 800a5d4:	42a0      	cmp	r0, r4
 800a5d6:	d005      	beq.n	800a5e4 <_malloc_r+0xa8>
 800a5d8:	1a21      	subs	r1, r4, r0
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f000 f82e 	bl	800a63c <_sbrk_r>
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d0cf      	beq.n	800a584 <_malloc_r+0x48>
 800a5e4:	6025      	str	r5, [r4, #0]
 800a5e6:	e7db      	b.n	800a5a0 <_malloc_r+0x64>
 800a5e8:	20004a48 	.word	0x20004a48
 800a5ec:	20004a4c 	.word	0x20004a4c

0800a5f0 <_realloc_r>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	4614      	mov	r4, r2
 800a5f6:	460e      	mov	r6, r1
 800a5f8:	b921      	cbnz	r1, 800a604 <_realloc_r+0x14>
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a600:	f7ff bf9c 	b.w	800a53c <_malloc_r>
 800a604:	b922      	cbnz	r2, 800a610 <_realloc_r+0x20>
 800a606:	f7ff ff4b 	bl	800a4a0 <_free_r>
 800a60a:	4625      	mov	r5, r4
 800a60c:	4628      	mov	r0, r5
 800a60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a610:	f000 f826 	bl	800a660 <_malloc_usable_size_r>
 800a614:	42a0      	cmp	r0, r4
 800a616:	d20f      	bcs.n	800a638 <_realloc_r+0x48>
 800a618:	4621      	mov	r1, r4
 800a61a:	4638      	mov	r0, r7
 800a61c:	f7ff ff8e 	bl	800a53c <_malloc_r>
 800a620:	4605      	mov	r5, r0
 800a622:	2800      	cmp	r0, #0
 800a624:	d0f2      	beq.n	800a60c <_realloc_r+0x1c>
 800a626:	4631      	mov	r1, r6
 800a628:	4622      	mov	r2, r4
 800a62a:	f7ff fc11 	bl	8009e50 <memcpy>
 800a62e:	4631      	mov	r1, r6
 800a630:	4638      	mov	r0, r7
 800a632:	f7ff ff35 	bl	800a4a0 <_free_r>
 800a636:	e7e9      	b.n	800a60c <_realloc_r+0x1c>
 800a638:	4635      	mov	r5, r6
 800a63a:	e7e7      	b.n	800a60c <_realloc_r+0x1c>

0800a63c <_sbrk_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4c06      	ldr	r4, [pc, #24]	; (800a658 <_sbrk_r+0x1c>)
 800a640:	2300      	movs	r3, #0
 800a642:	4605      	mov	r5, r0
 800a644:	4608      	mov	r0, r1
 800a646:	6023      	str	r3, [r4, #0]
 800a648:	f7f7 fb7a 	bl	8001d40 <_sbrk>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_sbrk_r+0x1a>
 800a650:	6823      	ldr	r3, [r4, #0]
 800a652:	b103      	cbz	r3, 800a656 <_sbrk_r+0x1a>
 800a654:	602b      	str	r3, [r5, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	200072f4 	.word	0x200072f4

0800a65c <__malloc_lock>:
 800a65c:	4770      	bx	lr

0800a65e <__malloc_unlock>:
 800a65e:	4770      	bx	lr

0800a660 <_malloc_usable_size_r>:
 800a660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a664:	1f18      	subs	r0, r3, #4
 800a666:	2b00      	cmp	r3, #0
 800a668:	bfbc      	itt	lt
 800a66a:	580b      	ldrlt	r3, [r1, r0]
 800a66c:	18c0      	addlt	r0, r0, r3
 800a66e:	4770      	bx	lr

0800a670 <_init>:
 800a670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a672:	bf00      	nop
 800a674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a676:	bc08      	pop	{r3}
 800a678:	469e      	mov	lr, r3
 800a67a:	4770      	bx	lr

0800a67c <_fini>:
 800a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67e:	bf00      	nop
 800a680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a682:	bc08      	pop	{r3}
 800a684:	469e      	mov	lr, r3
 800a686:	4770      	bx	lr
